// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"stock_service/repository/ent/predicate"
	"stock_service/repository/ent/stock"
	"stock_service/repository/ent/tradedate"
	"stock_service/repository/ent/user"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeStock     = "Stock"
	TypeTradeDate = "TradeDate"
	TypeUser      = "User"
)

// StockMutation represents an operation that mutates the Stock nodes in the graph.
type StockMutation struct {
	config
	op                 Op
	typ                string
	id                 *uint64
	symbol             *string
	name               *string
	bull               *int
	addbull            *int
	last_subscribe_at  *time.Time
	short              *string
	clearedFields      map[string]struct{}
	trades             map[uint64]struct{}
	removedtrades      map[uint64]struct{}
	clearedtrades      bool
	subscribers        map[uint64]struct{}
	removedsubscribers map[uint64]struct{}
	clearedsubscribers bool
	done               bool
	oldValue           func(context.Context) (*Stock, error)
	predicates         []predicate.Stock
}

var _ ent.Mutation = (*StockMutation)(nil)

// stockOption allows management of the mutation configuration using functional options.
type stockOption func(*StockMutation)

// newStockMutation creates new mutation for the Stock entity.
func newStockMutation(c config, op Op, opts ...stockOption) *StockMutation {
	m := &StockMutation{
		config:        c,
		op:            op,
		typ:           TypeStock,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withStockID sets the ID field of the mutation.
func withStockID(id uint64) stockOption {
	return func(m *StockMutation) {
		var (
			err   error
			once  sync.Once
			value *Stock
		)
		m.oldValue = func(ctx context.Context) (*Stock, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Stock.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withStock sets the old Stock of the mutation.
func withStock(node *Stock) stockOption {
	return func(m *StockMutation) {
		m.oldValue = func(context.Context) (*Stock, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m StockMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m StockMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Stock entities.
func (m *StockMutation) SetID(id uint64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *StockMutation) ID() (id uint64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *StockMutation) IDs(ctx context.Context) ([]uint64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uint64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Stock.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetSymbol sets the "symbol" field.
func (m *StockMutation) SetSymbol(s string) {
	m.symbol = &s
}

// Symbol returns the value of the "symbol" field in the mutation.
func (m *StockMutation) Symbol() (r string, exists bool) {
	v := m.symbol
	if v == nil {
		return
	}
	return *v, true
}

// OldSymbol returns the old "symbol" field's value of the Stock entity.
// If the Stock object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StockMutation) OldSymbol(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSymbol is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSymbol requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSymbol: %w", err)
	}
	return oldValue.Symbol, nil
}

// ResetSymbol resets all changes to the "symbol" field.
func (m *StockMutation) ResetSymbol() {
	m.symbol = nil
}

// SetName sets the "name" field.
func (m *StockMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *StockMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Stock entity.
// If the Stock object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StockMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *StockMutation) ResetName() {
	m.name = nil
}

// SetBull sets the "bull" field.
func (m *StockMutation) SetBull(i int) {
	m.bull = &i
	m.addbull = nil
}

// Bull returns the value of the "bull" field in the mutation.
func (m *StockMutation) Bull() (r int, exists bool) {
	v := m.bull
	if v == nil {
		return
	}
	return *v, true
}

// OldBull returns the old "bull" field's value of the Stock entity.
// If the Stock object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StockMutation) OldBull(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBull is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBull requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBull: %w", err)
	}
	return oldValue.Bull, nil
}

// AddBull adds i to the "bull" field.
func (m *StockMutation) AddBull(i int) {
	if m.addbull != nil {
		*m.addbull += i
	} else {
		m.addbull = &i
	}
}

// AddedBull returns the value that was added to the "bull" field in this mutation.
func (m *StockMutation) AddedBull() (r int, exists bool) {
	v := m.addbull
	if v == nil {
		return
	}
	return *v, true
}

// ResetBull resets all changes to the "bull" field.
func (m *StockMutation) ResetBull() {
	m.bull = nil
	m.addbull = nil
}

// SetLastSubscribeAt sets the "last_subscribe_at" field.
func (m *StockMutation) SetLastSubscribeAt(t time.Time) {
	m.last_subscribe_at = &t
}

// LastSubscribeAt returns the value of the "last_subscribe_at" field in the mutation.
func (m *StockMutation) LastSubscribeAt() (r time.Time, exists bool) {
	v := m.last_subscribe_at
	if v == nil {
		return
	}
	return *v, true
}

// OldLastSubscribeAt returns the old "last_subscribe_at" field's value of the Stock entity.
// If the Stock object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StockMutation) OldLastSubscribeAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLastSubscribeAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLastSubscribeAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLastSubscribeAt: %w", err)
	}
	return oldValue.LastSubscribeAt, nil
}

// ResetLastSubscribeAt resets all changes to the "last_subscribe_at" field.
func (m *StockMutation) ResetLastSubscribeAt() {
	m.last_subscribe_at = nil
}

// SetShort sets the "short" field.
func (m *StockMutation) SetShort(s string) {
	m.short = &s
}

// Short returns the value of the "short" field in the mutation.
func (m *StockMutation) Short() (r string, exists bool) {
	v := m.short
	if v == nil {
		return
	}
	return *v, true
}

// OldShort returns the old "short" field's value of the Stock entity.
// If the Stock object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StockMutation) OldShort(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldShort is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldShort requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldShort: %w", err)
	}
	return oldValue.Short, nil
}

// ResetShort resets all changes to the "short" field.
func (m *StockMutation) ResetShort() {
	m.short = nil
}

// AddTradeIDs adds the "trades" edge to the TradeDate entity by ids.
func (m *StockMutation) AddTradeIDs(ids ...uint64) {
	if m.trades == nil {
		m.trades = make(map[uint64]struct{})
	}
	for i := range ids {
		m.trades[ids[i]] = struct{}{}
	}
}

// ClearTrades clears the "trades" edge to the TradeDate entity.
func (m *StockMutation) ClearTrades() {
	m.clearedtrades = true
}

// TradesCleared reports if the "trades" edge to the TradeDate entity was cleared.
func (m *StockMutation) TradesCleared() bool {
	return m.clearedtrades
}

// RemoveTradeIDs removes the "trades" edge to the TradeDate entity by IDs.
func (m *StockMutation) RemoveTradeIDs(ids ...uint64) {
	if m.removedtrades == nil {
		m.removedtrades = make(map[uint64]struct{})
	}
	for i := range ids {
		delete(m.trades, ids[i])
		m.removedtrades[ids[i]] = struct{}{}
	}
}

// RemovedTrades returns the removed IDs of the "trades" edge to the TradeDate entity.
func (m *StockMutation) RemovedTradesIDs() (ids []uint64) {
	for id := range m.removedtrades {
		ids = append(ids, id)
	}
	return
}

// TradesIDs returns the "trades" edge IDs in the mutation.
func (m *StockMutation) TradesIDs() (ids []uint64) {
	for id := range m.trades {
		ids = append(ids, id)
	}
	return
}

// ResetTrades resets all changes to the "trades" edge.
func (m *StockMutation) ResetTrades() {
	m.trades = nil
	m.clearedtrades = false
	m.removedtrades = nil
}

// AddSubscriberIDs adds the "subscribers" edge to the User entity by ids.
func (m *StockMutation) AddSubscriberIDs(ids ...uint64) {
	if m.subscribers == nil {
		m.subscribers = make(map[uint64]struct{})
	}
	for i := range ids {
		m.subscribers[ids[i]] = struct{}{}
	}
}

// ClearSubscribers clears the "subscribers" edge to the User entity.
func (m *StockMutation) ClearSubscribers() {
	m.clearedsubscribers = true
}

// SubscribersCleared reports if the "subscribers" edge to the User entity was cleared.
func (m *StockMutation) SubscribersCleared() bool {
	return m.clearedsubscribers
}

// RemoveSubscriberIDs removes the "subscribers" edge to the User entity by IDs.
func (m *StockMutation) RemoveSubscriberIDs(ids ...uint64) {
	if m.removedsubscribers == nil {
		m.removedsubscribers = make(map[uint64]struct{})
	}
	for i := range ids {
		delete(m.subscribers, ids[i])
		m.removedsubscribers[ids[i]] = struct{}{}
	}
}

// RemovedSubscribers returns the removed IDs of the "subscribers" edge to the User entity.
func (m *StockMutation) RemovedSubscribersIDs() (ids []uint64) {
	for id := range m.removedsubscribers {
		ids = append(ids, id)
	}
	return
}

// SubscribersIDs returns the "subscribers" edge IDs in the mutation.
func (m *StockMutation) SubscribersIDs() (ids []uint64) {
	for id := range m.subscribers {
		ids = append(ids, id)
	}
	return
}

// ResetSubscribers resets all changes to the "subscribers" edge.
func (m *StockMutation) ResetSubscribers() {
	m.subscribers = nil
	m.clearedsubscribers = false
	m.removedsubscribers = nil
}

// Where appends a list predicates to the StockMutation builder.
func (m *StockMutation) Where(ps ...predicate.Stock) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the StockMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *StockMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Stock, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *StockMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *StockMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Stock).
func (m *StockMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *StockMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.symbol != nil {
		fields = append(fields, stock.FieldSymbol)
	}
	if m.name != nil {
		fields = append(fields, stock.FieldName)
	}
	if m.bull != nil {
		fields = append(fields, stock.FieldBull)
	}
	if m.last_subscribe_at != nil {
		fields = append(fields, stock.FieldLastSubscribeAt)
	}
	if m.short != nil {
		fields = append(fields, stock.FieldShort)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *StockMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case stock.FieldSymbol:
		return m.Symbol()
	case stock.FieldName:
		return m.Name()
	case stock.FieldBull:
		return m.Bull()
	case stock.FieldLastSubscribeAt:
		return m.LastSubscribeAt()
	case stock.FieldShort:
		return m.Short()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *StockMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case stock.FieldSymbol:
		return m.OldSymbol(ctx)
	case stock.FieldName:
		return m.OldName(ctx)
	case stock.FieldBull:
		return m.OldBull(ctx)
	case stock.FieldLastSubscribeAt:
		return m.OldLastSubscribeAt(ctx)
	case stock.FieldShort:
		return m.OldShort(ctx)
	}
	return nil, fmt.Errorf("unknown Stock field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *StockMutation) SetField(name string, value ent.Value) error {
	switch name {
	case stock.FieldSymbol:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSymbol(v)
		return nil
	case stock.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case stock.FieldBull:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBull(v)
		return nil
	case stock.FieldLastSubscribeAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLastSubscribeAt(v)
		return nil
	case stock.FieldShort:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetShort(v)
		return nil
	}
	return fmt.Errorf("unknown Stock field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *StockMutation) AddedFields() []string {
	var fields []string
	if m.addbull != nil {
		fields = append(fields, stock.FieldBull)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *StockMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case stock.FieldBull:
		return m.AddedBull()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *StockMutation) AddField(name string, value ent.Value) error {
	switch name {
	case stock.FieldBull:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddBull(v)
		return nil
	}
	return fmt.Errorf("unknown Stock numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *StockMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *StockMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *StockMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Stock nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *StockMutation) ResetField(name string) error {
	switch name {
	case stock.FieldSymbol:
		m.ResetSymbol()
		return nil
	case stock.FieldName:
		m.ResetName()
		return nil
	case stock.FieldBull:
		m.ResetBull()
		return nil
	case stock.FieldLastSubscribeAt:
		m.ResetLastSubscribeAt()
		return nil
	case stock.FieldShort:
		m.ResetShort()
		return nil
	}
	return fmt.Errorf("unknown Stock field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *StockMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.trades != nil {
		edges = append(edges, stock.EdgeTrades)
	}
	if m.subscribers != nil {
		edges = append(edges, stock.EdgeSubscribers)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *StockMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case stock.EdgeTrades:
		ids := make([]ent.Value, 0, len(m.trades))
		for id := range m.trades {
			ids = append(ids, id)
		}
		return ids
	case stock.EdgeSubscribers:
		ids := make([]ent.Value, 0, len(m.subscribers))
		for id := range m.subscribers {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *StockMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedtrades != nil {
		edges = append(edges, stock.EdgeTrades)
	}
	if m.removedsubscribers != nil {
		edges = append(edges, stock.EdgeSubscribers)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *StockMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case stock.EdgeTrades:
		ids := make([]ent.Value, 0, len(m.removedtrades))
		for id := range m.removedtrades {
			ids = append(ids, id)
		}
		return ids
	case stock.EdgeSubscribers:
		ids := make([]ent.Value, 0, len(m.removedsubscribers))
		for id := range m.removedsubscribers {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *StockMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedtrades {
		edges = append(edges, stock.EdgeTrades)
	}
	if m.clearedsubscribers {
		edges = append(edges, stock.EdgeSubscribers)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *StockMutation) EdgeCleared(name string) bool {
	switch name {
	case stock.EdgeTrades:
		return m.clearedtrades
	case stock.EdgeSubscribers:
		return m.clearedsubscribers
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *StockMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Stock unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *StockMutation) ResetEdge(name string) error {
	switch name {
	case stock.EdgeTrades:
		m.ResetTrades()
		return nil
	case stock.EdgeSubscribers:
		m.ResetSubscribers()
		return nil
	}
	return fmt.Errorf("unknown Stock edge %s", name)
}

// TradeDateMutation represents an operation that mutates the TradeDate nodes in the graph.
type TradeDateMutation struct {
	config
	op                      Op
	typ                     string
	id                      *uint64
	t_date                  *string
	close                   *float64
	addclose                *float64
	volume                  *float64
	addvolume               *float64
	create_at               *int64
	addcreate_at            *int64
	update_at               *int64
	addupdate_at            *int64
	xueqiu_comment_count    *int64
	addxueqiu_comment_count *int64
	open                    *float64
	addopen                 *float64
	max                     *float64
	addmax                  *float64
	min                     *float64
	addmin                  *float64
	bull                    *int
	addbull                 *int
	short                   *string
	clearedFields           map[string]struct{}
	stock                   *uint64
	clearedstock            bool
	done                    bool
	oldValue                func(context.Context) (*TradeDate, error)
	predicates              []predicate.TradeDate
}

var _ ent.Mutation = (*TradeDateMutation)(nil)

// tradedateOption allows management of the mutation configuration using functional options.
type tradedateOption func(*TradeDateMutation)

// newTradeDateMutation creates new mutation for the TradeDate entity.
func newTradeDateMutation(c config, op Op, opts ...tradedateOption) *TradeDateMutation {
	m := &TradeDateMutation{
		config:        c,
		op:            op,
		typ:           TypeTradeDate,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTradeDateID sets the ID field of the mutation.
func withTradeDateID(id uint64) tradedateOption {
	return func(m *TradeDateMutation) {
		var (
			err   error
			once  sync.Once
			value *TradeDate
		)
		m.oldValue = func(ctx context.Context) (*TradeDate, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().TradeDate.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTradeDate sets the old TradeDate of the mutation.
func withTradeDate(node *TradeDate) tradedateOption {
	return func(m *TradeDateMutation) {
		m.oldValue = func(context.Context) (*TradeDate, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TradeDateMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TradeDateMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of TradeDate entities.
func (m *TradeDateMutation) SetID(id uint64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *TradeDateMutation) ID() (id uint64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *TradeDateMutation) IDs(ctx context.Context) ([]uint64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uint64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().TradeDate.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetStockID sets the "stock_id" field.
func (m *TradeDateMutation) SetStockID(u uint64) {
	m.stock = &u
}

// StockID returns the value of the "stock_id" field in the mutation.
func (m *TradeDateMutation) StockID() (r uint64, exists bool) {
	v := m.stock
	if v == nil {
		return
	}
	return *v, true
}

// OldStockID returns the old "stock_id" field's value of the TradeDate entity.
// If the TradeDate object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TradeDateMutation) OldStockID(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStockID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStockID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStockID: %w", err)
	}
	return oldValue.StockID, nil
}

// ClearStockID clears the value of the "stock_id" field.
func (m *TradeDateMutation) ClearStockID() {
	m.stock = nil
	m.clearedFields[tradedate.FieldStockID] = struct{}{}
}

// StockIDCleared returns if the "stock_id" field was cleared in this mutation.
func (m *TradeDateMutation) StockIDCleared() bool {
	_, ok := m.clearedFields[tradedate.FieldStockID]
	return ok
}

// ResetStockID resets all changes to the "stock_id" field.
func (m *TradeDateMutation) ResetStockID() {
	m.stock = nil
	delete(m.clearedFields, tradedate.FieldStockID)
}

// SetTDate sets the "t_date" field.
func (m *TradeDateMutation) SetTDate(s string) {
	m.t_date = &s
}

// TDate returns the value of the "t_date" field in the mutation.
func (m *TradeDateMutation) TDate() (r string, exists bool) {
	v := m.t_date
	if v == nil {
		return
	}
	return *v, true
}

// OldTDate returns the old "t_date" field's value of the TradeDate entity.
// If the TradeDate object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TradeDateMutation) OldTDate(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTDate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTDate: %w", err)
	}
	return oldValue.TDate, nil
}

// ResetTDate resets all changes to the "t_date" field.
func (m *TradeDateMutation) ResetTDate() {
	m.t_date = nil
}

// SetClose sets the "close" field.
func (m *TradeDateMutation) SetClose(f float64) {
	m.close = &f
	m.addclose = nil
}

// Close returns the value of the "close" field in the mutation.
func (m *TradeDateMutation) Close() (r float64, exists bool) {
	v := m.close
	if v == nil {
		return
	}
	return *v, true
}

// OldClose returns the old "close" field's value of the TradeDate entity.
// If the TradeDate object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TradeDateMutation) OldClose(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldClose is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldClose requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldClose: %w", err)
	}
	return oldValue.Close, nil
}

// AddClose adds f to the "close" field.
func (m *TradeDateMutation) AddClose(f float64) {
	if m.addclose != nil {
		*m.addclose += f
	} else {
		m.addclose = &f
	}
}

// AddedClose returns the value that was added to the "close" field in this mutation.
func (m *TradeDateMutation) AddedClose() (r float64, exists bool) {
	v := m.addclose
	if v == nil {
		return
	}
	return *v, true
}

// ResetClose resets all changes to the "close" field.
func (m *TradeDateMutation) ResetClose() {
	m.close = nil
	m.addclose = nil
}

// SetVolume sets the "volume" field.
func (m *TradeDateMutation) SetVolume(f float64) {
	m.volume = &f
	m.addvolume = nil
}

// Volume returns the value of the "volume" field in the mutation.
func (m *TradeDateMutation) Volume() (r float64, exists bool) {
	v := m.volume
	if v == nil {
		return
	}
	return *v, true
}

// OldVolume returns the old "volume" field's value of the TradeDate entity.
// If the TradeDate object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TradeDateMutation) OldVolume(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldVolume is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldVolume requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldVolume: %w", err)
	}
	return oldValue.Volume, nil
}

// AddVolume adds f to the "volume" field.
func (m *TradeDateMutation) AddVolume(f float64) {
	if m.addvolume != nil {
		*m.addvolume += f
	} else {
		m.addvolume = &f
	}
}

// AddedVolume returns the value that was added to the "volume" field in this mutation.
func (m *TradeDateMutation) AddedVolume() (r float64, exists bool) {
	v := m.addvolume
	if v == nil {
		return
	}
	return *v, true
}

// ResetVolume resets all changes to the "volume" field.
func (m *TradeDateMutation) ResetVolume() {
	m.volume = nil
	m.addvolume = nil
}

// SetCreateAt sets the "create_at" field.
func (m *TradeDateMutation) SetCreateAt(i int64) {
	m.create_at = &i
	m.addcreate_at = nil
}

// CreateAt returns the value of the "create_at" field in the mutation.
func (m *TradeDateMutation) CreateAt() (r int64, exists bool) {
	v := m.create_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateAt returns the old "create_at" field's value of the TradeDate entity.
// If the TradeDate object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TradeDateMutation) OldCreateAt(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateAt: %w", err)
	}
	return oldValue.CreateAt, nil
}

// AddCreateAt adds i to the "create_at" field.
func (m *TradeDateMutation) AddCreateAt(i int64) {
	if m.addcreate_at != nil {
		*m.addcreate_at += i
	} else {
		m.addcreate_at = &i
	}
}

// AddedCreateAt returns the value that was added to the "create_at" field in this mutation.
func (m *TradeDateMutation) AddedCreateAt() (r int64, exists bool) {
	v := m.addcreate_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreateAt resets all changes to the "create_at" field.
func (m *TradeDateMutation) ResetCreateAt() {
	m.create_at = nil
	m.addcreate_at = nil
}

// SetUpdateAt sets the "update_at" field.
func (m *TradeDateMutation) SetUpdateAt(i int64) {
	m.update_at = &i
	m.addupdate_at = nil
}

// UpdateAt returns the value of the "update_at" field in the mutation.
func (m *TradeDateMutation) UpdateAt() (r int64, exists bool) {
	v := m.update_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateAt returns the old "update_at" field's value of the TradeDate entity.
// If the TradeDate object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TradeDateMutation) OldUpdateAt(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateAt: %w", err)
	}
	return oldValue.UpdateAt, nil
}

// AddUpdateAt adds i to the "update_at" field.
func (m *TradeDateMutation) AddUpdateAt(i int64) {
	if m.addupdate_at != nil {
		*m.addupdate_at += i
	} else {
		m.addupdate_at = &i
	}
}

// AddedUpdateAt returns the value that was added to the "update_at" field in this mutation.
func (m *TradeDateMutation) AddedUpdateAt() (r int64, exists bool) {
	v := m.addupdate_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpdateAt resets all changes to the "update_at" field.
func (m *TradeDateMutation) ResetUpdateAt() {
	m.update_at = nil
	m.addupdate_at = nil
}

// SetXueqiuCommentCount sets the "xueqiu_comment_count" field.
func (m *TradeDateMutation) SetXueqiuCommentCount(i int64) {
	m.xueqiu_comment_count = &i
	m.addxueqiu_comment_count = nil
}

// XueqiuCommentCount returns the value of the "xueqiu_comment_count" field in the mutation.
func (m *TradeDateMutation) XueqiuCommentCount() (r int64, exists bool) {
	v := m.xueqiu_comment_count
	if v == nil {
		return
	}
	return *v, true
}

// OldXueqiuCommentCount returns the old "xueqiu_comment_count" field's value of the TradeDate entity.
// If the TradeDate object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TradeDateMutation) OldXueqiuCommentCount(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldXueqiuCommentCount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldXueqiuCommentCount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldXueqiuCommentCount: %w", err)
	}
	return oldValue.XueqiuCommentCount, nil
}

// AddXueqiuCommentCount adds i to the "xueqiu_comment_count" field.
func (m *TradeDateMutation) AddXueqiuCommentCount(i int64) {
	if m.addxueqiu_comment_count != nil {
		*m.addxueqiu_comment_count += i
	} else {
		m.addxueqiu_comment_count = &i
	}
}

// AddedXueqiuCommentCount returns the value that was added to the "xueqiu_comment_count" field in this mutation.
func (m *TradeDateMutation) AddedXueqiuCommentCount() (r int64, exists bool) {
	v := m.addxueqiu_comment_count
	if v == nil {
		return
	}
	return *v, true
}

// ResetXueqiuCommentCount resets all changes to the "xueqiu_comment_count" field.
func (m *TradeDateMutation) ResetXueqiuCommentCount() {
	m.xueqiu_comment_count = nil
	m.addxueqiu_comment_count = nil
}

// SetOpen sets the "open" field.
func (m *TradeDateMutation) SetOpen(f float64) {
	m.open = &f
	m.addopen = nil
}

// Open returns the value of the "open" field in the mutation.
func (m *TradeDateMutation) Open() (r float64, exists bool) {
	v := m.open
	if v == nil {
		return
	}
	return *v, true
}

// OldOpen returns the old "open" field's value of the TradeDate entity.
// If the TradeDate object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TradeDateMutation) OldOpen(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOpen is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOpen requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOpen: %w", err)
	}
	return oldValue.Open, nil
}

// AddOpen adds f to the "open" field.
func (m *TradeDateMutation) AddOpen(f float64) {
	if m.addopen != nil {
		*m.addopen += f
	} else {
		m.addopen = &f
	}
}

// AddedOpen returns the value that was added to the "open" field in this mutation.
func (m *TradeDateMutation) AddedOpen() (r float64, exists bool) {
	v := m.addopen
	if v == nil {
		return
	}
	return *v, true
}

// ResetOpen resets all changes to the "open" field.
func (m *TradeDateMutation) ResetOpen() {
	m.open = nil
	m.addopen = nil
}

// SetMax sets the "max" field.
func (m *TradeDateMutation) SetMax(f float64) {
	m.max = &f
	m.addmax = nil
}

// Max returns the value of the "max" field in the mutation.
func (m *TradeDateMutation) Max() (r float64, exists bool) {
	v := m.max
	if v == nil {
		return
	}
	return *v, true
}

// OldMax returns the old "max" field's value of the TradeDate entity.
// If the TradeDate object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TradeDateMutation) OldMax(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMax is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMax requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMax: %w", err)
	}
	return oldValue.Max, nil
}

// AddMax adds f to the "max" field.
func (m *TradeDateMutation) AddMax(f float64) {
	if m.addmax != nil {
		*m.addmax += f
	} else {
		m.addmax = &f
	}
}

// AddedMax returns the value that was added to the "max" field in this mutation.
func (m *TradeDateMutation) AddedMax() (r float64, exists bool) {
	v := m.addmax
	if v == nil {
		return
	}
	return *v, true
}

// ResetMax resets all changes to the "max" field.
func (m *TradeDateMutation) ResetMax() {
	m.max = nil
	m.addmax = nil
}

// SetMin sets the "min" field.
func (m *TradeDateMutation) SetMin(f float64) {
	m.min = &f
	m.addmin = nil
}

// Min returns the value of the "min" field in the mutation.
func (m *TradeDateMutation) Min() (r float64, exists bool) {
	v := m.min
	if v == nil {
		return
	}
	return *v, true
}

// OldMin returns the old "min" field's value of the TradeDate entity.
// If the TradeDate object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TradeDateMutation) OldMin(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMin is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMin requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMin: %w", err)
	}
	return oldValue.Min, nil
}

// AddMin adds f to the "min" field.
func (m *TradeDateMutation) AddMin(f float64) {
	if m.addmin != nil {
		*m.addmin += f
	} else {
		m.addmin = &f
	}
}

// AddedMin returns the value that was added to the "min" field in this mutation.
func (m *TradeDateMutation) AddedMin() (r float64, exists bool) {
	v := m.addmin
	if v == nil {
		return
	}
	return *v, true
}

// ResetMin resets all changes to the "min" field.
func (m *TradeDateMutation) ResetMin() {
	m.min = nil
	m.addmin = nil
}

// SetBull sets the "bull" field.
func (m *TradeDateMutation) SetBull(i int) {
	m.bull = &i
	m.addbull = nil
}

// Bull returns the value of the "bull" field in the mutation.
func (m *TradeDateMutation) Bull() (r int, exists bool) {
	v := m.bull
	if v == nil {
		return
	}
	return *v, true
}

// OldBull returns the old "bull" field's value of the TradeDate entity.
// If the TradeDate object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TradeDateMutation) OldBull(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBull is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBull requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBull: %w", err)
	}
	return oldValue.Bull, nil
}

// AddBull adds i to the "bull" field.
func (m *TradeDateMutation) AddBull(i int) {
	if m.addbull != nil {
		*m.addbull += i
	} else {
		m.addbull = &i
	}
}

// AddedBull returns the value that was added to the "bull" field in this mutation.
func (m *TradeDateMutation) AddedBull() (r int, exists bool) {
	v := m.addbull
	if v == nil {
		return
	}
	return *v, true
}

// ResetBull resets all changes to the "bull" field.
func (m *TradeDateMutation) ResetBull() {
	m.bull = nil
	m.addbull = nil
}

// SetShort sets the "short" field.
func (m *TradeDateMutation) SetShort(s string) {
	m.short = &s
}

// Short returns the value of the "short" field in the mutation.
func (m *TradeDateMutation) Short() (r string, exists bool) {
	v := m.short
	if v == nil {
		return
	}
	return *v, true
}

// OldShort returns the old "short" field's value of the TradeDate entity.
// If the TradeDate object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TradeDateMutation) OldShort(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldShort is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldShort requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldShort: %w", err)
	}
	return oldValue.Short, nil
}

// ResetShort resets all changes to the "short" field.
func (m *TradeDateMutation) ResetShort() {
	m.short = nil
}

// ClearStock clears the "stock" edge to the Stock entity.
func (m *TradeDateMutation) ClearStock() {
	m.clearedstock = true
}

// StockCleared reports if the "stock" edge to the Stock entity was cleared.
func (m *TradeDateMutation) StockCleared() bool {
	return m.StockIDCleared() || m.clearedstock
}

// StockIDs returns the "stock" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// StockID instead. It exists only for internal usage by the builders.
func (m *TradeDateMutation) StockIDs() (ids []uint64) {
	if id := m.stock; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetStock resets all changes to the "stock" edge.
func (m *TradeDateMutation) ResetStock() {
	m.stock = nil
	m.clearedstock = false
}

// Where appends a list predicates to the TradeDateMutation builder.
func (m *TradeDateMutation) Where(ps ...predicate.TradeDate) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the TradeDateMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *TradeDateMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.TradeDate, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *TradeDateMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *TradeDateMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (TradeDate).
func (m *TradeDateMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *TradeDateMutation) Fields() []string {
	fields := make([]string, 0, 12)
	if m.stock != nil {
		fields = append(fields, tradedate.FieldStockID)
	}
	if m.t_date != nil {
		fields = append(fields, tradedate.FieldTDate)
	}
	if m.close != nil {
		fields = append(fields, tradedate.FieldClose)
	}
	if m.volume != nil {
		fields = append(fields, tradedate.FieldVolume)
	}
	if m.create_at != nil {
		fields = append(fields, tradedate.FieldCreateAt)
	}
	if m.update_at != nil {
		fields = append(fields, tradedate.FieldUpdateAt)
	}
	if m.xueqiu_comment_count != nil {
		fields = append(fields, tradedate.FieldXueqiuCommentCount)
	}
	if m.open != nil {
		fields = append(fields, tradedate.FieldOpen)
	}
	if m.max != nil {
		fields = append(fields, tradedate.FieldMax)
	}
	if m.min != nil {
		fields = append(fields, tradedate.FieldMin)
	}
	if m.bull != nil {
		fields = append(fields, tradedate.FieldBull)
	}
	if m.short != nil {
		fields = append(fields, tradedate.FieldShort)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *TradeDateMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case tradedate.FieldStockID:
		return m.StockID()
	case tradedate.FieldTDate:
		return m.TDate()
	case tradedate.FieldClose:
		return m.Close()
	case tradedate.FieldVolume:
		return m.Volume()
	case tradedate.FieldCreateAt:
		return m.CreateAt()
	case tradedate.FieldUpdateAt:
		return m.UpdateAt()
	case tradedate.FieldXueqiuCommentCount:
		return m.XueqiuCommentCount()
	case tradedate.FieldOpen:
		return m.Open()
	case tradedate.FieldMax:
		return m.Max()
	case tradedate.FieldMin:
		return m.Min()
	case tradedate.FieldBull:
		return m.Bull()
	case tradedate.FieldShort:
		return m.Short()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *TradeDateMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case tradedate.FieldStockID:
		return m.OldStockID(ctx)
	case tradedate.FieldTDate:
		return m.OldTDate(ctx)
	case tradedate.FieldClose:
		return m.OldClose(ctx)
	case tradedate.FieldVolume:
		return m.OldVolume(ctx)
	case tradedate.FieldCreateAt:
		return m.OldCreateAt(ctx)
	case tradedate.FieldUpdateAt:
		return m.OldUpdateAt(ctx)
	case tradedate.FieldXueqiuCommentCount:
		return m.OldXueqiuCommentCount(ctx)
	case tradedate.FieldOpen:
		return m.OldOpen(ctx)
	case tradedate.FieldMax:
		return m.OldMax(ctx)
	case tradedate.FieldMin:
		return m.OldMin(ctx)
	case tradedate.FieldBull:
		return m.OldBull(ctx)
	case tradedate.FieldShort:
		return m.OldShort(ctx)
	}
	return nil, fmt.Errorf("unknown TradeDate field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TradeDateMutation) SetField(name string, value ent.Value) error {
	switch name {
	case tradedate.FieldStockID:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStockID(v)
		return nil
	case tradedate.FieldTDate:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTDate(v)
		return nil
	case tradedate.FieldClose:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetClose(v)
		return nil
	case tradedate.FieldVolume:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetVolume(v)
		return nil
	case tradedate.FieldCreateAt:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateAt(v)
		return nil
	case tradedate.FieldUpdateAt:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateAt(v)
		return nil
	case tradedate.FieldXueqiuCommentCount:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetXueqiuCommentCount(v)
		return nil
	case tradedate.FieldOpen:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOpen(v)
		return nil
	case tradedate.FieldMax:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMax(v)
		return nil
	case tradedate.FieldMin:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMin(v)
		return nil
	case tradedate.FieldBull:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBull(v)
		return nil
	case tradedate.FieldShort:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetShort(v)
		return nil
	}
	return fmt.Errorf("unknown TradeDate field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *TradeDateMutation) AddedFields() []string {
	var fields []string
	if m.addclose != nil {
		fields = append(fields, tradedate.FieldClose)
	}
	if m.addvolume != nil {
		fields = append(fields, tradedate.FieldVolume)
	}
	if m.addcreate_at != nil {
		fields = append(fields, tradedate.FieldCreateAt)
	}
	if m.addupdate_at != nil {
		fields = append(fields, tradedate.FieldUpdateAt)
	}
	if m.addxueqiu_comment_count != nil {
		fields = append(fields, tradedate.FieldXueqiuCommentCount)
	}
	if m.addopen != nil {
		fields = append(fields, tradedate.FieldOpen)
	}
	if m.addmax != nil {
		fields = append(fields, tradedate.FieldMax)
	}
	if m.addmin != nil {
		fields = append(fields, tradedate.FieldMin)
	}
	if m.addbull != nil {
		fields = append(fields, tradedate.FieldBull)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *TradeDateMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case tradedate.FieldClose:
		return m.AddedClose()
	case tradedate.FieldVolume:
		return m.AddedVolume()
	case tradedate.FieldCreateAt:
		return m.AddedCreateAt()
	case tradedate.FieldUpdateAt:
		return m.AddedUpdateAt()
	case tradedate.FieldXueqiuCommentCount:
		return m.AddedXueqiuCommentCount()
	case tradedate.FieldOpen:
		return m.AddedOpen()
	case tradedate.FieldMax:
		return m.AddedMax()
	case tradedate.FieldMin:
		return m.AddedMin()
	case tradedate.FieldBull:
		return m.AddedBull()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TradeDateMutation) AddField(name string, value ent.Value) error {
	switch name {
	case tradedate.FieldClose:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddClose(v)
		return nil
	case tradedate.FieldVolume:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddVolume(v)
		return nil
	case tradedate.FieldCreateAt:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreateAt(v)
		return nil
	case tradedate.FieldUpdateAt:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdateAt(v)
		return nil
	case tradedate.FieldXueqiuCommentCount:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddXueqiuCommentCount(v)
		return nil
	case tradedate.FieldOpen:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddOpen(v)
		return nil
	case tradedate.FieldMax:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddMax(v)
		return nil
	case tradedate.FieldMin:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddMin(v)
		return nil
	case tradedate.FieldBull:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddBull(v)
		return nil
	}
	return fmt.Errorf("unknown TradeDate numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *TradeDateMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(tradedate.FieldStockID) {
		fields = append(fields, tradedate.FieldStockID)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *TradeDateMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *TradeDateMutation) ClearField(name string) error {
	switch name {
	case tradedate.FieldStockID:
		m.ClearStockID()
		return nil
	}
	return fmt.Errorf("unknown TradeDate nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *TradeDateMutation) ResetField(name string) error {
	switch name {
	case tradedate.FieldStockID:
		m.ResetStockID()
		return nil
	case tradedate.FieldTDate:
		m.ResetTDate()
		return nil
	case tradedate.FieldClose:
		m.ResetClose()
		return nil
	case tradedate.FieldVolume:
		m.ResetVolume()
		return nil
	case tradedate.FieldCreateAt:
		m.ResetCreateAt()
		return nil
	case tradedate.FieldUpdateAt:
		m.ResetUpdateAt()
		return nil
	case tradedate.FieldXueqiuCommentCount:
		m.ResetXueqiuCommentCount()
		return nil
	case tradedate.FieldOpen:
		m.ResetOpen()
		return nil
	case tradedate.FieldMax:
		m.ResetMax()
		return nil
	case tradedate.FieldMin:
		m.ResetMin()
		return nil
	case tradedate.FieldBull:
		m.ResetBull()
		return nil
	case tradedate.FieldShort:
		m.ResetShort()
		return nil
	}
	return fmt.Errorf("unknown TradeDate field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *TradeDateMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.stock != nil {
		edges = append(edges, tradedate.EdgeStock)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *TradeDateMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case tradedate.EdgeStock:
		if id := m.stock; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *TradeDateMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *TradeDateMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *TradeDateMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedstock {
		edges = append(edges, tradedate.EdgeStock)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *TradeDateMutation) EdgeCleared(name string) bool {
	switch name {
	case tradedate.EdgeStock:
		return m.clearedstock
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *TradeDateMutation) ClearEdge(name string) error {
	switch name {
	case tradedate.EdgeStock:
		m.ClearStock()
		return nil
	}
	return fmt.Errorf("unknown TradeDate unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *TradeDateMutation) ResetEdge(name string) error {
	switch name {
	case tradedate.EdgeStock:
		m.ResetStock()
		return nil
	}
	return fmt.Errorf("unknown TradeDate edge %s", name)
}

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op                      Op
	typ                     string
	id                      *uint64
	nick_name               *string
	clearedFields           map[string]struct{}
	subscribe_stocks        map[uint64]struct{}
	removedsubscribe_stocks map[uint64]struct{}
	clearedsubscribe_stocks bool
	done                    bool
	oldValue                func(context.Context) (*User, error)
	predicates              []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id uint64) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of User entities.
func (m *UserMutation) SetID(id uint64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserMutation) ID() (id uint64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserMutation) IDs(ctx context.Context) ([]uint64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uint64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().User.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetNickName sets the "nick_name" field.
func (m *UserMutation) SetNickName(s string) {
	m.nick_name = &s
}

// NickName returns the value of the "nick_name" field in the mutation.
func (m *UserMutation) NickName() (r string, exists bool) {
	v := m.nick_name
	if v == nil {
		return
	}
	return *v, true
}

// OldNickName returns the old "nick_name" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldNickName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNickName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNickName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNickName: %w", err)
	}
	return oldValue.NickName, nil
}

// ResetNickName resets all changes to the "nick_name" field.
func (m *UserMutation) ResetNickName() {
	m.nick_name = nil
}

// AddSubscribeStockIDs adds the "subscribe_stocks" edge to the Stock entity by ids.
func (m *UserMutation) AddSubscribeStockIDs(ids ...uint64) {
	if m.subscribe_stocks == nil {
		m.subscribe_stocks = make(map[uint64]struct{})
	}
	for i := range ids {
		m.subscribe_stocks[ids[i]] = struct{}{}
	}
}

// ClearSubscribeStocks clears the "subscribe_stocks" edge to the Stock entity.
func (m *UserMutation) ClearSubscribeStocks() {
	m.clearedsubscribe_stocks = true
}

// SubscribeStocksCleared reports if the "subscribe_stocks" edge to the Stock entity was cleared.
func (m *UserMutation) SubscribeStocksCleared() bool {
	return m.clearedsubscribe_stocks
}

// RemoveSubscribeStockIDs removes the "subscribe_stocks" edge to the Stock entity by IDs.
func (m *UserMutation) RemoveSubscribeStockIDs(ids ...uint64) {
	if m.removedsubscribe_stocks == nil {
		m.removedsubscribe_stocks = make(map[uint64]struct{})
	}
	for i := range ids {
		delete(m.subscribe_stocks, ids[i])
		m.removedsubscribe_stocks[ids[i]] = struct{}{}
	}
}

// RemovedSubscribeStocks returns the removed IDs of the "subscribe_stocks" edge to the Stock entity.
func (m *UserMutation) RemovedSubscribeStocksIDs() (ids []uint64) {
	for id := range m.removedsubscribe_stocks {
		ids = append(ids, id)
	}
	return
}

// SubscribeStocksIDs returns the "subscribe_stocks" edge IDs in the mutation.
func (m *UserMutation) SubscribeStocksIDs() (ids []uint64) {
	for id := range m.subscribe_stocks {
		ids = append(ids, id)
	}
	return
}

// ResetSubscribeStocks resets all changes to the "subscribe_stocks" edge.
func (m *UserMutation) ResetSubscribeStocks() {
	m.subscribe_stocks = nil
	m.clearedsubscribe_stocks = false
	m.removedsubscribe_stocks = nil
}

// Where appends a list predicates to the UserMutation builder.
func (m *UserMutation) Where(ps ...predicate.User) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the UserMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *UserMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.User, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *UserMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.nick_name != nil {
		fields = append(fields, user.FieldNickName)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldNickName:
		return m.NickName()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldNickName:
		return m.OldNickName(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldNickName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNickName(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldNickName:
		m.ResetNickName()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.subscribe_stocks != nil {
		edges = append(edges, user.EdgeSubscribeStocks)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeSubscribeStocks:
		ids := make([]ent.Value, 0, len(m.subscribe_stocks))
		for id := range m.subscribe_stocks {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedsubscribe_stocks != nil {
		edges = append(edges, user.EdgeSubscribeStocks)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeSubscribeStocks:
		ids := make([]ent.Value, 0, len(m.removedsubscribe_stocks))
		for id := range m.removedsubscribe_stocks {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedsubscribe_stocks {
		edges = append(edges, user.EdgeSubscribeStocks)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	switch name {
	case user.EdgeSubscribeStocks:
		return m.clearedsubscribe_stocks
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	switch name {
	case user.EdgeSubscribeStocks:
		m.ResetSubscribeStocks()
		return nil
	}
	return fmt.Errorf("unknown User edge %s", name)
}
