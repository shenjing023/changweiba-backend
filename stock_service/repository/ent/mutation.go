// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"stock_service/repository/ent/predicate"
	"stock_service/repository/ent/stock"
	"stock_service/repository/ent/tradedate"
	"sync"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeStock     = "Stock"
	TypeTradeDate = "TradeDate"
)

// StockMutation represents an operation that mutates the Stock nodes in the graph.
type StockMutation struct {
	config
	op            Op
	typ           string
	id            *int
	symbol        *string
	name          *string
	clearedFields map[string]struct{}
	trades        map[int]struct{}
	removedtrades map[int]struct{}
	clearedtrades bool
	done          bool
	oldValue      func(context.Context) (*Stock, error)
	predicates    []predicate.Stock
}

var _ ent.Mutation = (*StockMutation)(nil)

// stockOption allows management of the mutation configuration using functional options.
type stockOption func(*StockMutation)

// newStockMutation creates new mutation for the Stock entity.
func newStockMutation(c config, op Op, opts ...stockOption) *StockMutation {
	m := &StockMutation{
		config:        c,
		op:            op,
		typ:           TypeStock,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withStockID sets the ID field of the mutation.
func withStockID(id int) stockOption {
	return func(m *StockMutation) {
		var (
			err   error
			once  sync.Once
			value *Stock
		)
		m.oldValue = func(ctx context.Context) (*Stock, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Stock.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withStock sets the old Stock of the mutation.
func withStock(node *Stock) stockOption {
	return func(m *StockMutation) {
		m.oldValue = func(context.Context) (*Stock, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m StockMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m StockMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *StockMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetSymbol sets the "symbol" field.
func (m *StockMutation) SetSymbol(s string) {
	m.symbol = &s
}

// Symbol returns the value of the "symbol" field in the mutation.
func (m *StockMutation) Symbol() (r string, exists bool) {
	v := m.symbol
	if v == nil {
		return
	}
	return *v, true
}

// OldSymbol returns the old "symbol" field's value of the Stock entity.
// If the Stock object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StockMutation) OldSymbol(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldSymbol is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldSymbol requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSymbol: %w", err)
	}
	return oldValue.Symbol, nil
}

// ResetSymbol resets all changes to the "symbol" field.
func (m *StockMutation) ResetSymbol() {
	m.symbol = nil
}

// SetName sets the "name" field.
func (m *StockMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *StockMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Stock entity.
// If the Stock object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StockMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *StockMutation) ResetName() {
	m.name = nil
}

// AddTradeIDs adds the "trades" edge to the TradeDate entity by ids.
func (m *StockMutation) AddTradeIDs(ids ...int) {
	if m.trades == nil {
		m.trades = make(map[int]struct{})
	}
	for i := range ids {
		m.trades[ids[i]] = struct{}{}
	}
}

// ClearTrades clears the "trades" edge to the TradeDate entity.
func (m *StockMutation) ClearTrades() {
	m.clearedtrades = true
}

// TradesCleared reports if the "trades" edge to the TradeDate entity was cleared.
func (m *StockMutation) TradesCleared() bool {
	return m.clearedtrades
}

// RemoveTradeIDs removes the "trades" edge to the TradeDate entity by IDs.
func (m *StockMutation) RemoveTradeIDs(ids ...int) {
	if m.removedtrades == nil {
		m.removedtrades = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.trades, ids[i])
		m.removedtrades[ids[i]] = struct{}{}
	}
}

// RemovedTrades returns the removed IDs of the "trades" edge to the TradeDate entity.
func (m *StockMutation) RemovedTradesIDs() (ids []int) {
	for id := range m.removedtrades {
		ids = append(ids, id)
	}
	return
}

// TradesIDs returns the "trades" edge IDs in the mutation.
func (m *StockMutation) TradesIDs() (ids []int) {
	for id := range m.trades {
		ids = append(ids, id)
	}
	return
}

// ResetTrades resets all changes to the "trades" edge.
func (m *StockMutation) ResetTrades() {
	m.trades = nil
	m.clearedtrades = false
	m.removedtrades = nil
}

// Where appends a list predicates to the StockMutation builder.
func (m *StockMutation) Where(ps ...predicate.Stock) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *StockMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Stock).
func (m *StockMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *StockMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.symbol != nil {
		fields = append(fields, stock.FieldSymbol)
	}
	if m.name != nil {
		fields = append(fields, stock.FieldName)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *StockMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case stock.FieldSymbol:
		return m.Symbol()
	case stock.FieldName:
		return m.Name()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *StockMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case stock.FieldSymbol:
		return m.OldSymbol(ctx)
	case stock.FieldName:
		return m.OldName(ctx)
	}
	return nil, fmt.Errorf("unknown Stock field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *StockMutation) SetField(name string, value ent.Value) error {
	switch name {
	case stock.FieldSymbol:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSymbol(v)
		return nil
	case stock.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	}
	return fmt.Errorf("unknown Stock field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *StockMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *StockMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *StockMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Stock numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *StockMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *StockMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *StockMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Stock nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *StockMutation) ResetField(name string) error {
	switch name {
	case stock.FieldSymbol:
		m.ResetSymbol()
		return nil
	case stock.FieldName:
		m.ResetName()
		return nil
	}
	return fmt.Errorf("unknown Stock field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *StockMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.trades != nil {
		edges = append(edges, stock.EdgeTrades)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *StockMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case stock.EdgeTrades:
		ids := make([]ent.Value, 0, len(m.trades))
		for id := range m.trades {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *StockMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedtrades != nil {
		edges = append(edges, stock.EdgeTrades)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *StockMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case stock.EdgeTrades:
		ids := make([]ent.Value, 0, len(m.removedtrades))
		for id := range m.removedtrades {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *StockMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedtrades {
		edges = append(edges, stock.EdgeTrades)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *StockMutation) EdgeCleared(name string) bool {
	switch name {
	case stock.EdgeTrades:
		return m.clearedtrades
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *StockMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Stock unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *StockMutation) ResetEdge(name string) error {
	switch name {
	case stock.EdgeTrades:
		m.ResetTrades()
		return nil
	}
	return fmt.Errorf("unknown Stock edge %s", name)
}

// TradeDateMutation represents an operation that mutates the TradeDate nodes in the graph.
type TradeDateMutation struct {
	config
	op                      Op
	typ                     string
	id                      *int
	t_date                  *string
	end_price               *float64
	addend_price            *float64
	create_at               *int64
	addcreate_at            *int64
	update_at               *int64
	addupdate_at            *int64
	xueqiu_comment_count    *int64
	addxueqiu_comment_count *int64
	clearedFields           map[string]struct{}
	stock                   *int
	clearedstock            bool
	done                    bool
	oldValue                func(context.Context) (*TradeDate, error)
	predicates              []predicate.TradeDate
}

var _ ent.Mutation = (*TradeDateMutation)(nil)

// tradedateOption allows management of the mutation configuration using functional options.
type tradedateOption func(*TradeDateMutation)

// newTradeDateMutation creates new mutation for the TradeDate entity.
func newTradeDateMutation(c config, op Op, opts ...tradedateOption) *TradeDateMutation {
	m := &TradeDateMutation{
		config:        c,
		op:            op,
		typ:           TypeTradeDate,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTradeDateID sets the ID field of the mutation.
func withTradeDateID(id int) tradedateOption {
	return func(m *TradeDateMutation) {
		var (
			err   error
			once  sync.Once
			value *TradeDate
		)
		m.oldValue = func(ctx context.Context) (*TradeDate, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().TradeDate.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTradeDate sets the old TradeDate of the mutation.
func withTradeDate(node *TradeDate) tradedateOption {
	return func(m *TradeDateMutation) {
		m.oldValue = func(context.Context) (*TradeDate, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TradeDateMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TradeDateMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *TradeDateMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetStockID sets the "stock_id" field.
func (m *TradeDateMutation) SetStockID(i int) {
	m.stock = &i
}

// StockID returns the value of the "stock_id" field in the mutation.
func (m *TradeDateMutation) StockID() (r int, exists bool) {
	v := m.stock
	if v == nil {
		return
	}
	return *v, true
}

// OldStockID returns the old "stock_id" field's value of the TradeDate entity.
// If the TradeDate object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TradeDateMutation) OldStockID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldStockID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldStockID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStockID: %w", err)
	}
	return oldValue.StockID, nil
}

// ClearStockID clears the value of the "stock_id" field.
func (m *TradeDateMutation) ClearStockID() {
	m.stock = nil
	m.clearedFields[tradedate.FieldStockID] = struct{}{}
}

// StockIDCleared returns if the "stock_id" field was cleared in this mutation.
func (m *TradeDateMutation) StockIDCleared() bool {
	_, ok := m.clearedFields[tradedate.FieldStockID]
	return ok
}

// ResetStockID resets all changes to the "stock_id" field.
func (m *TradeDateMutation) ResetStockID() {
	m.stock = nil
	delete(m.clearedFields, tradedate.FieldStockID)
}

// SetTDate sets the "t_date" field.
func (m *TradeDateMutation) SetTDate(s string) {
	m.t_date = &s
}

// TDate returns the value of the "t_date" field in the mutation.
func (m *TradeDateMutation) TDate() (r string, exists bool) {
	v := m.t_date
	if v == nil {
		return
	}
	return *v, true
}

// OldTDate returns the old "t_date" field's value of the TradeDate entity.
// If the TradeDate object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TradeDateMutation) OldTDate(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldTDate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldTDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTDate: %w", err)
	}
	return oldValue.TDate, nil
}

// ResetTDate resets all changes to the "t_date" field.
func (m *TradeDateMutation) ResetTDate() {
	m.t_date = nil
}

// SetEndPrice sets the "end_price" field.
func (m *TradeDateMutation) SetEndPrice(f float64) {
	m.end_price = &f
	m.addend_price = nil
}

// EndPrice returns the value of the "end_price" field in the mutation.
func (m *TradeDateMutation) EndPrice() (r float64, exists bool) {
	v := m.end_price
	if v == nil {
		return
	}
	return *v, true
}

// OldEndPrice returns the old "end_price" field's value of the TradeDate entity.
// If the TradeDate object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TradeDateMutation) OldEndPrice(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldEndPrice is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldEndPrice requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEndPrice: %w", err)
	}
	return oldValue.EndPrice, nil
}

// AddEndPrice adds f to the "end_price" field.
func (m *TradeDateMutation) AddEndPrice(f float64) {
	if m.addend_price != nil {
		*m.addend_price += f
	} else {
		m.addend_price = &f
	}
}

// AddedEndPrice returns the value that was added to the "end_price" field in this mutation.
func (m *TradeDateMutation) AddedEndPrice() (r float64, exists bool) {
	v := m.addend_price
	if v == nil {
		return
	}
	return *v, true
}

// ResetEndPrice resets all changes to the "end_price" field.
func (m *TradeDateMutation) ResetEndPrice() {
	m.end_price = nil
	m.addend_price = nil
}

// SetCreateAt sets the "create_at" field.
func (m *TradeDateMutation) SetCreateAt(i int64) {
	m.create_at = &i
	m.addcreate_at = nil
}

// CreateAt returns the value of the "create_at" field in the mutation.
func (m *TradeDateMutation) CreateAt() (r int64, exists bool) {
	v := m.create_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateAt returns the old "create_at" field's value of the TradeDate entity.
// If the TradeDate object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TradeDateMutation) OldCreateAt(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreateAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreateAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateAt: %w", err)
	}
	return oldValue.CreateAt, nil
}

// AddCreateAt adds i to the "create_at" field.
func (m *TradeDateMutation) AddCreateAt(i int64) {
	if m.addcreate_at != nil {
		*m.addcreate_at += i
	} else {
		m.addcreate_at = &i
	}
}

// AddedCreateAt returns the value that was added to the "create_at" field in this mutation.
func (m *TradeDateMutation) AddedCreateAt() (r int64, exists bool) {
	v := m.addcreate_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreateAt resets all changes to the "create_at" field.
func (m *TradeDateMutation) ResetCreateAt() {
	m.create_at = nil
	m.addcreate_at = nil
}

// SetUpdateAt sets the "update_at" field.
func (m *TradeDateMutation) SetUpdateAt(i int64) {
	m.update_at = &i
	m.addupdate_at = nil
}

// UpdateAt returns the value of the "update_at" field in the mutation.
func (m *TradeDateMutation) UpdateAt() (r int64, exists bool) {
	v := m.update_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateAt returns the old "update_at" field's value of the TradeDate entity.
// If the TradeDate object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TradeDateMutation) OldUpdateAt(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdateAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdateAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateAt: %w", err)
	}
	return oldValue.UpdateAt, nil
}

// AddUpdateAt adds i to the "update_at" field.
func (m *TradeDateMutation) AddUpdateAt(i int64) {
	if m.addupdate_at != nil {
		*m.addupdate_at += i
	} else {
		m.addupdate_at = &i
	}
}

// AddedUpdateAt returns the value that was added to the "update_at" field in this mutation.
func (m *TradeDateMutation) AddedUpdateAt() (r int64, exists bool) {
	v := m.addupdate_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpdateAt resets all changes to the "update_at" field.
func (m *TradeDateMutation) ResetUpdateAt() {
	m.update_at = nil
	m.addupdate_at = nil
}

// SetXueqiuCommentCount sets the "xueqiu_comment_count" field.
func (m *TradeDateMutation) SetXueqiuCommentCount(i int64) {
	m.xueqiu_comment_count = &i
	m.addxueqiu_comment_count = nil
}

// XueqiuCommentCount returns the value of the "xueqiu_comment_count" field in the mutation.
func (m *TradeDateMutation) XueqiuCommentCount() (r int64, exists bool) {
	v := m.xueqiu_comment_count
	if v == nil {
		return
	}
	return *v, true
}

// OldXueqiuCommentCount returns the old "xueqiu_comment_count" field's value of the TradeDate entity.
// If the TradeDate object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TradeDateMutation) OldXueqiuCommentCount(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldXueqiuCommentCount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldXueqiuCommentCount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldXueqiuCommentCount: %w", err)
	}
	return oldValue.XueqiuCommentCount, nil
}

// AddXueqiuCommentCount adds i to the "xueqiu_comment_count" field.
func (m *TradeDateMutation) AddXueqiuCommentCount(i int64) {
	if m.addxueqiu_comment_count != nil {
		*m.addxueqiu_comment_count += i
	} else {
		m.addxueqiu_comment_count = &i
	}
}

// AddedXueqiuCommentCount returns the value that was added to the "xueqiu_comment_count" field in this mutation.
func (m *TradeDateMutation) AddedXueqiuCommentCount() (r int64, exists bool) {
	v := m.addxueqiu_comment_count
	if v == nil {
		return
	}
	return *v, true
}

// ResetXueqiuCommentCount resets all changes to the "xueqiu_comment_count" field.
func (m *TradeDateMutation) ResetXueqiuCommentCount() {
	m.xueqiu_comment_count = nil
	m.addxueqiu_comment_count = nil
}

// ClearStock clears the "stock" edge to the Stock entity.
func (m *TradeDateMutation) ClearStock() {
	m.clearedstock = true
}

// StockCleared reports if the "stock" edge to the Stock entity was cleared.
func (m *TradeDateMutation) StockCleared() bool {
	return m.StockIDCleared() || m.clearedstock
}

// StockIDs returns the "stock" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// StockID instead. It exists only for internal usage by the builders.
func (m *TradeDateMutation) StockIDs() (ids []int) {
	if id := m.stock; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetStock resets all changes to the "stock" edge.
func (m *TradeDateMutation) ResetStock() {
	m.stock = nil
	m.clearedstock = false
}

// Where appends a list predicates to the TradeDateMutation builder.
func (m *TradeDateMutation) Where(ps ...predicate.TradeDate) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *TradeDateMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (TradeDate).
func (m *TradeDateMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *TradeDateMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.stock != nil {
		fields = append(fields, tradedate.FieldStockID)
	}
	if m.t_date != nil {
		fields = append(fields, tradedate.FieldTDate)
	}
	if m.end_price != nil {
		fields = append(fields, tradedate.FieldEndPrice)
	}
	if m.create_at != nil {
		fields = append(fields, tradedate.FieldCreateAt)
	}
	if m.update_at != nil {
		fields = append(fields, tradedate.FieldUpdateAt)
	}
	if m.xueqiu_comment_count != nil {
		fields = append(fields, tradedate.FieldXueqiuCommentCount)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *TradeDateMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case tradedate.FieldStockID:
		return m.StockID()
	case tradedate.FieldTDate:
		return m.TDate()
	case tradedate.FieldEndPrice:
		return m.EndPrice()
	case tradedate.FieldCreateAt:
		return m.CreateAt()
	case tradedate.FieldUpdateAt:
		return m.UpdateAt()
	case tradedate.FieldXueqiuCommentCount:
		return m.XueqiuCommentCount()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *TradeDateMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case tradedate.FieldStockID:
		return m.OldStockID(ctx)
	case tradedate.FieldTDate:
		return m.OldTDate(ctx)
	case tradedate.FieldEndPrice:
		return m.OldEndPrice(ctx)
	case tradedate.FieldCreateAt:
		return m.OldCreateAt(ctx)
	case tradedate.FieldUpdateAt:
		return m.OldUpdateAt(ctx)
	case tradedate.FieldXueqiuCommentCount:
		return m.OldXueqiuCommentCount(ctx)
	}
	return nil, fmt.Errorf("unknown TradeDate field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TradeDateMutation) SetField(name string, value ent.Value) error {
	switch name {
	case tradedate.FieldStockID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStockID(v)
		return nil
	case tradedate.FieldTDate:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTDate(v)
		return nil
	case tradedate.FieldEndPrice:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEndPrice(v)
		return nil
	case tradedate.FieldCreateAt:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateAt(v)
		return nil
	case tradedate.FieldUpdateAt:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateAt(v)
		return nil
	case tradedate.FieldXueqiuCommentCount:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetXueqiuCommentCount(v)
		return nil
	}
	return fmt.Errorf("unknown TradeDate field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *TradeDateMutation) AddedFields() []string {
	var fields []string
	if m.addend_price != nil {
		fields = append(fields, tradedate.FieldEndPrice)
	}
	if m.addcreate_at != nil {
		fields = append(fields, tradedate.FieldCreateAt)
	}
	if m.addupdate_at != nil {
		fields = append(fields, tradedate.FieldUpdateAt)
	}
	if m.addxueqiu_comment_count != nil {
		fields = append(fields, tradedate.FieldXueqiuCommentCount)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *TradeDateMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case tradedate.FieldEndPrice:
		return m.AddedEndPrice()
	case tradedate.FieldCreateAt:
		return m.AddedCreateAt()
	case tradedate.FieldUpdateAt:
		return m.AddedUpdateAt()
	case tradedate.FieldXueqiuCommentCount:
		return m.AddedXueqiuCommentCount()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TradeDateMutation) AddField(name string, value ent.Value) error {
	switch name {
	case tradedate.FieldEndPrice:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddEndPrice(v)
		return nil
	case tradedate.FieldCreateAt:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreateAt(v)
		return nil
	case tradedate.FieldUpdateAt:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdateAt(v)
		return nil
	case tradedate.FieldXueqiuCommentCount:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddXueqiuCommentCount(v)
		return nil
	}
	return fmt.Errorf("unknown TradeDate numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *TradeDateMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(tradedate.FieldStockID) {
		fields = append(fields, tradedate.FieldStockID)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *TradeDateMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *TradeDateMutation) ClearField(name string) error {
	switch name {
	case tradedate.FieldStockID:
		m.ClearStockID()
		return nil
	}
	return fmt.Errorf("unknown TradeDate nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *TradeDateMutation) ResetField(name string) error {
	switch name {
	case tradedate.FieldStockID:
		m.ResetStockID()
		return nil
	case tradedate.FieldTDate:
		m.ResetTDate()
		return nil
	case tradedate.FieldEndPrice:
		m.ResetEndPrice()
		return nil
	case tradedate.FieldCreateAt:
		m.ResetCreateAt()
		return nil
	case tradedate.FieldUpdateAt:
		m.ResetUpdateAt()
		return nil
	case tradedate.FieldXueqiuCommentCount:
		m.ResetXueqiuCommentCount()
		return nil
	}
	return fmt.Errorf("unknown TradeDate field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *TradeDateMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.stock != nil {
		edges = append(edges, tradedate.EdgeStock)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *TradeDateMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case tradedate.EdgeStock:
		if id := m.stock; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *TradeDateMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *TradeDateMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *TradeDateMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedstock {
		edges = append(edges, tradedate.EdgeStock)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *TradeDateMutation) EdgeCleared(name string) bool {
	switch name {
	case tradedate.EdgeStock:
		return m.clearedstock
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *TradeDateMutation) ClearEdge(name string) error {
	switch name {
	case tradedate.EdgeStock:
		m.ClearStock()
		return nil
	}
	return fmt.Errorf("unknown TradeDate unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *TradeDateMutation) ResetEdge(name string) error {
	switch name {
	case tradedate.EdgeStock:
		m.ResetStock()
		return nil
	}
	return fmt.Errorf("unknown TradeDate edge %s", name)
}
