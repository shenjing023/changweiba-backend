// Code generated by ent, DO NOT EDIT.

package hot

import (
	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the hot type in the database.
	Label = "hot"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldSymbol holds the string denoting the symbol field in the database.
	FieldSymbol = "symbol"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldTDate holds the string denoting the t_date field in the database.
	FieldTDate = "t_date"
	// FieldOrder holds the string denoting the order field in the database.
	FieldOrder = "order"
	// FieldTag holds the string denoting the tag field in the database.
	FieldTag = "tag"
	// FieldBull holds the string denoting the bull field in the database.
	FieldBull = "bull"
	// FieldShort holds the string denoting the short field in the database.
	FieldShort = "short"
	// FieldAnalyse holds the string denoting the analyse field in the database.
	FieldAnalyse = "analyse"
	// Table holds the table name of the hot in the database.
	Table = "stock_hot"
)

// Columns holds all SQL columns for hot fields.
var Columns = []string{
	FieldID,
	FieldSymbol,
	FieldName,
	FieldTDate,
	FieldOrder,
	FieldTag,
	FieldBull,
	FieldShort,
	FieldAnalyse,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// SymbolValidator is a validator for the "symbol" field. It is called by the builders before save.
	SymbolValidator func(string) error
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// TDateValidator is a validator for the "t_date" field. It is called by the builders before save.
	TDateValidator func(string) error
	// DefaultOrder holds the default value on creation for the "order" field.
	DefaultOrder int
	// DefaultTag holds the default value on creation for the "tag" field.
	DefaultTag string
	// DefaultBull holds the default value on creation for the "bull" field.
	DefaultBull int
	// DefaultShort holds the default value on creation for the "short" field.
	DefaultShort string
	// ShortValidator is a validator for the "short" field. It is called by the builders before save.
	ShortValidator func(string) error
	// DefaultAnalyse holds the default value on creation for the "analyse" field.
	DefaultAnalyse string
	// IDValidator is a validator for the "id" field. It is called by the builders before save.
	IDValidator func(uint64) error
)

// OrderOption defines the ordering options for the Hot queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// BySymbol orders the results by the symbol field.
func BySymbol(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSymbol, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByTDate orders the results by the t_date field.
func ByTDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTDate, opts...).ToFunc()
}

// ByOrder orders the results by the order field.
func ByOrder(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOrder, opts...).ToFunc()
}

// ByTag orders the results by the tag field.
func ByTag(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTag, opts...).ToFunc()
}

// ByBull orders the results by the bull field.
func ByBull(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBull, opts...).ToFunc()
}

// ByShort orders the results by the short field.
func ByShort(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldShort, opts...).ToFunc()
}

// ByAnalyse orders the results by the analyse field.
func ByAnalyse(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAnalyse, opts...).ToFunc()
}
