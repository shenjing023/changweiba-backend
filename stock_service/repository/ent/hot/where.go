// Code generated by ent, DO NOT EDIT.

package hot

import (
	"stock_service/repository/ent/predicate"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id uint64) predicate.Hot {
	return predicate.Hot(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint64) predicate.Hot {
	return predicate.Hot(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint64) predicate.Hot {
	return predicate.Hot(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint64) predicate.Hot {
	return predicate.Hot(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint64) predicate.Hot {
	return predicate.Hot(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint64) predicate.Hot {
	return predicate.Hot(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint64) predicate.Hot {
	return predicate.Hot(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint64) predicate.Hot {
	return predicate.Hot(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint64) predicate.Hot {
	return predicate.Hot(sql.FieldLTE(FieldID, id))
}

// Symbol applies equality check predicate on the "symbol" field. It's identical to SymbolEQ.
func Symbol(v string) predicate.Hot {
	return predicate.Hot(sql.FieldEQ(FieldSymbol, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Hot {
	return predicate.Hot(sql.FieldEQ(FieldName, v))
}

// TDate applies equality check predicate on the "t_date" field. It's identical to TDateEQ.
func TDate(v string) predicate.Hot {
	return predicate.Hot(sql.FieldEQ(FieldTDate, v))
}

// Order applies equality check predicate on the "order" field. It's identical to OrderEQ.
func Order(v int) predicate.Hot {
	return predicate.Hot(sql.FieldEQ(FieldOrder, v))
}

// Tag applies equality check predicate on the "tag" field. It's identical to TagEQ.
func Tag(v string) predicate.Hot {
	return predicate.Hot(sql.FieldEQ(FieldTag, v))
}

// Bull applies equality check predicate on the "bull" field. It's identical to BullEQ.
func Bull(v int) predicate.Hot {
	return predicate.Hot(sql.FieldEQ(FieldBull, v))
}

// Short applies equality check predicate on the "short" field. It's identical to ShortEQ.
func Short(v string) predicate.Hot {
	return predicate.Hot(sql.FieldEQ(FieldShort, v))
}

// Analyse applies equality check predicate on the "analyse" field. It's identical to AnalyseEQ.
func Analyse(v string) predicate.Hot {
	return predicate.Hot(sql.FieldEQ(FieldAnalyse, v))
}

// SymbolEQ applies the EQ predicate on the "symbol" field.
func SymbolEQ(v string) predicate.Hot {
	return predicate.Hot(sql.FieldEQ(FieldSymbol, v))
}

// SymbolNEQ applies the NEQ predicate on the "symbol" field.
func SymbolNEQ(v string) predicate.Hot {
	return predicate.Hot(sql.FieldNEQ(FieldSymbol, v))
}

// SymbolIn applies the In predicate on the "symbol" field.
func SymbolIn(vs ...string) predicate.Hot {
	return predicate.Hot(sql.FieldIn(FieldSymbol, vs...))
}

// SymbolNotIn applies the NotIn predicate on the "symbol" field.
func SymbolNotIn(vs ...string) predicate.Hot {
	return predicate.Hot(sql.FieldNotIn(FieldSymbol, vs...))
}

// SymbolGT applies the GT predicate on the "symbol" field.
func SymbolGT(v string) predicate.Hot {
	return predicate.Hot(sql.FieldGT(FieldSymbol, v))
}

// SymbolGTE applies the GTE predicate on the "symbol" field.
func SymbolGTE(v string) predicate.Hot {
	return predicate.Hot(sql.FieldGTE(FieldSymbol, v))
}

// SymbolLT applies the LT predicate on the "symbol" field.
func SymbolLT(v string) predicate.Hot {
	return predicate.Hot(sql.FieldLT(FieldSymbol, v))
}

// SymbolLTE applies the LTE predicate on the "symbol" field.
func SymbolLTE(v string) predicate.Hot {
	return predicate.Hot(sql.FieldLTE(FieldSymbol, v))
}

// SymbolContains applies the Contains predicate on the "symbol" field.
func SymbolContains(v string) predicate.Hot {
	return predicate.Hot(sql.FieldContains(FieldSymbol, v))
}

// SymbolHasPrefix applies the HasPrefix predicate on the "symbol" field.
func SymbolHasPrefix(v string) predicate.Hot {
	return predicate.Hot(sql.FieldHasPrefix(FieldSymbol, v))
}

// SymbolHasSuffix applies the HasSuffix predicate on the "symbol" field.
func SymbolHasSuffix(v string) predicate.Hot {
	return predicate.Hot(sql.FieldHasSuffix(FieldSymbol, v))
}

// SymbolEqualFold applies the EqualFold predicate on the "symbol" field.
func SymbolEqualFold(v string) predicate.Hot {
	return predicate.Hot(sql.FieldEqualFold(FieldSymbol, v))
}

// SymbolContainsFold applies the ContainsFold predicate on the "symbol" field.
func SymbolContainsFold(v string) predicate.Hot {
	return predicate.Hot(sql.FieldContainsFold(FieldSymbol, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Hot {
	return predicate.Hot(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Hot {
	return predicate.Hot(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Hot {
	return predicate.Hot(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Hot {
	return predicate.Hot(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Hot {
	return predicate.Hot(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Hot {
	return predicate.Hot(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Hot {
	return predicate.Hot(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Hot {
	return predicate.Hot(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Hot {
	return predicate.Hot(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Hot {
	return predicate.Hot(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Hot {
	return predicate.Hot(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Hot {
	return predicate.Hot(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Hot {
	return predicate.Hot(sql.FieldContainsFold(FieldName, v))
}

// TDateEQ applies the EQ predicate on the "t_date" field.
func TDateEQ(v string) predicate.Hot {
	return predicate.Hot(sql.FieldEQ(FieldTDate, v))
}

// TDateNEQ applies the NEQ predicate on the "t_date" field.
func TDateNEQ(v string) predicate.Hot {
	return predicate.Hot(sql.FieldNEQ(FieldTDate, v))
}

// TDateIn applies the In predicate on the "t_date" field.
func TDateIn(vs ...string) predicate.Hot {
	return predicate.Hot(sql.FieldIn(FieldTDate, vs...))
}

// TDateNotIn applies the NotIn predicate on the "t_date" field.
func TDateNotIn(vs ...string) predicate.Hot {
	return predicate.Hot(sql.FieldNotIn(FieldTDate, vs...))
}

// TDateGT applies the GT predicate on the "t_date" field.
func TDateGT(v string) predicate.Hot {
	return predicate.Hot(sql.FieldGT(FieldTDate, v))
}

// TDateGTE applies the GTE predicate on the "t_date" field.
func TDateGTE(v string) predicate.Hot {
	return predicate.Hot(sql.FieldGTE(FieldTDate, v))
}

// TDateLT applies the LT predicate on the "t_date" field.
func TDateLT(v string) predicate.Hot {
	return predicate.Hot(sql.FieldLT(FieldTDate, v))
}

// TDateLTE applies the LTE predicate on the "t_date" field.
func TDateLTE(v string) predicate.Hot {
	return predicate.Hot(sql.FieldLTE(FieldTDate, v))
}

// TDateContains applies the Contains predicate on the "t_date" field.
func TDateContains(v string) predicate.Hot {
	return predicate.Hot(sql.FieldContains(FieldTDate, v))
}

// TDateHasPrefix applies the HasPrefix predicate on the "t_date" field.
func TDateHasPrefix(v string) predicate.Hot {
	return predicate.Hot(sql.FieldHasPrefix(FieldTDate, v))
}

// TDateHasSuffix applies the HasSuffix predicate on the "t_date" field.
func TDateHasSuffix(v string) predicate.Hot {
	return predicate.Hot(sql.FieldHasSuffix(FieldTDate, v))
}

// TDateEqualFold applies the EqualFold predicate on the "t_date" field.
func TDateEqualFold(v string) predicate.Hot {
	return predicate.Hot(sql.FieldEqualFold(FieldTDate, v))
}

// TDateContainsFold applies the ContainsFold predicate on the "t_date" field.
func TDateContainsFold(v string) predicate.Hot {
	return predicate.Hot(sql.FieldContainsFold(FieldTDate, v))
}

// OrderEQ applies the EQ predicate on the "order" field.
func OrderEQ(v int) predicate.Hot {
	return predicate.Hot(sql.FieldEQ(FieldOrder, v))
}

// OrderNEQ applies the NEQ predicate on the "order" field.
func OrderNEQ(v int) predicate.Hot {
	return predicate.Hot(sql.FieldNEQ(FieldOrder, v))
}

// OrderIn applies the In predicate on the "order" field.
func OrderIn(vs ...int) predicate.Hot {
	return predicate.Hot(sql.FieldIn(FieldOrder, vs...))
}

// OrderNotIn applies the NotIn predicate on the "order" field.
func OrderNotIn(vs ...int) predicate.Hot {
	return predicate.Hot(sql.FieldNotIn(FieldOrder, vs...))
}

// OrderGT applies the GT predicate on the "order" field.
func OrderGT(v int) predicate.Hot {
	return predicate.Hot(sql.FieldGT(FieldOrder, v))
}

// OrderGTE applies the GTE predicate on the "order" field.
func OrderGTE(v int) predicate.Hot {
	return predicate.Hot(sql.FieldGTE(FieldOrder, v))
}

// OrderLT applies the LT predicate on the "order" field.
func OrderLT(v int) predicate.Hot {
	return predicate.Hot(sql.FieldLT(FieldOrder, v))
}

// OrderLTE applies the LTE predicate on the "order" field.
func OrderLTE(v int) predicate.Hot {
	return predicate.Hot(sql.FieldLTE(FieldOrder, v))
}

// TagEQ applies the EQ predicate on the "tag" field.
func TagEQ(v string) predicate.Hot {
	return predicate.Hot(sql.FieldEQ(FieldTag, v))
}

// TagNEQ applies the NEQ predicate on the "tag" field.
func TagNEQ(v string) predicate.Hot {
	return predicate.Hot(sql.FieldNEQ(FieldTag, v))
}

// TagIn applies the In predicate on the "tag" field.
func TagIn(vs ...string) predicate.Hot {
	return predicate.Hot(sql.FieldIn(FieldTag, vs...))
}

// TagNotIn applies the NotIn predicate on the "tag" field.
func TagNotIn(vs ...string) predicate.Hot {
	return predicate.Hot(sql.FieldNotIn(FieldTag, vs...))
}

// TagGT applies the GT predicate on the "tag" field.
func TagGT(v string) predicate.Hot {
	return predicate.Hot(sql.FieldGT(FieldTag, v))
}

// TagGTE applies the GTE predicate on the "tag" field.
func TagGTE(v string) predicate.Hot {
	return predicate.Hot(sql.FieldGTE(FieldTag, v))
}

// TagLT applies the LT predicate on the "tag" field.
func TagLT(v string) predicate.Hot {
	return predicate.Hot(sql.FieldLT(FieldTag, v))
}

// TagLTE applies the LTE predicate on the "tag" field.
func TagLTE(v string) predicate.Hot {
	return predicate.Hot(sql.FieldLTE(FieldTag, v))
}

// TagContains applies the Contains predicate on the "tag" field.
func TagContains(v string) predicate.Hot {
	return predicate.Hot(sql.FieldContains(FieldTag, v))
}

// TagHasPrefix applies the HasPrefix predicate on the "tag" field.
func TagHasPrefix(v string) predicate.Hot {
	return predicate.Hot(sql.FieldHasPrefix(FieldTag, v))
}

// TagHasSuffix applies the HasSuffix predicate on the "tag" field.
func TagHasSuffix(v string) predicate.Hot {
	return predicate.Hot(sql.FieldHasSuffix(FieldTag, v))
}

// TagEqualFold applies the EqualFold predicate on the "tag" field.
func TagEqualFold(v string) predicate.Hot {
	return predicate.Hot(sql.FieldEqualFold(FieldTag, v))
}

// TagContainsFold applies the ContainsFold predicate on the "tag" field.
func TagContainsFold(v string) predicate.Hot {
	return predicate.Hot(sql.FieldContainsFold(FieldTag, v))
}

// BullEQ applies the EQ predicate on the "bull" field.
func BullEQ(v int) predicate.Hot {
	return predicate.Hot(sql.FieldEQ(FieldBull, v))
}

// BullNEQ applies the NEQ predicate on the "bull" field.
func BullNEQ(v int) predicate.Hot {
	return predicate.Hot(sql.FieldNEQ(FieldBull, v))
}

// BullIn applies the In predicate on the "bull" field.
func BullIn(vs ...int) predicate.Hot {
	return predicate.Hot(sql.FieldIn(FieldBull, vs...))
}

// BullNotIn applies the NotIn predicate on the "bull" field.
func BullNotIn(vs ...int) predicate.Hot {
	return predicate.Hot(sql.FieldNotIn(FieldBull, vs...))
}

// BullGT applies the GT predicate on the "bull" field.
func BullGT(v int) predicate.Hot {
	return predicate.Hot(sql.FieldGT(FieldBull, v))
}

// BullGTE applies the GTE predicate on the "bull" field.
func BullGTE(v int) predicate.Hot {
	return predicate.Hot(sql.FieldGTE(FieldBull, v))
}

// BullLT applies the LT predicate on the "bull" field.
func BullLT(v int) predicate.Hot {
	return predicate.Hot(sql.FieldLT(FieldBull, v))
}

// BullLTE applies the LTE predicate on the "bull" field.
func BullLTE(v int) predicate.Hot {
	return predicate.Hot(sql.FieldLTE(FieldBull, v))
}

// ShortEQ applies the EQ predicate on the "short" field.
func ShortEQ(v string) predicate.Hot {
	return predicate.Hot(sql.FieldEQ(FieldShort, v))
}

// ShortNEQ applies the NEQ predicate on the "short" field.
func ShortNEQ(v string) predicate.Hot {
	return predicate.Hot(sql.FieldNEQ(FieldShort, v))
}

// ShortIn applies the In predicate on the "short" field.
func ShortIn(vs ...string) predicate.Hot {
	return predicate.Hot(sql.FieldIn(FieldShort, vs...))
}

// ShortNotIn applies the NotIn predicate on the "short" field.
func ShortNotIn(vs ...string) predicate.Hot {
	return predicate.Hot(sql.FieldNotIn(FieldShort, vs...))
}

// ShortGT applies the GT predicate on the "short" field.
func ShortGT(v string) predicate.Hot {
	return predicate.Hot(sql.FieldGT(FieldShort, v))
}

// ShortGTE applies the GTE predicate on the "short" field.
func ShortGTE(v string) predicate.Hot {
	return predicate.Hot(sql.FieldGTE(FieldShort, v))
}

// ShortLT applies the LT predicate on the "short" field.
func ShortLT(v string) predicate.Hot {
	return predicate.Hot(sql.FieldLT(FieldShort, v))
}

// ShortLTE applies the LTE predicate on the "short" field.
func ShortLTE(v string) predicate.Hot {
	return predicate.Hot(sql.FieldLTE(FieldShort, v))
}

// ShortContains applies the Contains predicate on the "short" field.
func ShortContains(v string) predicate.Hot {
	return predicate.Hot(sql.FieldContains(FieldShort, v))
}

// ShortHasPrefix applies the HasPrefix predicate on the "short" field.
func ShortHasPrefix(v string) predicate.Hot {
	return predicate.Hot(sql.FieldHasPrefix(FieldShort, v))
}

// ShortHasSuffix applies the HasSuffix predicate on the "short" field.
func ShortHasSuffix(v string) predicate.Hot {
	return predicate.Hot(sql.FieldHasSuffix(FieldShort, v))
}

// ShortEqualFold applies the EqualFold predicate on the "short" field.
func ShortEqualFold(v string) predicate.Hot {
	return predicate.Hot(sql.FieldEqualFold(FieldShort, v))
}

// ShortContainsFold applies the ContainsFold predicate on the "short" field.
func ShortContainsFold(v string) predicate.Hot {
	return predicate.Hot(sql.FieldContainsFold(FieldShort, v))
}

// AnalyseEQ applies the EQ predicate on the "analyse" field.
func AnalyseEQ(v string) predicate.Hot {
	return predicate.Hot(sql.FieldEQ(FieldAnalyse, v))
}

// AnalyseNEQ applies the NEQ predicate on the "analyse" field.
func AnalyseNEQ(v string) predicate.Hot {
	return predicate.Hot(sql.FieldNEQ(FieldAnalyse, v))
}

// AnalyseIn applies the In predicate on the "analyse" field.
func AnalyseIn(vs ...string) predicate.Hot {
	return predicate.Hot(sql.FieldIn(FieldAnalyse, vs...))
}

// AnalyseNotIn applies the NotIn predicate on the "analyse" field.
func AnalyseNotIn(vs ...string) predicate.Hot {
	return predicate.Hot(sql.FieldNotIn(FieldAnalyse, vs...))
}

// AnalyseGT applies the GT predicate on the "analyse" field.
func AnalyseGT(v string) predicate.Hot {
	return predicate.Hot(sql.FieldGT(FieldAnalyse, v))
}

// AnalyseGTE applies the GTE predicate on the "analyse" field.
func AnalyseGTE(v string) predicate.Hot {
	return predicate.Hot(sql.FieldGTE(FieldAnalyse, v))
}

// AnalyseLT applies the LT predicate on the "analyse" field.
func AnalyseLT(v string) predicate.Hot {
	return predicate.Hot(sql.FieldLT(FieldAnalyse, v))
}

// AnalyseLTE applies the LTE predicate on the "analyse" field.
func AnalyseLTE(v string) predicate.Hot {
	return predicate.Hot(sql.FieldLTE(FieldAnalyse, v))
}

// AnalyseContains applies the Contains predicate on the "analyse" field.
func AnalyseContains(v string) predicate.Hot {
	return predicate.Hot(sql.FieldContains(FieldAnalyse, v))
}

// AnalyseHasPrefix applies the HasPrefix predicate on the "analyse" field.
func AnalyseHasPrefix(v string) predicate.Hot {
	return predicate.Hot(sql.FieldHasPrefix(FieldAnalyse, v))
}

// AnalyseHasSuffix applies the HasSuffix predicate on the "analyse" field.
func AnalyseHasSuffix(v string) predicate.Hot {
	return predicate.Hot(sql.FieldHasSuffix(FieldAnalyse, v))
}

// AnalyseEqualFold applies the EqualFold predicate on the "analyse" field.
func AnalyseEqualFold(v string) predicate.Hot {
	return predicate.Hot(sql.FieldEqualFold(FieldAnalyse, v))
}

// AnalyseContainsFold applies the ContainsFold predicate on the "analyse" field.
func AnalyseContainsFold(v string) predicate.Hot {
	return predicate.Hot(sql.FieldContainsFold(FieldAnalyse, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Hot) predicate.Hot {
	return predicate.Hot(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Hot) predicate.Hot {
	return predicate.Hot(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Hot) predicate.Hot {
	return predicate.Hot(func(s *sql.Selector) {
		p(s.Not())
	})
}
