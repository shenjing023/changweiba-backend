// Code generated by ent, DO NOT EDIT.

package stock

import (
	"stock_service/repository/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id uint64) predicate.Stock {
	return predicate.Stock(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint64) predicate.Stock {
	return predicate.Stock(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint64) predicate.Stock {
	return predicate.Stock(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint64) predicate.Stock {
	return predicate.Stock(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint64) predicate.Stock {
	return predicate.Stock(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint64) predicate.Stock {
	return predicate.Stock(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint64) predicate.Stock {
	return predicate.Stock(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint64) predicate.Stock {
	return predicate.Stock(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint64) predicate.Stock {
	return predicate.Stock(sql.FieldLTE(FieldID, id))
}

// Symbol applies equality check predicate on the "symbol" field. It's identical to SymbolEQ.
func Symbol(v string) predicate.Stock {
	return predicate.Stock(sql.FieldEQ(FieldSymbol, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Stock {
	return predicate.Stock(sql.FieldEQ(FieldName, v))
}

// Bull applies equality check predicate on the "bull" field. It's identical to BullEQ.
func Bull(v int) predicate.Stock {
	return predicate.Stock(sql.FieldEQ(FieldBull, v))
}

// SymbolEQ applies the EQ predicate on the "symbol" field.
func SymbolEQ(v string) predicate.Stock {
	return predicate.Stock(sql.FieldEQ(FieldSymbol, v))
}

// SymbolNEQ applies the NEQ predicate on the "symbol" field.
func SymbolNEQ(v string) predicate.Stock {
	return predicate.Stock(sql.FieldNEQ(FieldSymbol, v))
}

// SymbolIn applies the In predicate on the "symbol" field.
func SymbolIn(vs ...string) predicate.Stock {
	return predicate.Stock(sql.FieldIn(FieldSymbol, vs...))
}

// SymbolNotIn applies the NotIn predicate on the "symbol" field.
func SymbolNotIn(vs ...string) predicate.Stock {
	return predicate.Stock(sql.FieldNotIn(FieldSymbol, vs...))
}

// SymbolGT applies the GT predicate on the "symbol" field.
func SymbolGT(v string) predicate.Stock {
	return predicate.Stock(sql.FieldGT(FieldSymbol, v))
}

// SymbolGTE applies the GTE predicate on the "symbol" field.
func SymbolGTE(v string) predicate.Stock {
	return predicate.Stock(sql.FieldGTE(FieldSymbol, v))
}

// SymbolLT applies the LT predicate on the "symbol" field.
func SymbolLT(v string) predicate.Stock {
	return predicate.Stock(sql.FieldLT(FieldSymbol, v))
}

// SymbolLTE applies the LTE predicate on the "symbol" field.
func SymbolLTE(v string) predicate.Stock {
	return predicate.Stock(sql.FieldLTE(FieldSymbol, v))
}

// SymbolContains applies the Contains predicate on the "symbol" field.
func SymbolContains(v string) predicate.Stock {
	return predicate.Stock(sql.FieldContains(FieldSymbol, v))
}

// SymbolHasPrefix applies the HasPrefix predicate on the "symbol" field.
func SymbolHasPrefix(v string) predicate.Stock {
	return predicate.Stock(sql.FieldHasPrefix(FieldSymbol, v))
}

// SymbolHasSuffix applies the HasSuffix predicate on the "symbol" field.
func SymbolHasSuffix(v string) predicate.Stock {
	return predicate.Stock(sql.FieldHasSuffix(FieldSymbol, v))
}

// SymbolEqualFold applies the EqualFold predicate on the "symbol" field.
func SymbolEqualFold(v string) predicate.Stock {
	return predicate.Stock(sql.FieldEqualFold(FieldSymbol, v))
}

// SymbolContainsFold applies the ContainsFold predicate on the "symbol" field.
func SymbolContainsFold(v string) predicate.Stock {
	return predicate.Stock(sql.FieldContainsFold(FieldSymbol, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Stock {
	return predicate.Stock(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Stock {
	return predicate.Stock(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Stock {
	return predicate.Stock(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Stock {
	return predicate.Stock(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Stock {
	return predicate.Stock(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Stock {
	return predicate.Stock(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Stock {
	return predicate.Stock(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Stock {
	return predicate.Stock(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Stock {
	return predicate.Stock(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Stock {
	return predicate.Stock(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Stock {
	return predicate.Stock(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Stock {
	return predicate.Stock(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Stock {
	return predicate.Stock(sql.FieldContainsFold(FieldName, v))
}

// BullEQ applies the EQ predicate on the "bull" field.
func BullEQ(v int) predicate.Stock {
	return predicate.Stock(sql.FieldEQ(FieldBull, v))
}

// BullNEQ applies the NEQ predicate on the "bull" field.
func BullNEQ(v int) predicate.Stock {
	return predicate.Stock(sql.FieldNEQ(FieldBull, v))
}

// BullIn applies the In predicate on the "bull" field.
func BullIn(vs ...int) predicate.Stock {
	return predicate.Stock(sql.FieldIn(FieldBull, vs...))
}

// BullNotIn applies the NotIn predicate on the "bull" field.
func BullNotIn(vs ...int) predicate.Stock {
	return predicate.Stock(sql.FieldNotIn(FieldBull, vs...))
}

// BullGT applies the GT predicate on the "bull" field.
func BullGT(v int) predicate.Stock {
	return predicate.Stock(sql.FieldGT(FieldBull, v))
}

// BullGTE applies the GTE predicate on the "bull" field.
func BullGTE(v int) predicate.Stock {
	return predicate.Stock(sql.FieldGTE(FieldBull, v))
}

// BullLT applies the LT predicate on the "bull" field.
func BullLT(v int) predicate.Stock {
	return predicate.Stock(sql.FieldLT(FieldBull, v))
}

// BullLTE applies the LTE predicate on the "bull" field.
func BullLTE(v int) predicate.Stock {
	return predicate.Stock(sql.FieldLTE(FieldBull, v))
}

// HasTrades applies the HasEdge predicate on the "trades" edge.
func HasTrades() predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, TradesTable, TradesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTradesWith applies the HasEdge predicate on the "trades" edge with a given conditions (other predicates).
func HasTradesWith(preds ...predicate.TradeDate) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		step := newTradesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSubscribers applies the HasEdge predicate on the "subscribers" edge.
func HasSubscribers() predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, SubscribersTable, SubscribersPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSubscribersWith applies the HasEdge predicate on the "subscribers" edge with a given conditions (other predicates).
func HasSubscribersWith(preds ...predicate.User) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		step := newSubscribersStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Stock) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Stock) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Stock) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		p(s.Not())
	})
}
