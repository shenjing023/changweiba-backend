// Code generated by entc, DO NOT EDIT.

package stock

const (
	// Label holds the string label denoting the stock type in the database.
	Label = "stock"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldSymbol holds the string denoting the symbol field in the database.
	FieldSymbol = "symbol"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// EdgeTrades holds the string denoting the trades edge name in mutations.
	EdgeTrades = "trades"
	// EdgeSubscribers holds the string denoting the subscribers edge name in mutations.
	EdgeSubscribers = "subscribers"
	// Table holds the table name of the stock in the database.
	Table = "stock"
	// TradesTable is the table that holds the trades relation/edge.
	TradesTable = "trade_date"
	// TradesInverseTable is the table name for the TradeDate entity.
	// It exists in this package in order to avoid circular dependency with the "tradedate" package.
	TradesInverseTable = "trade_date"
	// TradesColumn is the table column denoting the trades relation/edge.
	TradesColumn = "stock_id"
	// SubscribersTable is the table that holds the subscribers relation/edge. The primary key declared below.
	SubscribersTable = "stock_subscribers"
	// SubscribersInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	SubscribersInverseTable = "user"
)

// Columns holds all SQL columns for stock fields.
var Columns = []string{
	FieldID,
	FieldSymbol,
	FieldName,
}

var (
	// SubscribersPrimaryKey and SubscribersColumn2 are the table columns denoting the
	// primary key for the subscribers relation (M2M).
	SubscribersPrimaryKey = []string{"stock_id", "user_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// SymbolValidator is a validator for the "symbol" field. It is called by the builders before save.
	SymbolValidator func(string) error
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// IDValidator is a validator for the "id" field. It is called by the builders before save.
	IDValidator func(uint64) error
)
