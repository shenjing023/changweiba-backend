// Code generated by ent, DO NOT EDIT.

package stock

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the stock type in the database.
	Label = "stock"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldSymbol holds the string denoting the symbol field in the database.
	FieldSymbol = "symbol"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldBull holds the string denoting the bull field in the database.
	FieldBull = "bull"
	// FieldLastSubscribeAt holds the string denoting the last_subscribe_at field in the database.
	FieldLastSubscribeAt = "last_subscribe_at"
	// EdgeTrades holds the string denoting the trades edge name in mutations.
	EdgeTrades = "trades"
	// EdgeSubscribers holds the string denoting the subscribers edge name in mutations.
	EdgeSubscribers = "subscribers"
	// Table holds the table name of the stock in the database.
	Table = "stock"
	// TradesTable is the table that holds the trades relation/edge.
	TradesTable = "trade_date"
	// TradesInverseTable is the table name for the TradeDate entity.
	// It exists in this package in order to avoid circular dependency with the "tradedate" package.
	TradesInverseTable = "trade_date"
	// TradesColumn is the table column denoting the trades relation/edge.
	TradesColumn = "stock_id"
	// SubscribersTable is the table that holds the subscribers relation/edge. The primary key declared below.
	SubscribersTable = "stock_subscribers"
	// SubscribersInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	SubscribersInverseTable = "user"
)

// Columns holds all SQL columns for stock fields.
var Columns = []string{
	FieldID,
	FieldSymbol,
	FieldName,
	FieldBull,
	FieldLastSubscribeAt,
}

var (
	// SubscribersPrimaryKey and SubscribersColumn2 are the table columns denoting the
	// primary key for the subscribers relation (M2M).
	SubscribersPrimaryKey = []string{"stock_id", "user_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// SymbolValidator is a validator for the "symbol" field. It is called by the builders before save.
	SymbolValidator func(string) error
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// DefaultBull holds the default value on creation for the "bull" field.
	DefaultBull int
	// DefaultLastSubscribeAt holds the default value on creation for the "last_subscribe_at" field.
	DefaultLastSubscribeAt func() time.Time
	// IDValidator is a validator for the "id" field. It is called by the builders before save.
	IDValidator func(uint64) error
)

// OrderOption defines the ordering options for the Stock queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// BySymbol orders the results by the symbol field.
func BySymbol(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSymbol, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByBull orders the results by the bull field.
func ByBull(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBull, opts...).ToFunc()
}

// ByLastSubscribeAt orders the results by the last_subscribe_at field.
func ByLastSubscribeAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastSubscribeAt, opts...).ToFunc()
}

// ByTradesCount orders the results by trades count.
func ByTradesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newTradesStep(), opts...)
	}
}

// ByTrades orders the results by trades terms.
func ByTrades(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTradesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// BySubscribersCount orders the results by subscribers count.
func BySubscribersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newSubscribersStep(), opts...)
	}
}

// BySubscribers orders the results by subscribers terms.
func BySubscribers(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSubscribersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newTradesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TradesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, TradesTable, TradesColumn),
	)
}
func newSubscribersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SubscribersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, SubscribersTable, SubscribersPrimaryKey...),
	)
}
