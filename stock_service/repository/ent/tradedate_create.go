// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"stock_service/repository/ent/stock"
	"stock_service/repository/ent/tradedate"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TradeDateCreate is the builder for creating a TradeDate entity.
type TradeDateCreate struct {
	config
	mutation *TradeDateMutation
	hooks    []Hook
}

// SetStockID sets the "stock_id" field.
func (tdc *TradeDateCreate) SetStockID(u uint64) *TradeDateCreate {
	tdc.mutation.SetStockID(u)
	return tdc
}

// SetNillableStockID sets the "stock_id" field if the given value is not nil.
func (tdc *TradeDateCreate) SetNillableStockID(u *uint64) *TradeDateCreate {
	if u != nil {
		tdc.SetStockID(*u)
	}
	return tdc
}

// SetTDate sets the "t_date" field.
func (tdc *TradeDateCreate) SetTDate(s string) *TradeDateCreate {
	tdc.mutation.SetTDate(s)
	return tdc
}

// SetEndPrice sets the "end_price" field.
func (tdc *TradeDateCreate) SetEndPrice(f float64) *TradeDateCreate {
	tdc.mutation.SetEndPrice(f)
	return tdc
}

// SetVolumn sets the "volumn" field.
func (tdc *TradeDateCreate) SetVolumn(i int64) *TradeDateCreate {
	tdc.mutation.SetVolumn(i)
	return tdc
}

// SetNillableVolumn sets the "volumn" field if the given value is not nil.
func (tdc *TradeDateCreate) SetNillableVolumn(i *int64) *TradeDateCreate {
	if i != nil {
		tdc.SetVolumn(*i)
	}
	return tdc
}

// SetCreateAt sets the "create_at" field.
func (tdc *TradeDateCreate) SetCreateAt(i int64) *TradeDateCreate {
	tdc.mutation.SetCreateAt(i)
	return tdc
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (tdc *TradeDateCreate) SetNillableCreateAt(i *int64) *TradeDateCreate {
	if i != nil {
		tdc.SetCreateAt(*i)
	}
	return tdc
}

// SetUpdateAt sets the "update_at" field.
func (tdc *TradeDateCreate) SetUpdateAt(i int64) *TradeDateCreate {
	tdc.mutation.SetUpdateAt(i)
	return tdc
}

// SetNillableUpdateAt sets the "update_at" field if the given value is not nil.
func (tdc *TradeDateCreate) SetNillableUpdateAt(i *int64) *TradeDateCreate {
	if i != nil {
		tdc.SetUpdateAt(*i)
	}
	return tdc
}

// SetXueqiuCommentCount sets the "xueqiu_comment_count" field.
func (tdc *TradeDateCreate) SetXueqiuCommentCount(i int64) *TradeDateCreate {
	tdc.mutation.SetXueqiuCommentCount(i)
	return tdc
}

// SetNillableXueqiuCommentCount sets the "xueqiu_comment_count" field if the given value is not nil.
func (tdc *TradeDateCreate) SetNillableXueqiuCommentCount(i *int64) *TradeDateCreate {
	if i != nil {
		tdc.SetXueqiuCommentCount(*i)
	}
	return tdc
}

// SetID sets the "id" field.
func (tdc *TradeDateCreate) SetID(u uint64) *TradeDateCreate {
	tdc.mutation.SetID(u)
	return tdc
}

// SetStock sets the "stock" edge to the Stock entity.
func (tdc *TradeDateCreate) SetStock(s *Stock) *TradeDateCreate {
	return tdc.SetStockID(s.ID)
}

// Mutation returns the TradeDateMutation object of the builder.
func (tdc *TradeDateCreate) Mutation() *TradeDateMutation {
	return tdc.mutation
}

// Save creates the TradeDate in the database.
func (tdc *TradeDateCreate) Save(ctx context.Context) (*TradeDate, error) {
	var (
		err  error
		node *TradeDate
	)
	tdc.defaults()
	if len(tdc.hooks) == 0 {
		if err = tdc.check(); err != nil {
			return nil, err
		}
		node, err = tdc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TradeDateMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = tdc.check(); err != nil {
				return nil, err
			}
			tdc.mutation = mutation
			if node, err = tdc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(tdc.hooks) - 1; i >= 0; i-- {
			if tdc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = tdc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tdc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (tdc *TradeDateCreate) SaveX(ctx context.Context) *TradeDate {
	v, err := tdc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tdc *TradeDateCreate) Exec(ctx context.Context) error {
	_, err := tdc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tdc *TradeDateCreate) ExecX(ctx context.Context) {
	if err := tdc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tdc *TradeDateCreate) defaults() {
	if _, ok := tdc.mutation.Volumn(); !ok {
		v := tradedate.DefaultVolumn
		tdc.mutation.SetVolumn(v)
	}
	if _, ok := tdc.mutation.CreateAt(); !ok {
		v := tradedate.DefaultCreateAt
		tdc.mutation.SetCreateAt(v)
	}
	if _, ok := tdc.mutation.UpdateAt(); !ok {
		v := tradedate.DefaultUpdateAt
		tdc.mutation.SetUpdateAt(v)
	}
	if _, ok := tdc.mutation.XueqiuCommentCount(); !ok {
		v := tradedate.DefaultXueqiuCommentCount
		tdc.mutation.SetXueqiuCommentCount(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tdc *TradeDateCreate) check() error {
	if v, ok := tdc.mutation.StockID(); ok {
		if err := tradedate.StockIDValidator(v); err != nil {
			return &ValidationError{Name: "stock_id", err: fmt.Errorf(`ent: validator failed for field "stock_id": %w`, err)}
		}
	}
	if _, ok := tdc.mutation.TDate(); !ok {
		return &ValidationError{Name: "t_date", err: errors.New(`ent: missing required field "t_date"`)}
	}
	if v, ok := tdc.mutation.TDate(); ok {
		if err := tradedate.TDateValidator(v); err != nil {
			return &ValidationError{Name: "t_date", err: fmt.Errorf(`ent: validator failed for field "t_date": %w`, err)}
		}
	}
	if _, ok := tdc.mutation.EndPrice(); !ok {
		return &ValidationError{Name: "end_price", err: errors.New(`ent: missing required field "end_price"`)}
	}
	if _, ok := tdc.mutation.Volumn(); !ok {
		return &ValidationError{Name: "volumn", err: errors.New(`ent: missing required field "volumn"`)}
	}
	if v, ok := tdc.mutation.Volumn(); ok {
		if err := tradedate.VolumnValidator(v); err != nil {
			return &ValidationError{Name: "volumn", err: fmt.Errorf(`ent: validator failed for field "volumn": %w`, err)}
		}
	}
	if _, ok := tdc.mutation.CreateAt(); !ok {
		return &ValidationError{Name: "create_at", err: errors.New(`ent: missing required field "create_at"`)}
	}
	if v, ok := tdc.mutation.CreateAt(); ok {
		if err := tradedate.CreateAtValidator(v); err != nil {
			return &ValidationError{Name: "create_at", err: fmt.Errorf(`ent: validator failed for field "create_at": %w`, err)}
		}
	}
	if _, ok := tdc.mutation.UpdateAt(); !ok {
		return &ValidationError{Name: "update_at", err: errors.New(`ent: missing required field "update_at"`)}
	}
	if v, ok := tdc.mutation.UpdateAt(); ok {
		if err := tradedate.UpdateAtValidator(v); err != nil {
			return &ValidationError{Name: "update_at", err: fmt.Errorf(`ent: validator failed for field "update_at": %w`, err)}
		}
	}
	if _, ok := tdc.mutation.XueqiuCommentCount(); !ok {
		return &ValidationError{Name: "xueqiu_comment_count", err: errors.New(`ent: missing required field "xueqiu_comment_count"`)}
	}
	if v, ok := tdc.mutation.XueqiuCommentCount(); ok {
		if err := tradedate.XueqiuCommentCountValidator(v); err != nil {
			return &ValidationError{Name: "xueqiu_comment_count", err: fmt.Errorf(`ent: validator failed for field "xueqiu_comment_count": %w`, err)}
		}
	}
	if v, ok := tdc.mutation.ID(); ok {
		if err := tradedate.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "id": %w`, err)}
		}
	}
	return nil
}

func (tdc *TradeDateCreate) sqlSave(ctx context.Context) (*TradeDate, error) {
	_node, _spec := tdc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tdc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint64(id)
	}
	return _node, nil
}

func (tdc *TradeDateCreate) createSpec() (*TradeDate, *sqlgraph.CreateSpec) {
	var (
		_node = &TradeDate{config: tdc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: tradedate.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: tradedate.FieldID,
			},
		}
	)
	if id, ok := tdc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := tdc.mutation.TDate(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tradedate.FieldTDate,
		})
		_node.TDate = value
	}
	if value, ok := tdc.mutation.EndPrice(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: tradedate.FieldEndPrice,
		})
		_node.EndPrice = value
	}
	if value, ok := tdc.mutation.Volumn(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: tradedate.FieldVolumn,
		})
		_node.Volumn = value
	}
	if value, ok := tdc.mutation.CreateAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: tradedate.FieldCreateAt,
		})
		_node.CreateAt = value
	}
	if value, ok := tdc.mutation.UpdateAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: tradedate.FieldUpdateAt,
		})
		_node.UpdateAt = value
	}
	if value, ok := tdc.mutation.XueqiuCommentCount(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: tradedate.FieldXueqiuCommentCount,
		})
		_node.XueqiuCommentCount = value
	}
	if nodes := tdc.mutation.StockIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tradedate.StockTable,
			Columns: []string{tradedate.StockColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: stock.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.StockID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// TradeDateCreateBulk is the builder for creating many TradeDate entities in bulk.
type TradeDateCreateBulk struct {
	config
	builders []*TradeDateCreate
}

// Save creates the TradeDate entities in the database.
func (tdcb *TradeDateCreateBulk) Save(ctx context.Context) ([]*TradeDate, error) {
	specs := make([]*sqlgraph.CreateSpec, len(tdcb.builders))
	nodes := make([]*TradeDate, len(tdcb.builders))
	mutators := make([]Mutator, len(tdcb.builders))
	for i := range tdcb.builders {
		func(i int, root context.Context) {
			builder := tdcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TradeDateMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tdcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tdcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tdcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tdcb *TradeDateCreateBulk) SaveX(ctx context.Context) []*TradeDate {
	v, err := tdcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tdcb *TradeDateCreateBulk) Exec(ctx context.Context) error {
	_, err := tdcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tdcb *TradeDateCreateBulk) ExecX(ctx context.Context) {
	if err := tdcb.Exec(ctx); err != nil {
		panic(err)
	}
}
