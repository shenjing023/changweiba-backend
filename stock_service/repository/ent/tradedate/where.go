// Code generated by entc, DO NOT EDIT.

package tradedate

import (
	"stock_service/repository/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id uint64) predicate.TradeDate {
	return predicate.TradeDate(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint64) predicate.TradeDate {
	return predicate.TradeDate(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint64) predicate.TradeDate {
	return predicate.TradeDate(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint64) predicate.TradeDate {
	return predicate.TradeDate(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint64) predicate.TradeDate {
	return predicate.TradeDate(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint64) predicate.TradeDate {
	return predicate.TradeDate(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint64) predicate.TradeDate {
	return predicate.TradeDate(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint64) predicate.TradeDate {
	return predicate.TradeDate(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint64) predicate.TradeDate {
	return predicate.TradeDate(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// StockID applies equality check predicate on the "stock_id" field. It's identical to StockIDEQ.
func StockID(v uint64) predicate.TradeDate {
	return predicate.TradeDate(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStockID), v))
	})
}

// TDate applies equality check predicate on the "t_date" field. It's identical to TDateEQ.
func TDate(v string) predicate.TradeDate {
	return predicate.TradeDate(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTDate), v))
	})
}

// EndPrice applies equality check predicate on the "end_price" field. It's identical to EndPriceEQ.
func EndPrice(v float64) predicate.TradeDate {
	return predicate.TradeDate(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEndPrice), v))
	})
}

// Volumn applies equality check predicate on the "volumn" field. It's identical to VolumnEQ.
func Volumn(v int64) predicate.TradeDate {
	return predicate.TradeDate(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldVolumn), v))
	})
}

// CreateAt applies equality check predicate on the "create_at" field. It's identical to CreateAtEQ.
func CreateAt(v int64) predicate.TradeDate {
	return predicate.TradeDate(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateAt), v))
	})
}

// UpdateAt applies equality check predicate on the "update_at" field. It's identical to UpdateAtEQ.
func UpdateAt(v int64) predicate.TradeDate {
	return predicate.TradeDate(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateAt), v))
	})
}

// XueqiuCommentCount applies equality check predicate on the "xueqiu_comment_count" field. It's identical to XueqiuCommentCountEQ.
func XueqiuCommentCount(v int64) predicate.TradeDate {
	return predicate.TradeDate(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldXueqiuCommentCount), v))
	})
}

// StockIDEQ applies the EQ predicate on the "stock_id" field.
func StockIDEQ(v uint64) predicate.TradeDate {
	return predicate.TradeDate(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStockID), v))
	})
}

// StockIDNEQ applies the NEQ predicate on the "stock_id" field.
func StockIDNEQ(v uint64) predicate.TradeDate {
	return predicate.TradeDate(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStockID), v))
	})
}

// StockIDIn applies the In predicate on the "stock_id" field.
func StockIDIn(vs ...uint64) predicate.TradeDate {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TradeDate(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldStockID), v...))
	})
}

// StockIDNotIn applies the NotIn predicate on the "stock_id" field.
func StockIDNotIn(vs ...uint64) predicate.TradeDate {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TradeDate(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldStockID), v...))
	})
}

// StockIDIsNil applies the IsNil predicate on the "stock_id" field.
func StockIDIsNil() predicate.TradeDate {
	return predicate.TradeDate(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldStockID)))
	})
}

// StockIDNotNil applies the NotNil predicate on the "stock_id" field.
func StockIDNotNil() predicate.TradeDate {
	return predicate.TradeDate(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldStockID)))
	})
}

// TDateEQ applies the EQ predicate on the "t_date" field.
func TDateEQ(v string) predicate.TradeDate {
	return predicate.TradeDate(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTDate), v))
	})
}

// TDateNEQ applies the NEQ predicate on the "t_date" field.
func TDateNEQ(v string) predicate.TradeDate {
	return predicate.TradeDate(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTDate), v))
	})
}

// TDateIn applies the In predicate on the "t_date" field.
func TDateIn(vs ...string) predicate.TradeDate {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TradeDate(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTDate), v...))
	})
}

// TDateNotIn applies the NotIn predicate on the "t_date" field.
func TDateNotIn(vs ...string) predicate.TradeDate {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TradeDate(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTDate), v...))
	})
}

// TDateGT applies the GT predicate on the "t_date" field.
func TDateGT(v string) predicate.TradeDate {
	return predicate.TradeDate(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTDate), v))
	})
}

// TDateGTE applies the GTE predicate on the "t_date" field.
func TDateGTE(v string) predicate.TradeDate {
	return predicate.TradeDate(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTDate), v))
	})
}

// TDateLT applies the LT predicate on the "t_date" field.
func TDateLT(v string) predicate.TradeDate {
	return predicate.TradeDate(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTDate), v))
	})
}

// TDateLTE applies the LTE predicate on the "t_date" field.
func TDateLTE(v string) predicate.TradeDate {
	return predicate.TradeDate(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTDate), v))
	})
}

// TDateContains applies the Contains predicate on the "t_date" field.
func TDateContains(v string) predicate.TradeDate {
	return predicate.TradeDate(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTDate), v))
	})
}

// TDateHasPrefix applies the HasPrefix predicate on the "t_date" field.
func TDateHasPrefix(v string) predicate.TradeDate {
	return predicate.TradeDate(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTDate), v))
	})
}

// TDateHasSuffix applies the HasSuffix predicate on the "t_date" field.
func TDateHasSuffix(v string) predicate.TradeDate {
	return predicate.TradeDate(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTDate), v))
	})
}

// TDateEqualFold applies the EqualFold predicate on the "t_date" field.
func TDateEqualFold(v string) predicate.TradeDate {
	return predicate.TradeDate(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTDate), v))
	})
}

// TDateContainsFold applies the ContainsFold predicate on the "t_date" field.
func TDateContainsFold(v string) predicate.TradeDate {
	return predicate.TradeDate(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTDate), v))
	})
}

// EndPriceEQ applies the EQ predicate on the "end_price" field.
func EndPriceEQ(v float64) predicate.TradeDate {
	return predicate.TradeDate(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEndPrice), v))
	})
}

// EndPriceNEQ applies the NEQ predicate on the "end_price" field.
func EndPriceNEQ(v float64) predicate.TradeDate {
	return predicate.TradeDate(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEndPrice), v))
	})
}

// EndPriceIn applies the In predicate on the "end_price" field.
func EndPriceIn(vs ...float64) predicate.TradeDate {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TradeDate(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldEndPrice), v...))
	})
}

// EndPriceNotIn applies the NotIn predicate on the "end_price" field.
func EndPriceNotIn(vs ...float64) predicate.TradeDate {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TradeDate(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldEndPrice), v...))
	})
}

// EndPriceGT applies the GT predicate on the "end_price" field.
func EndPriceGT(v float64) predicate.TradeDate {
	return predicate.TradeDate(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEndPrice), v))
	})
}

// EndPriceGTE applies the GTE predicate on the "end_price" field.
func EndPriceGTE(v float64) predicate.TradeDate {
	return predicate.TradeDate(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEndPrice), v))
	})
}

// EndPriceLT applies the LT predicate on the "end_price" field.
func EndPriceLT(v float64) predicate.TradeDate {
	return predicate.TradeDate(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEndPrice), v))
	})
}

// EndPriceLTE applies the LTE predicate on the "end_price" field.
func EndPriceLTE(v float64) predicate.TradeDate {
	return predicate.TradeDate(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEndPrice), v))
	})
}

// VolumnEQ applies the EQ predicate on the "volumn" field.
func VolumnEQ(v int64) predicate.TradeDate {
	return predicate.TradeDate(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldVolumn), v))
	})
}

// VolumnNEQ applies the NEQ predicate on the "volumn" field.
func VolumnNEQ(v int64) predicate.TradeDate {
	return predicate.TradeDate(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldVolumn), v))
	})
}

// VolumnIn applies the In predicate on the "volumn" field.
func VolumnIn(vs ...int64) predicate.TradeDate {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TradeDate(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldVolumn), v...))
	})
}

// VolumnNotIn applies the NotIn predicate on the "volumn" field.
func VolumnNotIn(vs ...int64) predicate.TradeDate {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TradeDate(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldVolumn), v...))
	})
}

// VolumnGT applies the GT predicate on the "volumn" field.
func VolumnGT(v int64) predicate.TradeDate {
	return predicate.TradeDate(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldVolumn), v))
	})
}

// VolumnGTE applies the GTE predicate on the "volumn" field.
func VolumnGTE(v int64) predicate.TradeDate {
	return predicate.TradeDate(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldVolumn), v))
	})
}

// VolumnLT applies the LT predicate on the "volumn" field.
func VolumnLT(v int64) predicate.TradeDate {
	return predicate.TradeDate(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldVolumn), v))
	})
}

// VolumnLTE applies the LTE predicate on the "volumn" field.
func VolumnLTE(v int64) predicate.TradeDate {
	return predicate.TradeDate(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldVolumn), v))
	})
}

// CreateAtEQ applies the EQ predicate on the "create_at" field.
func CreateAtEQ(v int64) predicate.TradeDate {
	return predicate.TradeDate(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateAt), v))
	})
}

// CreateAtNEQ applies the NEQ predicate on the "create_at" field.
func CreateAtNEQ(v int64) predicate.TradeDate {
	return predicate.TradeDate(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreateAt), v))
	})
}

// CreateAtIn applies the In predicate on the "create_at" field.
func CreateAtIn(vs ...int64) predicate.TradeDate {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TradeDate(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreateAt), v...))
	})
}

// CreateAtNotIn applies the NotIn predicate on the "create_at" field.
func CreateAtNotIn(vs ...int64) predicate.TradeDate {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TradeDate(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreateAt), v...))
	})
}

// CreateAtGT applies the GT predicate on the "create_at" field.
func CreateAtGT(v int64) predicate.TradeDate {
	return predicate.TradeDate(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreateAt), v))
	})
}

// CreateAtGTE applies the GTE predicate on the "create_at" field.
func CreateAtGTE(v int64) predicate.TradeDate {
	return predicate.TradeDate(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreateAt), v))
	})
}

// CreateAtLT applies the LT predicate on the "create_at" field.
func CreateAtLT(v int64) predicate.TradeDate {
	return predicate.TradeDate(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreateAt), v))
	})
}

// CreateAtLTE applies the LTE predicate on the "create_at" field.
func CreateAtLTE(v int64) predicate.TradeDate {
	return predicate.TradeDate(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreateAt), v))
	})
}

// UpdateAtEQ applies the EQ predicate on the "update_at" field.
func UpdateAtEQ(v int64) predicate.TradeDate {
	return predicate.TradeDate(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateAt), v))
	})
}

// UpdateAtNEQ applies the NEQ predicate on the "update_at" field.
func UpdateAtNEQ(v int64) predicate.TradeDate {
	return predicate.TradeDate(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdateAt), v))
	})
}

// UpdateAtIn applies the In predicate on the "update_at" field.
func UpdateAtIn(vs ...int64) predicate.TradeDate {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TradeDate(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdateAt), v...))
	})
}

// UpdateAtNotIn applies the NotIn predicate on the "update_at" field.
func UpdateAtNotIn(vs ...int64) predicate.TradeDate {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TradeDate(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdateAt), v...))
	})
}

// UpdateAtGT applies the GT predicate on the "update_at" field.
func UpdateAtGT(v int64) predicate.TradeDate {
	return predicate.TradeDate(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdateAt), v))
	})
}

// UpdateAtGTE applies the GTE predicate on the "update_at" field.
func UpdateAtGTE(v int64) predicate.TradeDate {
	return predicate.TradeDate(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdateAt), v))
	})
}

// UpdateAtLT applies the LT predicate on the "update_at" field.
func UpdateAtLT(v int64) predicate.TradeDate {
	return predicate.TradeDate(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdateAt), v))
	})
}

// UpdateAtLTE applies the LTE predicate on the "update_at" field.
func UpdateAtLTE(v int64) predicate.TradeDate {
	return predicate.TradeDate(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdateAt), v))
	})
}

// XueqiuCommentCountEQ applies the EQ predicate on the "xueqiu_comment_count" field.
func XueqiuCommentCountEQ(v int64) predicate.TradeDate {
	return predicate.TradeDate(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldXueqiuCommentCount), v))
	})
}

// XueqiuCommentCountNEQ applies the NEQ predicate on the "xueqiu_comment_count" field.
func XueqiuCommentCountNEQ(v int64) predicate.TradeDate {
	return predicate.TradeDate(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldXueqiuCommentCount), v))
	})
}

// XueqiuCommentCountIn applies the In predicate on the "xueqiu_comment_count" field.
func XueqiuCommentCountIn(vs ...int64) predicate.TradeDate {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TradeDate(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldXueqiuCommentCount), v...))
	})
}

// XueqiuCommentCountNotIn applies the NotIn predicate on the "xueqiu_comment_count" field.
func XueqiuCommentCountNotIn(vs ...int64) predicate.TradeDate {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TradeDate(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldXueqiuCommentCount), v...))
	})
}

// XueqiuCommentCountGT applies the GT predicate on the "xueqiu_comment_count" field.
func XueqiuCommentCountGT(v int64) predicate.TradeDate {
	return predicate.TradeDate(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldXueqiuCommentCount), v))
	})
}

// XueqiuCommentCountGTE applies the GTE predicate on the "xueqiu_comment_count" field.
func XueqiuCommentCountGTE(v int64) predicate.TradeDate {
	return predicate.TradeDate(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldXueqiuCommentCount), v))
	})
}

// XueqiuCommentCountLT applies the LT predicate on the "xueqiu_comment_count" field.
func XueqiuCommentCountLT(v int64) predicate.TradeDate {
	return predicate.TradeDate(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldXueqiuCommentCount), v))
	})
}

// XueqiuCommentCountLTE applies the LTE predicate on the "xueqiu_comment_count" field.
func XueqiuCommentCountLTE(v int64) predicate.TradeDate {
	return predicate.TradeDate(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldXueqiuCommentCount), v))
	})
}

// HasStock applies the HasEdge predicate on the "stock" edge.
func HasStock() predicate.TradeDate {
	return predicate.TradeDate(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(StockTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, StockTable, StockColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasStockWith applies the HasEdge predicate on the "stock" edge with a given conditions (other predicates).
func HasStockWith(preds ...predicate.Stock) predicate.TradeDate {
	return predicate.TradeDate(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(StockInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, StockTable, StockColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.TradeDate) predicate.TradeDate {
	return predicate.TradeDate(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.TradeDate) predicate.TradeDate {
	return predicate.TradeDate(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.TradeDate) predicate.TradeDate {
	return predicate.TradeDate(func(s *sql.Selector) {
		p(s.Not())
	})
}
