// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"stock_service/repository/ent/hot"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Hot is the model entity for the Hot schema.
type Hot struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// 股票代码
	Symbol string `json:"symbol,omitempty"`
	// 股票名称
	Name string `json:"name,omitempty"`
	// 交易日期
	TDate string `json:"t_date,omitempty"`
	// 排行榜排名
	Order int `json:"order,omitempty"`
	// 题材标签
	Tag string `json:"tag,omitempty"`
	// 持仓建议
	Bull int `json:"bull,omitempty"`
	// 短期趋势
	Short string `json:"short,omitempty"`
	// 投资建议分析
	Analyse      string `json:"analyse,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Hot) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case hot.FieldID, hot.FieldOrder, hot.FieldBull:
			values[i] = new(sql.NullInt64)
		case hot.FieldSymbol, hot.FieldName, hot.FieldTDate, hot.FieldTag, hot.FieldShort, hot.FieldAnalyse:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Hot fields.
func (h *Hot) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case hot.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			h.ID = uint64(value.Int64)
		case hot.FieldSymbol:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field symbol", values[i])
			} else if value.Valid {
				h.Symbol = value.String
			}
		case hot.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				h.Name = value.String
			}
		case hot.FieldTDate:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field t_date", values[i])
			} else if value.Valid {
				h.TDate = value.String
			}
		case hot.FieldOrder:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field order", values[i])
			} else if value.Valid {
				h.Order = int(value.Int64)
			}
		case hot.FieldTag:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tag", values[i])
			} else if value.Valid {
				h.Tag = value.String
			}
		case hot.FieldBull:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field bull", values[i])
			} else if value.Valid {
				h.Bull = int(value.Int64)
			}
		case hot.FieldShort:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field short", values[i])
			} else if value.Valid {
				h.Short = value.String
			}
		case hot.FieldAnalyse:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field analyse", values[i])
			} else if value.Valid {
				h.Analyse = value.String
			}
		default:
			h.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Hot.
// This includes values selected through modifiers, order, etc.
func (h *Hot) Value(name string) (ent.Value, error) {
	return h.selectValues.Get(name)
}

// Update returns a builder for updating this Hot.
// Note that you need to call Hot.Unwrap() before calling this method if this Hot
// was returned from a transaction, and the transaction was committed or rolled back.
func (h *Hot) Update() *HotUpdateOne {
	return NewHotClient(h.config).UpdateOne(h)
}

// Unwrap unwraps the Hot entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (h *Hot) Unwrap() *Hot {
	_tx, ok := h.config.driver.(*txDriver)
	if !ok {
		panic("ent: Hot is not a transactional entity")
	}
	h.config.driver = _tx.drv
	return h
}

// String implements the fmt.Stringer.
func (h *Hot) String() string {
	var builder strings.Builder
	builder.WriteString("Hot(")
	builder.WriteString(fmt.Sprintf("id=%v, ", h.ID))
	builder.WriteString("symbol=")
	builder.WriteString(h.Symbol)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(h.Name)
	builder.WriteString(", ")
	builder.WriteString("t_date=")
	builder.WriteString(h.TDate)
	builder.WriteString(", ")
	builder.WriteString("order=")
	builder.WriteString(fmt.Sprintf("%v", h.Order))
	builder.WriteString(", ")
	builder.WriteString("tag=")
	builder.WriteString(h.Tag)
	builder.WriteString(", ")
	builder.WriteString("bull=")
	builder.WriteString(fmt.Sprintf("%v", h.Bull))
	builder.WriteString(", ")
	builder.WriteString("short=")
	builder.WriteString(h.Short)
	builder.WriteString(", ")
	builder.WriteString("analyse=")
	builder.WriteString(h.Analyse)
	builder.WriteByte(')')
	return builder.String()
}

// Hots is a parsable slice of Hot.
type Hots []*Hot
