// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"stock_service/repository/ent/hot"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// HotCreate is the builder for creating a Hot entity.
type HotCreate struct {
	config
	mutation *HotMutation
	hooks    []Hook
}

// SetSymbol sets the "symbol" field.
func (hc *HotCreate) SetSymbol(s string) *HotCreate {
	hc.mutation.SetSymbol(s)
	return hc
}

// SetName sets the "name" field.
func (hc *HotCreate) SetName(s string) *HotCreate {
	hc.mutation.SetName(s)
	return hc
}

// SetTDate sets the "t_date" field.
func (hc *HotCreate) SetTDate(s string) *HotCreate {
	hc.mutation.SetTDate(s)
	return hc
}

// SetOrder sets the "order" field.
func (hc *HotCreate) SetOrder(i int) *HotCreate {
	hc.mutation.SetOrder(i)
	return hc
}

// SetNillableOrder sets the "order" field if the given value is not nil.
func (hc *HotCreate) SetNillableOrder(i *int) *HotCreate {
	if i != nil {
		hc.SetOrder(*i)
	}
	return hc
}

// SetTag sets the "tag" field.
func (hc *HotCreate) SetTag(s string) *HotCreate {
	hc.mutation.SetTag(s)
	return hc
}

// SetNillableTag sets the "tag" field if the given value is not nil.
func (hc *HotCreate) SetNillableTag(s *string) *HotCreate {
	if s != nil {
		hc.SetTag(*s)
	}
	return hc
}

// SetBull sets the "bull" field.
func (hc *HotCreate) SetBull(i int) *HotCreate {
	hc.mutation.SetBull(i)
	return hc
}

// SetNillableBull sets the "bull" field if the given value is not nil.
func (hc *HotCreate) SetNillableBull(i *int) *HotCreate {
	if i != nil {
		hc.SetBull(*i)
	}
	return hc
}

// SetShort sets the "short" field.
func (hc *HotCreate) SetShort(s string) *HotCreate {
	hc.mutation.SetShort(s)
	return hc
}

// SetNillableShort sets the "short" field if the given value is not nil.
func (hc *HotCreate) SetNillableShort(s *string) *HotCreate {
	if s != nil {
		hc.SetShort(*s)
	}
	return hc
}

// SetAnalyse sets the "analyse" field.
func (hc *HotCreate) SetAnalyse(s string) *HotCreate {
	hc.mutation.SetAnalyse(s)
	return hc
}

// SetNillableAnalyse sets the "analyse" field if the given value is not nil.
func (hc *HotCreate) SetNillableAnalyse(s *string) *HotCreate {
	if s != nil {
		hc.SetAnalyse(*s)
	}
	return hc
}

// SetID sets the "id" field.
func (hc *HotCreate) SetID(u uint64) *HotCreate {
	hc.mutation.SetID(u)
	return hc
}

// Mutation returns the HotMutation object of the builder.
func (hc *HotCreate) Mutation() *HotMutation {
	return hc.mutation
}

// Save creates the Hot in the database.
func (hc *HotCreate) Save(ctx context.Context) (*Hot, error) {
	hc.defaults()
	return withHooks(ctx, hc.sqlSave, hc.mutation, hc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (hc *HotCreate) SaveX(ctx context.Context) *Hot {
	v, err := hc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (hc *HotCreate) Exec(ctx context.Context) error {
	_, err := hc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hc *HotCreate) ExecX(ctx context.Context) {
	if err := hc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (hc *HotCreate) defaults() {
	if _, ok := hc.mutation.Order(); !ok {
		v := hot.DefaultOrder
		hc.mutation.SetOrder(v)
	}
	if _, ok := hc.mutation.Tag(); !ok {
		v := hot.DefaultTag
		hc.mutation.SetTag(v)
	}
	if _, ok := hc.mutation.Bull(); !ok {
		v := hot.DefaultBull
		hc.mutation.SetBull(v)
	}
	if _, ok := hc.mutation.Short(); !ok {
		v := hot.DefaultShort
		hc.mutation.SetShort(v)
	}
	if _, ok := hc.mutation.Analyse(); !ok {
		v := hot.DefaultAnalyse
		hc.mutation.SetAnalyse(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (hc *HotCreate) check() error {
	if _, ok := hc.mutation.Symbol(); !ok {
		return &ValidationError{Name: "symbol", err: errors.New(`ent: missing required field "Hot.symbol"`)}
	}
	if v, ok := hc.mutation.Symbol(); ok {
		if err := hot.SymbolValidator(v); err != nil {
			return &ValidationError{Name: "symbol", err: fmt.Errorf(`ent: validator failed for field "Hot.symbol": %w`, err)}
		}
	}
	if _, ok := hc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Hot.name"`)}
	}
	if v, ok := hc.mutation.Name(); ok {
		if err := hot.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Hot.name": %w`, err)}
		}
	}
	if _, ok := hc.mutation.TDate(); !ok {
		return &ValidationError{Name: "t_date", err: errors.New(`ent: missing required field "Hot.t_date"`)}
	}
	if v, ok := hc.mutation.TDate(); ok {
		if err := hot.TDateValidator(v); err != nil {
			return &ValidationError{Name: "t_date", err: fmt.Errorf(`ent: validator failed for field "Hot.t_date": %w`, err)}
		}
	}
	if _, ok := hc.mutation.Order(); !ok {
		return &ValidationError{Name: "order", err: errors.New(`ent: missing required field "Hot.order"`)}
	}
	if _, ok := hc.mutation.Tag(); !ok {
		return &ValidationError{Name: "tag", err: errors.New(`ent: missing required field "Hot.tag"`)}
	}
	if _, ok := hc.mutation.Bull(); !ok {
		return &ValidationError{Name: "bull", err: errors.New(`ent: missing required field "Hot.bull"`)}
	}
	if _, ok := hc.mutation.Short(); !ok {
		return &ValidationError{Name: "short", err: errors.New(`ent: missing required field "Hot.short"`)}
	}
	if v, ok := hc.mutation.Short(); ok {
		if err := hot.ShortValidator(v); err != nil {
			return &ValidationError{Name: "short", err: fmt.Errorf(`ent: validator failed for field "Hot.short": %w`, err)}
		}
	}
	if _, ok := hc.mutation.Analyse(); !ok {
		return &ValidationError{Name: "analyse", err: errors.New(`ent: missing required field "Hot.analyse"`)}
	}
	if v, ok := hc.mutation.ID(); ok {
		if err := hot.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "Hot.id": %w`, err)}
		}
	}
	return nil
}

func (hc *HotCreate) sqlSave(ctx context.Context) (*Hot, error) {
	if err := hc.check(); err != nil {
		return nil, err
	}
	_node, _spec := hc.createSpec()
	if err := sqlgraph.CreateNode(ctx, hc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint64(id)
	}
	hc.mutation.id = &_node.ID
	hc.mutation.done = true
	return _node, nil
}

func (hc *HotCreate) createSpec() (*Hot, *sqlgraph.CreateSpec) {
	var (
		_node = &Hot{config: hc.config}
		_spec = sqlgraph.NewCreateSpec(hot.Table, sqlgraph.NewFieldSpec(hot.FieldID, field.TypeUint64))
	)
	if id, ok := hc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := hc.mutation.Symbol(); ok {
		_spec.SetField(hot.FieldSymbol, field.TypeString, value)
		_node.Symbol = value
	}
	if value, ok := hc.mutation.Name(); ok {
		_spec.SetField(hot.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := hc.mutation.TDate(); ok {
		_spec.SetField(hot.FieldTDate, field.TypeString, value)
		_node.TDate = value
	}
	if value, ok := hc.mutation.Order(); ok {
		_spec.SetField(hot.FieldOrder, field.TypeInt, value)
		_node.Order = value
	}
	if value, ok := hc.mutation.Tag(); ok {
		_spec.SetField(hot.FieldTag, field.TypeString, value)
		_node.Tag = value
	}
	if value, ok := hc.mutation.Bull(); ok {
		_spec.SetField(hot.FieldBull, field.TypeInt, value)
		_node.Bull = value
	}
	if value, ok := hc.mutation.Short(); ok {
		_spec.SetField(hot.FieldShort, field.TypeString, value)
		_node.Short = value
	}
	if value, ok := hc.mutation.Analyse(); ok {
		_spec.SetField(hot.FieldAnalyse, field.TypeString, value)
		_node.Analyse = value
	}
	return _node, _spec
}

// HotCreateBulk is the builder for creating many Hot entities in bulk.
type HotCreateBulk struct {
	config
	builders []*HotCreate
}

// Save creates the Hot entities in the database.
func (hcb *HotCreateBulk) Save(ctx context.Context) ([]*Hot, error) {
	specs := make([]*sqlgraph.CreateSpec, len(hcb.builders))
	nodes := make([]*Hot, len(hcb.builders))
	mutators := make([]Mutator, len(hcb.builders))
	for i := range hcb.builders {
		func(i int, root context.Context) {
			builder := hcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*HotMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, hcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, hcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, hcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (hcb *HotCreateBulk) SaveX(ctx context.Context) []*Hot {
	v, err := hcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (hcb *HotCreateBulk) Exec(ctx context.Context) error {
	_, err := hcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hcb *HotCreateBulk) ExecX(ctx context.Context) {
	if err := hcb.Exec(ctx); err != nil {
		panic(err)
	}
}
