// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"stock_service/repository/ent/hot"
	"stock_service/repository/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// HotUpdate is the builder for updating Hot entities.
type HotUpdate struct {
	config
	hooks    []Hook
	mutation *HotMutation
}

// Where appends a list predicates to the HotUpdate builder.
func (hu *HotUpdate) Where(ps ...predicate.Hot) *HotUpdate {
	hu.mutation.Where(ps...)
	return hu
}

// SetSymbol sets the "symbol" field.
func (hu *HotUpdate) SetSymbol(s string) *HotUpdate {
	hu.mutation.SetSymbol(s)
	return hu
}

// SetName sets the "name" field.
func (hu *HotUpdate) SetName(s string) *HotUpdate {
	hu.mutation.SetName(s)
	return hu
}

// SetTDate sets the "t_date" field.
func (hu *HotUpdate) SetTDate(s string) *HotUpdate {
	hu.mutation.SetTDate(s)
	return hu
}

// SetOrder sets the "order" field.
func (hu *HotUpdate) SetOrder(i int) *HotUpdate {
	hu.mutation.ResetOrder()
	hu.mutation.SetOrder(i)
	return hu
}

// SetNillableOrder sets the "order" field if the given value is not nil.
func (hu *HotUpdate) SetNillableOrder(i *int) *HotUpdate {
	if i != nil {
		hu.SetOrder(*i)
	}
	return hu
}

// AddOrder adds i to the "order" field.
func (hu *HotUpdate) AddOrder(i int) *HotUpdate {
	hu.mutation.AddOrder(i)
	return hu
}

// SetTag sets the "tag" field.
func (hu *HotUpdate) SetTag(s string) *HotUpdate {
	hu.mutation.SetTag(s)
	return hu
}

// SetNillableTag sets the "tag" field if the given value is not nil.
func (hu *HotUpdate) SetNillableTag(s *string) *HotUpdate {
	if s != nil {
		hu.SetTag(*s)
	}
	return hu
}

// SetBull sets the "bull" field.
func (hu *HotUpdate) SetBull(i int) *HotUpdate {
	hu.mutation.ResetBull()
	hu.mutation.SetBull(i)
	return hu
}

// SetNillableBull sets the "bull" field if the given value is not nil.
func (hu *HotUpdate) SetNillableBull(i *int) *HotUpdate {
	if i != nil {
		hu.SetBull(*i)
	}
	return hu
}

// AddBull adds i to the "bull" field.
func (hu *HotUpdate) AddBull(i int) *HotUpdate {
	hu.mutation.AddBull(i)
	return hu
}

// SetShort sets the "short" field.
func (hu *HotUpdate) SetShort(s string) *HotUpdate {
	hu.mutation.SetShort(s)
	return hu
}

// SetNillableShort sets the "short" field if the given value is not nil.
func (hu *HotUpdate) SetNillableShort(s *string) *HotUpdate {
	if s != nil {
		hu.SetShort(*s)
	}
	return hu
}

// SetAnalyse sets the "analyse" field.
func (hu *HotUpdate) SetAnalyse(s string) *HotUpdate {
	hu.mutation.SetAnalyse(s)
	return hu
}

// SetNillableAnalyse sets the "analyse" field if the given value is not nil.
func (hu *HotUpdate) SetNillableAnalyse(s *string) *HotUpdate {
	if s != nil {
		hu.SetAnalyse(*s)
	}
	return hu
}

// Mutation returns the HotMutation object of the builder.
func (hu *HotUpdate) Mutation() *HotMutation {
	return hu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (hu *HotUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, hu.sqlSave, hu.mutation, hu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (hu *HotUpdate) SaveX(ctx context.Context) int {
	affected, err := hu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (hu *HotUpdate) Exec(ctx context.Context) error {
	_, err := hu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hu *HotUpdate) ExecX(ctx context.Context) {
	if err := hu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (hu *HotUpdate) check() error {
	if v, ok := hu.mutation.Symbol(); ok {
		if err := hot.SymbolValidator(v); err != nil {
			return &ValidationError{Name: "symbol", err: fmt.Errorf(`ent: validator failed for field "Hot.symbol": %w`, err)}
		}
	}
	if v, ok := hu.mutation.Name(); ok {
		if err := hot.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Hot.name": %w`, err)}
		}
	}
	if v, ok := hu.mutation.TDate(); ok {
		if err := hot.TDateValidator(v); err != nil {
			return &ValidationError{Name: "t_date", err: fmt.Errorf(`ent: validator failed for field "Hot.t_date": %w`, err)}
		}
	}
	if v, ok := hu.mutation.Short(); ok {
		if err := hot.ShortValidator(v); err != nil {
			return &ValidationError{Name: "short", err: fmt.Errorf(`ent: validator failed for field "Hot.short": %w`, err)}
		}
	}
	return nil
}

func (hu *HotUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := hu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(hot.Table, hot.Columns, sqlgraph.NewFieldSpec(hot.FieldID, field.TypeUint64))
	if ps := hu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := hu.mutation.Symbol(); ok {
		_spec.SetField(hot.FieldSymbol, field.TypeString, value)
	}
	if value, ok := hu.mutation.Name(); ok {
		_spec.SetField(hot.FieldName, field.TypeString, value)
	}
	if value, ok := hu.mutation.TDate(); ok {
		_spec.SetField(hot.FieldTDate, field.TypeString, value)
	}
	if value, ok := hu.mutation.Order(); ok {
		_spec.SetField(hot.FieldOrder, field.TypeInt, value)
	}
	if value, ok := hu.mutation.AddedOrder(); ok {
		_spec.AddField(hot.FieldOrder, field.TypeInt, value)
	}
	if value, ok := hu.mutation.Tag(); ok {
		_spec.SetField(hot.FieldTag, field.TypeString, value)
	}
	if value, ok := hu.mutation.Bull(); ok {
		_spec.SetField(hot.FieldBull, field.TypeInt, value)
	}
	if value, ok := hu.mutation.AddedBull(); ok {
		_spec.AddField(hot.FieldBull, field.TypeInt, value)
	}
	if value, ok := hu.mutation.Short(); ok {
		_spec.SetField(hot.FieldShort, field.TypeString, value)
	}
	if value, ok := hu.mutation.Analyse(); ok {
		_spec.SetField(hot.FieldAnalyse, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, hu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{hot.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	hu.mutation.done = true
	return n, nil
}

// HotUpdateOne is the builder for updating a single Hot entity.
type HotUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *HotMutation
}

// SetSymbol sets the "symbol" field.
func (huo *HotUpdateOne) SetSymbol(s string) *HotUpdateOne {
	huo.mutation.SetSymbol(s)
	return huo
}

// SetName sets the "name" field.
func (huo *HotUpdateOne) SetName(s string) *HotUpdateOne {
	huo.mutation.SetName(s)
	return huo
}

// SetTDate sets the "t_date" field.
func (huo *HotUpdateOne) SetTDate(s string) *HotUpdateOne {
	huo.mutation.SetTDate(s)
	return huo
}

// SetOrder sets the "order" field.
func (huo *HotUpdateOne) SetOrder(i int) *HotUpdateOne {
	huo.mutation.ResetOrder()
	huo.mutation.SetOrder(i)
	return huo
}

// SetNillableOrder sets the "order" field if the given value is not nil.
func (huo *HotUpdateOne) SetNillableOrder(i *int) *HotUpdateOne {
	if i != nil {
		huo.SetOrder(*i)
	}
	return huo
}

// AddOrder adds i to the "order" field.
func (huo *HotUpdateOne) AddOrder(i int) *HotUpdateOne {
	huo.mutation.AddOrder(i)
	return huo
}

// SetTag sets the "tag" field.
func (huo *HotUpdateOne) SetTag(s string) *HotUpdateOne {
	huo.mutation.SetTag(s)
	return huo
}

// SetNillableTag sets the "tag" field if the given value is not nil.
func (huo *HotUpdateOne) SetNillableTag(s *string) *HotUpdateOne {
	if s != nil {
		huo.SetTag(*s)
	}
	return huo
}

// SetBull sets the "bull" field.
func (huo *HotUpdateOne) SetBull(i int) *HotUpdateOne {
	huo.mutation.ResetBull()
	huo.mutation.SetBull(i)
	return huo
}

// SetNillableBull sets the "bull" field if the given value is not nil.
func (huo *HotUpdateOne) SetNillableBull(i *int) *HotUpdateOne {
	if i != nil {
		huo.SetBull(*i)
	}
	return huo
}

// AddBull adds i to the "bull" field.
func (huo *HotUpdateOne) AddBull(i int) *HotUpdateOne {
	huo.mutation.AddBull(i)
	return huo
}

// SetShort sets the "short" field.
func (huo *HotUpdateOne) SetShort(s string) *HotUpdateOne {
	huo.mutation.SetShort(s)
	return huo
}

// SetNillableShort sets the "short" field if the given value is not nil.
func (huo *HotUpdateOne) SetNillableShort(s *string) *HotUpdateOne {
	if s != nil {
		huo.SetShort(*s)
	}
	return huo
}

// SetAnalyse sets the "analyse" field.
func (huo *HotUpdateOne) SetAnalyse(s string) *HotUpdateOne {
	huo.mutation.SetAnalyse(s)
	return huo
}

// SetNillableAnalyse sets the "analyse" field if the given value is not nil.
func (huo *HotUpdateOne) SetNillableAnalyse(s *string) *HotUpdateOne {
	if s != nil {
		huo.SetAnalyse(*s)
	}
	return huo
}

// Mutation returns the HotMutation object of the builder.
func (huo *HotUpdateOne) Mutation() *HotMutation {
	return huo.mutation
}

// Where appends a list predicates to the HotUpdate builder.
func (huo *HotUpdateOne) Where(ps ...predicate.Hot) *HotUpdateOne {
	huo.mutation.Where(ps...)
	return huo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (huo *HotUpdateOne) Select(field string, fields ...string) *HotUpdateOne {
	huo.fields = append([]string{field}, fields...)
	return huo
}

// Save executes the query and returns the updated Hot entity.
func (huo *HotUpdateOne) Save(ctx context.Context) (*Hot, error) {
	return withHooks(ctx, huo.sqlSave, huo.mutation, huo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (huo *HotUpdateOne) SaveX(ctx context.Context) *Hot {
	node, err := huo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (huo *HotUpdateOne) Exec(ctx context.Context) error {
	_, err := huo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (huo *HotUpdateOne) ExecX(ctx context.Context) {
	if err := huo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (huo *HotUpdateOne) check() error {
	if v, ok := huo.mutation.Symbol(); ok {
		if err := hot.SymbolValidator(v); err != nil {
			return &ValidationError{Name: "symbol", err: fmt.Errorf(`ent: validator failed for field "Hot.symbol": %w`, err)}
		}
	}
	if v, ok := huo.mutation.Name(); ok {
		if err := hot.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Hot.name": %w`, err)}
		}
	}
	if v, ok := huo.mutation.TDate(); ok {
		if err := hot.TDateValidator(v); err != nil {
			return &ValidationError{Name: "t_date", err: fmt.Errorf(`ent: validator failed for field "Hot.t_date": %w`, err)}
		}
	}
	if v, ok := huo.mutation.Short(); ok {
		if err := hot.ShortValidator(v); err != nil {
			return &ValidationError{Name: "short", err: fmt.Errorf(`ent: validator failed for field "Hot.short": %w`, err)}
		}
	}
	return nil
}

func (huo *HotUpdateOne) sqlSave(ctx context.Context) (_node *Hot, err error) {
	if err := huo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(hot.Table, hot.Columns, sqlgraph.NewFieldSpec(hot.FieldID, field.TypeUint64))
	id, ok := huo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Hot.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := huo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, hot.FieldID)
		for _, f := range fields {
			if !hot.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != hot.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := huo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := huo.mutation.Symbol(); ok {
		_spec.SetField(hot.FieldSymbol, field.TypeString, value)
	}
	if value, ok := huo.mutation.Name(); ok {
		_spec.SetField(hot.FieldName, field.TypeString, value)
	}
	if value, ok := huo.mutation.TDate(); ok {
		_spec.SetField(hot.FieldTDate, field.TypeString, value)
	}
	if value, ok := huo.mutation.Order(); ok {
		_spec.SetField(hot.FieldOrder, field.TypeInt, value)
	}
	if value, ok := huo.mutation.AddedOrder(); ok {
		_spec.AddField(hot.FieldOrder, field.TypeInt, value)
	}
	if value, ok := huo.mutation.Tag(); ok {
		_spec.SetField(hot.FieldTag, field.TypeString, value)
	}
	if value, ok := huo.mutation.Bull(); ok {
		_spec.SetField(hot.FieldBull, field.TypeInt, value)
	}
	if value, ok := huo.mutation.AddedBull(); ok {
		_spec.AddField(hot.FieldBull, field.TypeInt, value)
	}
	if value, ok := huo.mutation.Short(); ok {
		_spec.SetField(hot.FieldShort, field.TypeString, value)
	}
	if value, ok := huo.mutation.Analyse(); ok {
		_spec.SetField(hot.FieldAnalyse, field.TypeString, value)
	}
	_node = &Hot{config: huo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, huo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{hot.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	huo.mutation.done = true
	return _node, nil
}
