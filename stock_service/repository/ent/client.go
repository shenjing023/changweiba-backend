// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"

	"stock_service/repository/ent/migrate"

	"stock_service/repository/ent/hot"
	"stock_service/repository/ent/stock"
	"stock_service/repository/ent/tradedate"
	"stock_service/repository/ent/user"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Hot is the client for interacting with the Hot builders.
	Hot *HotClient
	// Stock is the client for interacting with the Stock builders.
	Stock *StockClient
	// TradeDate is the client for interacting with the TradeDate builders.
	TradeDate *TradeDateClient
	// User is the client for interacting with the User builders.
	User *UserClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Hot = NewHotClient(c.config)
	c.Stock = NewStockClient(c.config)
	c.TradeDate = NewTradeDateClient(c.config)
	c.User = NewUserClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:       ctx,
		config:    cfg,
		Hot:       NewHotClient(cfg),
		Stock:     NewStockClient(cfg),
		TradeDate: NewTradeDateClient(cfg),
		User:      NewUserClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:       ctx,
		config:    cfg,
		Hot:       NewHotClient(cfg),
		Stock:     NewStockClient(cfg),
		TradeDate: NewTradeDateClient(cfg),
		User:      NewUserClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Hot.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Hot.Use(hooks...)
	c.Stock.Use(hooks...)
	c.TradeDate.Use(hooks...)
	c.User.Use(hooks...)
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	c.Hot.Intercept(interceptors...)
	c.Stock.Intercept(interceptors...)
	c.TradeDate.Intercept(interceptors...)
	c.User.Intercept(interceptors...)
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *HotMutation:
		return c.Hot.mutate(ctx, m)
	case *StockMutation:
		return c.Stock.mutate(ctx, m)
	case *TradeDateMutation:
		return c.TradeDate.mutate(ctx, m)
	case *UserMutation:
		return c.User.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// HotClient is a client for the Hot schema.
type HotClient struct {
	config
}

// NewHotClient returns a client for the Hot from the given config.
func NewHotClient(c config) *HotClient {
	return &HotClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `hot.Hooks(f(g(h())))`.
func (c *HotClient) Use(hooks ...Hook) {
	c.hooks.Hot = append(c.hooks.Hot, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `hot.Intercept(f(g(h())))`.
func (c *HotClient) Intercept(interceptors ...Interceptor) {
	c.inters.Hot = append(c.inters.Hot, interceptors...)
}

// Create returns a builder for creating a Hot entity.
func (c *HotClient) Create() *HotCreate {
	mutation := newHotMutation(c.config, OpCreate)
	return &HotCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Hot entities.
func (c *HotClient) CreateBulk(builders ...*HotCreate) *HotCreateBulk {
	return &HotCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Hot.
func (c *HotClient) Update() *HotUpdate {
	mutation := newHotMutation(c.config, OpUpdate)
	return &HotUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *HotClient) UpdateOne(h *Hot) *HotUpdateOne {
	mutation := newHotMutation(c.config, OpUpdateOne, withHot(h))
	return &HotUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *HotClient) UpdateOneID(id uint64) *HotUpdateOne {
	mutation := newHotMutation(c.config, OpUpdateOne, withHotID(id))
	return &HotUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Hot.
func (c *HotClient) Delete() *HotDelete {
	mutation := newHotMutation(c.config, OpDelete)
	return &HotDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *HotClient) DeleteOne(h *Hot) *HotDeleteOne {
	return c.DeleteOneID(h.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *HotClient) DeleteOneID(id uint64) *HotDeleteOne {
	builder := c.Delete().Where(hot.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &HotDeleteOne{builder}
}

// Query returns a query builder for Hot.
func (c *HotClient) Query() *HotQuery {
	return &HotQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeHot},
		inters: c.Interceptors(),
	}
}

// Get returns a Hot entity by its id.
func (c *HotClient) Get(ctx context.Context, id uint64) (*Hot, error) {
	return c.Query().Where(hot.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *HotClient) GetX(ctx context.Context, id uint64) *Hot {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *HotClient) Hooks() []Hook {
	return c.hooks.Hot
}

// Interceptors returns the client interceptors.
func (c *HotClient) Interceptors() []Interceptor {
	return c.inters.Hot
}

func (c *HotClient) mutate(ctx context.Context, m *HotMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&HotCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&HotUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&HotUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&HotDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Hot mutation op: %q", m.Op())
	}
}

// StockClient is a client for the Stock schema.
type StockClient struct {
	config
}

// NewStockClient returns a client for the Stock from the given config.
func NewStockClient(c config) *StockClient {
	return &StockClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `stock.Hooks(f(g(h())))`.
func (c *StockClient) Use(hooks ...Hook) {
	c.hooks.Stock = append(c.hooks.Stock, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `stock.Intercept(f(g(h())))`.
func (c *StockClient) Intercept(interceptors ...Interceptor) {
	c.inters.Stock = append(c.inters.Stock, interceptors...)
}

// Create returns a builder for creating a Stock entity.
func (c *StockClient) Create() *StockCreate {
	mutation := newStockMutation(c.config, OpCreate)
	return &StockCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Stock entities.
func (c *StockClient) CreateBulk(builders ...*StockCreate) *StockCreateBulk {
	return &StockCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Stock.
func (c *StockClient) Update() *StockUpdate {
	mutation := newStockMutation(c.config, OpUpdate)
	return &StockUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *StockClient) UpdateOne(s *Stock) *StockUpdateOne {
	mutation := newStockMutation(c.config, OpUpdateOne, withStock(s))
	return &StockUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *StockClient) UpdateOneID(id uint64) *StockUpdateOne {
	mutation := newStockMutation(c.config, OpUpdateOne, withStockID(id))
	return &StockUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Stock.
func (c *StockClient) Delete() *StockDelete {
	mutation := newStockMutation(c.config, OpDelete)
	return &StockDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *StockClient) DeleteOne(s *Stock) *StockDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *StockClient) DeleteOneID(id uint64) *StockDeleteOne {
	builder := c.Delete().Where(stock.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &StockDeleteOne{builder}
}

// Query returns a query builder for Stock.
func (c *StockClient) Query() *StockQuery {
	return &StockQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeStock},
		inters: c.Interceptors(),
	}
}

// Get returns a Stock entity by its id.
func (c *StockClient) Get(ctx context.Context, id uint64) (*Stock, error) {
	return c.Query().Where(stock.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *StockClient) GetX(ctx context.Context, id uint64) *Stock {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTrades queries the trades edge of a Stock.
func (c *StockClient) QueryTrades(s *Stock) *TradeDateQuery {
	query := (&TradeDateClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(stock.Table, stock.FieldID, id),
			sqlgraph.To(tradedate.Table, tradedate.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, stock.TradesTable, stock.TradesColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySubscribers queries the subscribers edge of a Stock.
func (c *StockClient) QuerySubscribers(s *Stock) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(stock.Table, stock.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, stock.SubscribersTable, stock.SubscribersPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *StockClient) Hooks() []Hook {
	return c.hooks.Stock
}

// Interceptors returns the client interceptors.
func (c *StockClient) Interceptors() []Interceptor {
	return c.inters.Stock
}

func (c *StockClient) mutate(ctx context.Context, m *StockMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&StockCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&StockUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&StockUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&StockDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Stock mutation op: %q", m.Op())
	}
}

// TradeDateClient is a client for the TradeDate schema.
type TradeDateClient struct {
	config
}

// NewTradeDateClient returns a client for the TradeDate from the given config.
func NewTradeDateClient(c config) *TradeDateClient {
	return &TradeDateClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `tradedate.Hooks(f(g(h())))`.
func (c *TradeDateClient) Use(hooks ...Hook) {
	c.hooks.TradeDate = append(c.hooks.TradeDate, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `tradedate.Intercept(f(g(h())))`.
func (c *TradeDateClient) Intercept(interceptors ...Interceptor) {
	c.inters.TradeDate = append(c.inters.TradeDate, interceptors...)
}

// Create returns a builder for creating a TradeDate entity.
func (c *TradeDateClient) Create() *TradeDateCreate {
	mutation := newTradeDateMutation(c.config, OpCreate)
	return &TradeDateCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of TradeDate entities.
func (c *TradeDateClient) CreateBulk(builders ...*TradeDateCreate) *TradeDateCreateBulk {
	return &TradeDateCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for TradeDate.
func (c *TradeDateClient) Update() *TradeDateUpdate {
	mutation := newTradeDateMutation(c.config, OpUpdate)
	return &TradeDateUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TradeDateClient) UpdateOne(td *TradeDate) *TradeDateUpdateOne {
	mutation := newTradeDateMutation(c.config, OpUpdateOne, withTradeDate(td))
	return &TradeDateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TradeDateClient) UpdateOneID(id uint64) *TradeDateUpdateOne {
	mutation := newTradeDateMutation(c.config, OpUpdateOne, withTradeDateID(id))
	return &TradeDateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for TradeDate.
func (c *TradeDateClient) Delete() *TradeDateDelete {
	mutation := newTradeDateMutation(c.config, OpDelete)
	return &TradeDateDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *TradeDateClient) DeleteOne(td *TradeDate) *TradeDateDeleteOne {
	return c.DeleteOneID(td.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *TradeDateClient) DeleteOneID(id uint64) *TradeDateDeleteOne {
	builder := c.Delete().Where(tradedate.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TradeDateDeleteOne{builder}
}

// Query returns a query builder for TradeDate.
func (c *TradeDateClient) Query() *TradeDateQuery {
	return &TradeDateQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeTradeDate},
		inters: c.Interceptors(),
	}
}

// Get returns a TradeDate entity by its id.
func (c *TradeDateClient) Get(ctx context.Context, id uint64) (*TradeDate, error) {
	return c.Query().Where(tradedate.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TradeDateClient) GetX(ctx context.Context, id uint64) *TradeDate {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryStock queries the stock edge of a TradeDate.
func (c *TradeDateClient) QueryStock(td *TradeDate) *StockQuery {
	query := (&StockClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := td.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(tradedate.Table, tradedate.FieldID, id),
			sqlgraph.To(stock.Table, stock.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, tradedate.StockTable, tradedate.StockColumn),
		)
		fromV = sqlgraph.Neighbors(td.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *TradeDateClient) Hooks() []Hook {
	return c.hooks.TradeDate
}

// Interceptors returns the client interceptors.
func (c *TradeDateClient) Interceptors() []Interceptor {
	return c.inters.TradeDate
}

func (c *TradeDateClient) mutate(ctx context.Context, m *TradeDateMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&TradeDateCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&TradeDateUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&TradeDateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&TradeDateDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown TradeDate mutation op: %q", m.Op())
	}
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `user.Intercept(f(g(h())))`.
func (c *UserClient) Intercept(interceptors ...Interceptor) {
	c.inters.User = append(c.inters.User, interceptors...)
}

// Create returns a builder for creating a User entity.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id uint64) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserClient) DeleteOneID(id uint64) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUser},
		inters: c.Interceptors(),
	}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id uint64) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id uint64) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QuerySubscribeStocks queries the subscribe_stocks edge of a User.
func (c *UserClient) QuerySubscribeStocks(u *User) *StockQuery {
	query := (&StockClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(stock.Table, stock.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, user.SubscribeStocksTable, user.SubscribeStocksPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	return c.hooks.User
}

// Interceptors returns the client interceptors.
func (c *UserClient) Interceptors() []Interceptor {
	return c.inters.User
}

func (c *UserClient) mutate(ctx context.Context, m *UserMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown User mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		Hot, Stock, TradeDate, User []ent.Hook
	}
	inters struct {
		Hot, Stock, TradeDate, User []ent.Interceptor
	}
)
