// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"stock_service/repository/ent/predicate"
	"stock_service/repository/ent/stock"
	"stock_service/repository/ent/tradedate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TradeDateUpdate is the builder for updating TradeDate entities.
type TradeDateUpdate struct {
	config
	hooks    []Hook
	mutation *TradeDateMutation
}

// Where appends a list predicates to the TradeDateUpdate builder.
func (tdu *TradeDateUpdate) Where(ps ...predicate.TradeDate) *TradeDateUpdate {
	tdu.mutation.Where(ps...)
	return tdu
}

// SetStockID sets the "stock_id" field.
func (tdu *TradeDateUpdate) SetStockID(u uint64) *TradeDateUpdate {
	tdu.mutation.SetStockID(u)
	return tdu
}

// SetNillableStockID sets the "stock_id" field if the given value is not nil.
func (tdu *TradeDateUpdate) SetNillableStockID(u *uint64) *TradeDateUpdate {
	if u != nil {
		tdu.SetStockID(*u)
	}
	return tdu
}

// ClearStockID clears the value of the "stock_id" field.
func (tdu *TradeDateUpdate) ClearStockID() *TradeDateUpdate {
	tdu.mutation.ClearStockID()
	return tdu
}

// SetTDate sets the "t_date" field.
func (tdu *TradeDateUpdate) SetTDate(s string) *TradeDateUpdate {
	tdu.mutation.SetTDate(s)
	return tdu
}

// SetClose sets the "close" field.
func (tdu *TradeDateUpdate) SetClose(f float64) *TradeDateUpdate {
	tdu.mutation.ResetClose()
	tdu.mutation.SetClose(f)
	return tdu
}

// AddClose adds f to the "close" field.
func (tdu *TradeDateUpdate) AddClose(f float64) *TradeDateUpdate {
	tdu.mutation.AddClose(f)
	return tdu
}

// SetVolume sets the "volume" field.
func (tdu *TradeDateUpdate) SetVolume(f float64) *TradeDateUpdate {
	tdu.mutation.ResetVolume()
	tdu.mutation.SetVolume(f)
	return tdu
}

// AddVolume adds f to the "volume" field.
func (tdu *TradeDateUpdate) AddVolume(f float64) *TradeDateUpdate {
	tdu.mutation.AddVolume(f)
	return tdu
}

// SetUpdateAt sets the "update_at" field.
func (tdu *TradeDateUpdate) SetUpdateAt(i int64) *TradeDateUpdate {
	tdu.mutation.ResetUpdateAt()
	tdu.mutation.SetUpdateAt(i)
	return tdu
}

// SetNillableUpdateAt sets the "update_at" field if the given value is not nil.
func (tdu *TradeDateUpdate) SetNillableUpdateAt(i *int64) *TradeDateUpdate {
	if i != nil {
		tdu.SetUpdateAt(*i)
	}
	return tdu
}

// AddUpdateAt adds i to the "update_at" field.
func (tdu *TradeDateUpdate) AddUpdateAt(i int64) *TradeDateUpdate {
	tdu.mutation.AddUpdateAt(i)
	return tdu
}

// SetXueqiuCommentCount sets the "xueqiu_comment_count" field.
func (tdu *TradeDateUpdate) SetXueqiuCommentCount(i int64) *TradeDateUpdate {
	tdu.mutation.ResetXueqiuCommentCount()
	tdu.mutation.SetXueqiuCommentCount(i)
	return tdu
}

// SetNillableXueqiuCommentCount sets the "xueqiu_comment_count" field if the given value is not nil.
func (tdu *TradeDateUpdate) SetNillableXueqiuCommentCount(i *int64) *TradeDateUpdate {
	if i != nil {
		tdu.SetXueqiuCommentCount(*i)
	}
	return tdu
}

// AddXueqiuCommentCount adds i to the "xueqiu_comment_count" field.
func (tdu *TradeDateUpdate) AddXueqiuCommentCount(i int64) *TradeDateUpdate {
	tdu.mutation.AddXueqiuCommentCount(i)
	return tdu
}

// SetOpen sets the "open" field.
func (tdu *TradeDateUpdate) SetOpen(f float64) *TradeDateUpdate {
	tdu.mutation.ResetOpen()
	tdu.mutation.SetOpen(f)
	return tdu
}

// AddOpen adds f to the "open" field.
func (tdu *TradeDateUpdate) AddOpen(f float64) *TradeDateUpdate {
	tdu.mutation.AddOpen(f)
	return tdu
}

// SetMax sets the "max" field.
func (tdu *TradeDateUpdate) SetMax(f float64) *TradeDateUpdate {
	tdu.mutation.ResetMax()
	tdu.mutation.SetMax(f)
	return tdu
}

// AddMax adds f to the "max" field.
func (tdu *TradeDateUpdate) AddMax(f float64) *TradeDateUpdate {
	tdu.mutation.AddMax(f)
	return tdu
}

// SetMin sets the "min" field.
func (tdu *TradeDateUpdate) SetMin(f float64) *TradeDateUpdate {
	tdu.mutation.ResetMin()
	tdu.mutation.SetMin(f)
	return tdu
}

// AddMin adds f to the "min" field.
func (tdu *TradeDateUpdate) AddMin(f float64) *TradeDateUpdate {
	tdu.mutation.AddMin(f)
	return tdu
}

// SetBull sets the "bull" field.
func (tdu *TradeDateUpdate) SetBull(i int) *TradeDateUpdate {
	tdu.mutation.ResetBull()
	tdu.mutation.SetBull(i)
	return tdu
}

// SetNillableBull sets the "bull" field if the given value is not nil.
func (tdu *TradeDateUpdate) SetNillableBull(i *int) *TradeDateUpdate {
	if i != nil {
		tdu.SetBull(*i)
	}
	return tdu
}

// AddBull adds i to the "bull" field.
func (tdu *TradeDateUpdate) AddBull(i int) *TradeDateUpdate {
	tdu.mutation.AddBull(i)
	return tdu
}

// SetShort sets the "short" field.
func (tdu *TradeDateUpdate) SetShort(s string) *TradeDateUpdate {
	tdu.mutation.SetShort(s)
	return tdu
}

// SetNillableShort sets the "short" field if the given value is not nil.
func (tdu *TradeDateUpdate) SetNillableShort(s *string) *TradeDateUpdate {
	if s != nil {
		tdu.SetShort(*s)
	}
	return tdu
}

// SetStock sets the "stock" edge to the Stock entity.
func (tdu *TradeDateUpdate) SetStock(s *Stock) *TradeDateUpdate {
	return tdu.SetStockID(s.ID)
}

// Mutation returns the TradeDateMutation object of the builder.
func (tdu *TradeDateUpdate) Mutation() *TradeDateMutation {
	return tdu.mutation
}

// ClearStock clears the "stock" edge to the Stock entity.
func (tdu *TradeDateUpdate) ClearStock() *TradeDateUpdate {
	tdu.mutation.ClearStock()
	return tdu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tdu *TradeDateUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, tdu.sqlSave, tdu.mutation, tdu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tdu *TradeDateUpdate) SaveX(ctx context.Context) int {
	affected, err := tdu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tdu *TradeDateUpdate) Exec(ctx context.Context) error {
	_, err := tdu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tdu *TradeDateUpdate) ExecX(ctx context.Context) {
	if err := tdu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tdu *TradeDateUpdate) check() error {
	if v, ok := tdu.mutation.StockID(); ok {
		if err := tradedate.StockIDValidator(v); err != nil {
			return &ValidationError{Name: "stock_id", err: fmt.Errorf(`ent: validator failed for field "TradeDate.stock_id": %w`, err)}
		}
	}
	if v, ok := tdu.mutation.TDate(); ok {
		if err := tradedate.TDateValidator(v); err != nil {
			return &ValidationError{Name: "t_date", err: fmt.Errorf(`ent: validator failed for field "TradeDate.t_date": %w`, err)}
		}
	}
	if v, ok := tdu.mutation.UpdateAt(); ok {
		if err := tradedate.UpdateAtValidator(v); err != nil {
			return &ValidationError{Name: "update_at", err: fmt.Errorf(`ent: validator failed for field "TradeDate.update_at": %w`, err)}
		}
	}
	if v, ok := tdu.mutation.XueqiuCommentCount(); ok {
		if err := tradedate.XueqiuCommentCountValidator(v); err != nil {
			return &ValidationError{Name: "xueqiu_comment_count", err: fmt.Errorf(`ent: validator failed for field "TradeDate.xueqiu_comment_count": %w`, err)}
		}
	}
	return nil
}

func (tdu *TradeDateUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := tdu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(tradedate.Table, tradedate.Columns, sqlgraph.NewFieldSpec(tradedate.FieldID, field.TypeUint64))
	if ps := tdu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tdu.mutation.TDate(); ok {
		_spec.SetField(tradedate.FieldTDate, field.TypeString, value)
	}
	if value, ok := tdu.mutation.Close(); ok {
		_spec.SetField(tradedate.FieldClose, field.TypeFloat64, value)
	}
	if value, ok := tdu.mutation.AddedClose(); ok {
		_spec.AddField(tradedate.FieldClose, field.TypeFloat64, value)
	}
	if value, ok := tdu.mutation.Volume(); ok {
		_spec.SetField(tradedate.FieldVolume, field.TypeFloat64, value)
	}
	if value, ok := tdu.mutation.AddedVolume(); ok {
		_spec.AddField(tradedate.FieldVolume, field.TypeFloat64, value)
	}
	if value, ok := tdu.mutation.UpdateAt(); ok {
		_spec.SetField(tradedate.FieldUpdateAt, field.TypeInt64, value)
	}
	if value, ok := tdu.mutation.AddedUpdateAt(); ok {
		_spec.AddField(tradedate.FieldUpdateAt, field.TypeInt64, value)
	}
	if value, ok := tdu.mutation.XueqiuCommentCount(); ok {
		_spec.SetField(tradedate.FieldXueqiuCommentCount, field.TypeInt64, value)
	}
	if value, ok := tdu.mutation.AddedXueqiuCommentCount(); ok {
		_spec.AddField(tradedate.FieldXueqiuCommentCount, field.TypeInt64, value)
	}
	if value, ok := tdu.mutation.Open(); ok {
		_spec.SetField(tradedate.FieldOpen, field.TypeFloat64, value)
	}
	if value, ok := tdu.mutation.AddedOpen(); ok {
		_spec.AddField(tradedate.FieldOpen, field.TypeFloat64, value)
	}
	if value, ok := tdu.mutation.Max(); ok {
		_spec.SetField(tradedate.FieldMax, field.TypeFloat64, value)
	}
	if value, ok := tdu.mutation.AddedMax(); ok {
		_spec.AddField(tradedate.FieldMax, field.TypeFloat64, value)
	}
	if value, ok := tdu.mutation.Min(); ok {
		_spec.SetField(tradedate.FieldMin, field.TypeFloat64, value)
	}
	if value, ok := tdu.mutation.AddedMin(); ok {
		_spec.AddField(tradedate.FieldMin, field.TypeFloat64, value)
	}
	if value, ok := tdu.mutation.Bull(); ok {
		_spec.SetField(tradedate.FieldBull, field.TypeInt, value)
	}
	if value, ok := tdu.mutation.AddedBull(); ok {
		_spec.AddField(tradedate.FieldBull, field.TypeInt, value)
	}
	if value, ok := tdu.mutation.Short(); ok {
		_spec.SetField(tradedate.FieldShort, field.TypeString, value)
	}
	if tdu.mutation.StockCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tradedate.StockTable,
			Columns: []string{tradedate.StockColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(stock.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tdu.mutation.StockIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tradedate.StockTable,
			Columns: []string{tradedate.StockColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(stock.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tdu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tradedate.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tdu.mutation.done = true
	return n, nil
}

// TradeDateUpdateOne is the builder for updating a single TradeDate entity.
type TradeDateUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TradeDateMutation
}

// SetStockID sets the "stock_id" field.
func (tduo *TradeDateUpdateOne) SetStockID(u uint64) *TradeDateUpdateOne {
	tduo.mutation.SetStockID(u)
	return tduo
}

// SetNillableStockID sets the "stock_id" field if the given value is not nil.
func (tduo *TradeDateUpdateOne) SetNillableStockID(u *uint64) *TradeDateUpdateOne {
	if u != nil {
		tduo.SetStockID(*u)
	}
	return tduo
}

// ClearStockID clears the value of the "stock_id" field.
func (tduo *TradeDateUpdateOne) ClearStockID() *TradeDateUpdateOne {
	tduo.mutation.ClearStockID()
	return tduo
}

// SetTDate sets the "t_date" field.
func (tduo *TradeDateUpdateOne) SetTDate(s string) *TradeDateUpdateOne {
	tduo.mutation.SetTDate(s)
	return tduo
}

// SetClose sets the "close" field.
func (tduo *TradeDateUpdateOne) SetClose(f float64) *TradeDateUpdateOne {
	tduo.mutation.ResetClose()
	tduo.mutation.SetClose(f)
	return tduo
}

// AddClose adds f to the "close" field.
func (tduo *TradeDateUpdateOne) AddClose(f float64) *TradeDateUpdateOne {
	tduo.mutation.AddClose(f)
	return tduo
}

// SetVolume sets the "volume" field.
func (tduo *TradeDateUpdateOne) SetVolume(f float64) *TradeDateUpdateOne {
	tduo.mutation.ResetVolume()
	tduo.mutation.SetVolume(f)
	return tduo
}

// AddVolume adds f to the "volume" field.
func (tduo *TradeDateUpdateOne) AddVolume(f float64) *TradeDateUpdateOne {
	tduo.mutation.AddVolume(f)
	return tduo
}

// SetUpdateAt sets the "update_at" field.
func (tduo *TradeDateUpdateOne) SetUpdateAt(i int64) *TradeDateUpdateOne {
	tduo.mutation.ResetUpdateAt()
	tduo.mutation.SetUpdateAt(i)
	return tduo
}

// SetNillableUpdateAt sets the "update_at" field if the given value is not nil.
func (tduo *TradeDateUpdateOne) SetNillableUpdateAt(i *int64) *TradeDateUpdateOne {
	if i != nil {
		tduo.SetUpdateAt(*i)
	}
	return tduo
}

// AddUpdateAt adds i to the "update_at" field.
func (tduo *TradeDateUpdateOne) AddUpdateAt(i int64) *TradeDateUpdateOne {
	tduo.mutation.AddUpdateAt(i)
	return tduo
}

// SetXueqiuCommentCount sets the "xueqiu_comment_count" field.
func (tduo *TradeDateUpdateOne) SetXueqiuCommentCount(i int64) *TradeDateUpdateOne {
	tduo.mutation.ResetXueqiuCommentCount()
	tduo.mutation.SetXueqiuCommentCount(i)
	return tduo
}

// SetNillableXueqiuCommentCount sets the "xueqiu_comment_count" field if the given value is not nil.
func (tduo *TradeDateUpdateOne) SetNillableXueqiuCommentCount(i *int64) *TradeDateUpdateOne {
	if i != nil {
		tduo.SetXueqiuCommentCount(*i)
	}
	return tduo
}

// AddXueqiuCommentCount adds i to the "xueqiu_comment_count" field.
func (tduo *TradeDateUpdateOne) AddXueqiuCommentCount(i int64) *TradeDateUpdateOne {
	tduo.mutation.AddXueqiuCommentCount(i)
	return tduo
}

// SetOpen sets the "open" field.
func (tduo *TradeDateUpdateOne) SetOpen(f float64) *TradeDateUpdateOne {
	tduo.mutation.ResetOpen()
	tduo.mutation.SetOpen(f)
	return tduo
}

// AddOpen adds f to the "open" field.
func (tduo *TradeDateUpdateOne) AddOpen(f float64) *TradeDateUpdateOne {
	tduo.mutation.AddOpen(f)
	return tduo
}

// SetMax sets the "max" field.
func (tduo *TradeDateUpdateOne) SetMax(f float64) *TradeDateUpdateOne {
	tduo.mutation.ResetMax()
	tduo.mutation.SetMax(f)
	return tduo
}

// AddMax adds f to the "max" field.
func (tduo *TradeDateUpdateOne) AddMax(f float64) *TradeDateUpdateOne {
	tduo.mutation.AddMax(f)
	return tduo
}

// SetMin sets the "min" field.
func (tduo *TradeDateUpdateOne) SetMin(f float64) *TradeDateUpdateOne {
	tduo.mutation.ResetMin()
	tduo.mutation.SetMin(f)
	return tduo
}

// AddMin adds f to the "min" field.
func (tduo *TradeDateUpdateOne) AddMin(f float64) *TradeDateUpdateOne {
	tduo.mutation.AddMin(f)
	return tduo
}

// SetBull sets the "bull" field.
func (tduo *TradeDateUpdateOne) SetBull(i int) *TradeDateUpdateOne {
	tduo.mutation.ResetBull()
	tduo.mutation.SetBull(i)
	return tduo
}

// SetNillableBull sets the "bull" field if the given value is not nil.
func (tduo *TradeDateUpdateOne) SetNillableBull(i *int) *TradeDateUpdateOne {
	if i != nil {
		tduo.SetBull(*i)
	}
	return tduo
}

// AddBull adds i to the "bull" field.
func (tduo *TradeDateUpdateOne) AddBull(i int) *TradeDateUpdateOne {
	tduo.mutation.AddBull(i)
	return tduo
}

// SetShort sets the "short" field.
func (tduo *TradeDateUpdateOne) SetShort(s string) *TradeDateUpdateOne {
	tduo.mutation.SetShort(s)
	return tduo
}

// SetNillableShort sets the "short" field if the given value is not nil.
func (tduo *TradeDateUpdateOne) SetNillableShort(s *string) *TradeDateUpdateOne {
	if s != nil {
		tduo.SetShort(*s)
	}
	return tduo
}

// SetStock sets the "stock" edge to the Stock entity.
func (tduo *TradeDateUpdateOne) SetStock(s *Stock) *TradeDateUpdateOne {
	return tduo.SetStockID(s.ID)
}

// Mutation returns the TradeDateMutation object of the builder.
func (tduo *TradeDateUpdateOne) Mutation() *TradeDateMutation {
	return tduo.mutation
}

// ClearStock clears the "stock" edge to the Stock entity.
func (tduo *TradeDateUpdateOne) ClearStock() *TradeDateUpdateOne {
	tduo.mutation.ClearStock()
	return tduo
}

// Where appends a list predicates to the TradeDateUpdate builder.
func (tduo *TradeDateUpdateOne) Where(ps ...predicate.TradeDate) *TradeDateUpdateOne {
	tduo.mutation.Where(ps...)
	return tduo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tduo *TradeDateUpdateOne) Select(field string, fields ...string) *TradeDateUpdateOne {
	tduo.fields = append([]string{field}, fields...)
	return tduo
}

// Save executes the query and returns the updated TradeDate entity.
func (tduo *TradeDateUpdateOne) Save(ctx context.Context) (*TradeDate, error) {
	return withHooks(ctx, tduo.sqlSave, tduo.mutation, tduo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tduo *TradeDateUpdateOne) SaveX(ctx context.Context) *TradeDate {
	node, err := tduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tduo *TradeDateUpdateOne) Exec(ctx context.Context) error {
	_, err := tduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tduo *TradeDateUpdateOne) ExecX(ctx context.Context) {
	if err := tduo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tduo *TradeDateUpdateOne) check() error {
	if v, ok := tduo.mutation.StockID(); ok {
		if err := tradedate.StockIDValidator(v); err != nil {
			return &ValidationError{Name: "stock_id", err: fmt.Errorf(`ent: validator failed for field "TradeDate.stock_id": %w`, err)}
		}
	}
	if v, ok := tduo.mutation.TDate(); ok {
		if err := tradedate.TDateValidator(v); err != nil {
			return &ValidationError{Name: "t_date", err: fmt.Errorf(`ent: validator failed for field "TradeDate.t_date": %w`, err)}
		}
	}
	if v, ok := tduo.mutation.UpdateAt(); ok {
		if err := tradedate.UpdateAtValidator(v); err != nil {
			return &ValidationError{Name: "update_at", err: fmt.Errorf(`ent: validator failed for field "TradeDate.update_at": %w`, err)}
		}
	}
	if v, ok := tduo.mutation.XueqiuCommentCount(); ok {
		if err := tradedate.XueqiuCommentCountValidator(v); err != nil {
			return &ValidationError{Name: "xueqiu_comment_count", err: fmt.Errorf(`ent: validator failed for field "TradeDate.xueqiu_comment_count": %w`, err)}
		}
	}
	return nil
}

func (tduo *TradeDateUpdateOne) sqlSave(ctx context.Context) (_node *TradeDate, err error) {
	if err := tduo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(tradedate.Table, tradedate.Columns, sqlgraph.NewFieldSpec(tradedate.FieldID, field.TypeUint64))
	id, ok := tduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "TradeDate.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tduo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, tradedate.FieldID)
		for _, f := range fields {
			if !tradedate.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != tradedate.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tduo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tduo.mutation.TDate(); ok {
		_spec.SetField(tradedate.FieldTDate, field.TypeString, value)
	}
	if value, ok := tduo.mutation.Close(); ok {
		_spec.SetField(tradedate.FieldClose, field.TypeFloat64, value)
	}
	if value, ok := tduo.mutation.AddedClose(); ok {
		_spec.AddField(tradedate.FieldClose, field.TypeFloat64, value)
	}
	if value, ok := tduo.mutation.Volume(); ok {
		_spec.SetField(tradedate.FieldVolume, field.TypeFloat64, value)
	}
	if value, ok := tduo.mutation.AddedVolume(); ok {
		_spec.AddField(tradedate.FieldVolume, field.TypeFloat64, value)
	}
	if value, ok := tduo.mutation.UpdateAt(); ok {
		_spec.SetField(tradedate.FieldUpdateAt, field.TypeInt64, value)
	}
	if value, ok := tduo.mutation.AddedUpdateAt(); ok {
		_spec.AddField(tradedate.FieldUpdateAt, field.TypeInt64, value)
	}
	if value, ok := tduo.mutation.XueqiuCommentCount(); ok {
		_spec.SetField(tradedate.FieldXueqiuCommentCount, field.TypeInt64, value)
	}
	if value, ok := tduo.mutation.AddedXueqiuCommentCount(); ok {
		_spec.AddField(tradedate.FieldXueqiuCommentCount, field.TypeInt64, value)
	}
	if value, ok := tduo.mutation.Open(); ok {
		_spec.SetField(tradedate.FieldOpen, field.TypeFloat64, value)
	}
	if value, ok := tduo.mutation.AddedOpen(); ok {
		_spec.AddField(tradedate.FieldOpen, field.TypeFloat64, value)
	}
	if value, ok := tduo.mutation.Max(); ok {
		_spec.SetField(tradedate.FieldMax, field.TypeFloat64, value)
	}
	if value, ok := tduo.mutation.AddedMax(); ok {
		_spec.AddField(tradedate.FieldMax, field.TypeFloat64, value)
	}
	if value, ok := tduo.mutation.Min(); ok {
		_spec.SetField(tradedate.FieldMin, field.TypeFloat64, value)
	}
	if value, ok := tduo.mutation.AddedMin(); ok {
		_spec.AddField(tradedate.FieldMin, field.TypeFloat64, value)
	}
	if value, ok := tduo.mutation.Bull(); ok {
		_spec.SetField(tradedate.FieldBull, field.TypeInt, value)
	}
	if value, ok := tduo.mutation.AddedBull(); ok {
		_spec.AddField(tradedate.FieldBull, field.TypeInt, value)
	}
	if value, ok := tduo.mutation.Short(); ok {
		_spec.SetField(tradedate.FieldShort, field.TypeString, value)
	}
	if tduo.mutation.StockCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tradedate.StockTable,
			Columns: []string{tradedate.StockColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(stock.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tduo.mutation.StockIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tradedate.StockTable,
			Columns: []string{tradedate.StockColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(stock.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &TradeDate{config: tduo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tradedate.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tduo.mutation.done = true
	return _node, nil
}
