// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.22.4
// source: stock_service.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StockServiceClient is the client API for StockService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StockServiceClient interface {
	SubscribeStock(ctx context.Context, in *SubscribeStockRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UnSubscribeStock(ctx context.Context, in *UnSubscribeStockRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SubscribedStocks(ctx context.Context, in *SubscribeStocksRequest, opts ...grpc.CallOption) (*SubscribeStocksResponse, error)
	SearchStock(ctx context.Context, in *SearchStockRequest, opts ...grpc.CallOption) (*SearchStockResponse, error)
	StockTradeData(ctx context.Context, in *StockTradeDataRequest, opts ...grpc.CallOption) (*StockTradeDataResponse, error)
	HotStocks(ctx context.Context, in *HotStocksRequest, opts ...grpc.CallOption) (*HotStocksResponse, error)
}

type stockServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStockServiceClient(cc grpc.ClientConnInterface) StockServiceClient {
	return &stockServiceClient{cc}
}

func (c *stockServiceClient) SubscribeStock(ctx context.Context, in *SubscribeStockRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/stock.StockService/SubscribeStock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockServiceClient) UnSubscribeStock(ctx context.Context, in *UnSubscribeStockRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/stock.StockService/UnSubscribeStock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockServiceClient) SubscribedStocks(ctx context.Context, in *SubscribeStocksRequest, opts ...grpc.CallOption) (*SubscribeStocksResponse, error) {
	out := new(SubscribeStocksResponse)
	err := c.cc.Invoke(ctx, "/stock.StockService/SubscribedStocks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockServiceClient) SearchStock(ctx context.Context, in *SearchStockRequest, opts ...grpc.CallOption) (*SearchStockResponse, error) {
	out := new(SearchStockResponse)
	err := c.cc.Invoke(ctx, "/stock.StockService/SearchStock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockServiceClient) StockTradeData(ctx context.Context, in *StockTradeDataRequest, opts ...grpc.CallOption) (*StockTradeDataResponse, error) {
	out := new(StockTradeDataResponse)
	err := c.cc.Invoke(ctx, "/stock.StockService/StockTradeData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockServiceClient) HotStocks(ctx context.Context, in *HotStocksRequest, opts ...grpc.CallOption) (*HotStocksResponse, error) {
	out := new(HotStocksResponse)
	err := c.cc.Invoke(ctx, "/stock.StockService/HotStocks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StockServiceServer is the server API for StockService service.
// All implementations must embed UnimplementedStockServiceServer
// for forward compatibility
type StockServiceServer interface {
	SubscribeStock(context.Context, *SubscribeStockRequest) (*emptypb.Empty, error)
	UnSubscribeStock(context.Context, *UnSubscribeStockRequest) (*emptypb.Empty, error)
	SubscribedStocks(context.Context, *SubscribeStocksRequest) (*SubscribeStocksResponse, error)
	SearchStock(context.Context, *SearchStockRequest) (*SearchStockResponse, error)
	StockTradeData(context.Context, *StockTradeDataRequest) (*StockTradeDataResponse, error)
	HotStocks(context.Context, *HotStocksRequest) (*HotStocksResponse, error)
	mustEmbedUnimplementedStockServiceServer()
}

// UnimplementedStockServiceServer must be embedded to have forward compatible implementations.
type UnimplementedStockServiceServer struct {
}

func (UnimplementedStockServiceServer) SubscribeStock(context.Context, *SubscribeStockRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubscribeStock not implemented")
}
func (UnimplementedStockServiceServer) UnSubscribeStock(context.Context, *UnSubscribeStockRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnSubscribeStock not implemented")
}
func (UnimplementedStockServiceServer) SubscribedStocks(context.Context, *SubscribeStocksRequest) (*SubscribeStocksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubscribedStocks not implemented")
}
func (UnimplementedStockServiceServer) SearchStock(context.Context, *SearchStockRequest) (*SearchStockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchStock not implemented")
}
func (UnimplementedStockServiceServer) StockTradeData(context.Context, *StockTradeDataRequest) (*StockTradeDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StockTradeData not implemented")
}
func (UnimplementedStockServiceServer) HotStocks(context.Context, *HotStocksRequest) (*HotStocksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HotStocks not implemented")
}
func (UnimplementedStockServiceServer) mustEmbedUnimplementedStockServiceServer() {}

// UnsafeStockServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StockServiceServer will
// result in compilation errors.
type UnsafeStockServiceServer interface {
	mustEmbedUnimplementedStockServiceServer()
}

func RegisterStockServiceServer(s grpc.ServiceRegistrar, srv StockServiceServer) {
	s.RegisterService(&StockService_ServiceDesc, srv)
}

func _StockService_SubscribeStock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubscribeStockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StockServiceServer).SubscribeStock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stock.StockService/SubscribeStock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StockServiceServer).SubscribeStock(ctx, req.(*SubscribeStockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StockService_UnSubscribeStock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnSubscribeStockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StockServiceServer).UnSubscribeStock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stock.StockService/UnSubscribeStock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StockServiceServer).UnSubscribeStock(ctx, req.(*UnSubscribeStockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StockService_SubscribedStocks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubscribeStocksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StockServiceServer).SubscribedStocks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stock.StockService/SubscribedStocks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StockServiceServer).SubscribedStocks(ctx, req.(*SubscribeStocksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StockService_SearchStock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchStockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StockServiceServer).SearchStock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stock.StockService/SearchStock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StockServiceServer).SearchStock(ctx, req.(*SearchStockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StockService_StockTradeData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StockTradeDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StockServiceServer).StockTradeData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stock.StockService/StockTradeData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StockServiceServer).StockTradeData(ctx, req.(*StockTradeDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StockService_HotStocks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HotStocksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StockServiceServer).HotStocks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stock.StockService/HotStocks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StockServiceServer).HotStocks(ctx, req.(*HotStocksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StockService_ServiceDesc is the grpc.ServiceDesc for StockService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StockService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "stock.StockService",
	HandlerType: (*StockServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SubscribeStock",
			Handler:    _StockService_SubscribeStock_Handler,
		},
		{
			MethodName: "UnSubscribeStock",
			Handler:    _StockService_UnSubscribeStock_Handler,
		},
		{
			MethodName: "SubscribedStocks",
			Handler:    _StockService_SubscribedStocks_Handler,
		},
		{
			MethodName: "SearchStock",
			Handler:    _StockService_SearchStock_Handler,
		},
		{
			MethodName: "StockTradeData",
			Handler:    _StockService_StockTradeData_Handler,
		},
		{
			MethodName: "HotStocks",
			Handler:    _StockService_HotStocks_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "stock_service.proto",
}
