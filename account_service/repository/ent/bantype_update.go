// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"cw_account_service/repository/ent/bantype"
	"cw_account_service/repository/ent/predicate"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// BanTypeUpdate is the builder for updating BanType entities.
type BanTypeUpdate struct {
	config
	hooks    []Hook
	mutation *BanTypeMutation
}

// Where appends a list predicates to the BanTypeUpdate builder.
func (btu *BanTypeUpdate) Where(ps ...predicate.BanType) *BanTypeUpdate {
	btu.mutation.Where(ps...)
	return btu
}

// SetContent sets the "content" field.
func (btu *BanTypeUpdate) SetContent(s string) *BanTypeUpdate {
	btu.mutation.SetContent(s)
	return btu
}

// Mutation returns the BanTypeMutation object of the builder.
func (btu *BanTypeUpdate) Mutation() *BanTypeMutation {
	return btu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (btu *BanTypeUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(btu.hooks) == 0 {
		if err = btu.check(); err != nil {
			return 0, err
		}
		affected, err = btu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*BanTypeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = btu.check(); err != nil {
				return 0, err
			}
			btu.mutation = mutation
			affected, err = btu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(btu.hooks) - 1; i >= 0; i-- {
			if btu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = btu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, btu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (btu *BanTypeUpdate) SaveX(ctx context.Context) int {
	affected, err := btu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (btu *BanTypeUpdate) Exec(ctx context.Context) error {
	_, err := btu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (btu *BanTypeUpdate) ExecX(ctx context.Context) {
	if err := btu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (btu *BanTypeUpdate) check() error {
	if v, ok := btu.mutation.Content(); ok {
		if err := bantype.ContentValidator(v); err != nil {
			return &ValidationError{Name: "content", err: fmt.Errorf("ent: validator failed for field \"content\": %w", err)}
		}
	}
	return nil
}

func (btu *BanTypeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   bantype.Table,
			Columns: bantype.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: bantype.FieldID,
			},
		},
	}
	if ps := btu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := btu.mutation.Content(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: bantype.FieldContent,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, btu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{bantype.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// BanTypeUpdateOne is the builder for updating a single BanType entity.
type BanTypeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *BanTypeMutation
}

// SetContent sets the "content" field.
func (btuo *BanTypeUpdateOne) SetContent(s string) *BanTypeUpdateOne {
	btuo.mutation.SetContent(s)
	return btuo
}

// Mutation returns the BanTypeMutation object of the builder.
func (btuo *BanTypeUpdateOne) Mutation() *BanTypeMutation {
	return btuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (btuo *BanTypeUpdateOne) Select(field string, fields ...string) *BanTypeUpdateOne {
	btuo.fields = append([]string{field}, fields...)
	return btuo
}

// Save executes the query and returns the updated BanType entity.
func (btuo *BanTypeUpdateOne) Save(ctx context.Context) (*BanType, error) {
	var (
		err  error
		node *BanType
	)
	if len(btuo.hooks) == 0 {
		if err = btuo.check(); err != nil {
			return nil, err
		}
		node, err = btuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*BanTypeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = btuo.check(); err != nil {
				return nil, err
			}
			btuo.mutation = mutation
			node, err = btuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(btuo.hooks) - 1; i >= 0; i-- {
			if btuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = btuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, btuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (btuo *BanTypeUpdateOne) SaveX(ctx context.Context) *BanType {
	node, err := btuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (btuo *BanTypeUpdateOne) Exec(ctx context.Context) error {
	_, err := btuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (btuo *BanTypeUpdateOne) ExecX(ctx context.Context) {
	if err := btuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (btuo *BanTypeUpdateOne) check() error {
	if v, ok := btuo.mutation.Content(); ok {
		if err := bantype.ContentValidator(v); err != nil {
			return &ValidationError{Name: "content", err: fmt.Errorf("ent: validator failed for field \"content\": %w", err)}
		}
	}
	return nil
}

func (btuo *BanTypeUpdateOne) sqlSave(ctx context.Context) (_node *BanType, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   bantype.Table,
			Columns: bantype.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: bantype.FieldID,
			},
		},
	}
	id, ok := btuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing BanType.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := btuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, bantype.FieldID)
		for _, f := range fields {
			if !bantype.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != bantype.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := btuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := btuo.mutation.Content(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: bantype.FieldContent,
		})
	}
	_node = &BanType{config: btuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, btuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{bantype.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
