// Code generated by entc, DO NOT EDIT.

package ent

import (
	"cw_account_service/repository/ent/avatar"
	"cw_account_service/repository/ent/bantype"
	"cw_account_service/repository/ent/schema"
	"cw_account_service/repository/ent/user"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	avatarFields := schema.Avatar{}.Fields()
	_ = avatarFields
	// avatarDescURL is the schema descriptor for url field.
	avatarDescURL := avatarFields[1].Descriptor()
	// avatar.URLValidator is a validator for the "url" field. It is called by the builders before save.
	avatar.URLValidator = avatarDescURL.Validators[0].(func(string) error)
	// avatarDescStatus is the schema descriptor for status field.
	avatarDescStatus := avatarFields[2].Descriptor()
	// avatar.DefaultStatus holds the default value on creation for the status field.
	avatar.DefaultStatus = avatarDescStatus.Default.(int8)
	// avatar.StatusValidator is a validator for the "status" field. It is called by the builders before save.
	avatar.StatusValidator = avatarDescStatus.Validators[0].(func(int8) error)
	// avatarDescID is the schema descriptor for id field.
	avatarDescID := avatarFields[0].Descriptor()
	// avatar.IDValidator is a validator for the "id" field. It is called by the builders before save.
	avatar.IDValidator = avatarDescID.Validators[0].(func(uint64) error)
	bantypeFields := schema.BanType{}.Fields()
	_ = bantypeFields
	// bantypeDescContent is the schema descriptor for content field.
	bantypeDescContent := bantypeFields[1].Descriptor()
	// bantype.ContentValidator is a validator for the "content" field. It is called by the builders before save.
	bantype.ContentValidator = bantypeDescContent.Validators[0].(func(string) error)
	// bantypeDescID is the schema descriptor for id field.
	bantypeDescID := bantypeFields[0].Descriptor()
	// bantype.IDValidator is a validator for the "id" field. It is called by the builders before save.
	bantype.IDValidator = bantypeDescID.Validators[0].(func(uint64) error)
	userFields := schema.User{}.Fields()
	_ = userFields
	// userDescNickName is the schema descriptor for nick_name field.
	userDescNickName := userFields[1].Descriptor()
	// user.NickNameValidator is a validator for the "nick_name" field. It is called by the builders before save.
	user.NickNameValidator = userDescNickName.Validators[0].(func(string) error)
	// userDescPassword is the schema descriptor for password field.
	userDescPassword := userFields[2].Descriptor()
	// user.PasswordValidator is a validator for the "password" field. It is called by the builders before save.
	user.PasswordValidator = userDescPassword.Validators[0].(func(string) error)
	// userDescAvatar is the schema descriptor for avatar field.
	userDescAvatar := userFields[3].Descriptor()
	// user.AvatarValidator is a validator for the "avatar" field. It is called by the builders before save.
	user.AvatarValidator = userDescAvatar.Validators[0].(func(string) error)
	// userDescStatus is the schema descriptor for status field.
	userDescStatus := userFields[4].Descriptor()
	// user.DefaultStatus holds the default value on creation for the status field.
	user.DefaultStatus = userDescStatus.Default.(int8)
	// user.StatusValidator is a validator for the "status" field. It is called by the builders before save.
	user.StatusValidator = userDescStatus.Validators[0].(func(int8) error)
	// userDescScore is the schema descriptor for score field.
	userDescScore := userFields[5].Descriptor()
	// user.DefaultScore holds the default value on creation for the score field.
	user.DefaultScore = userDescScore.Default.(int64)
	// user.ScoreValidator is a validator for the "score" field. It is called by the builders before save.
	user.ScoreValidator = userDescScore.Validators[0].(func(int64) error)
	// userDescRole is the schema descriptor for role field.
	userDescRole := userFields[6].Descriptor()
	// user.DefaultRole holds the default value on creation for the role field.
	user.DefaultRole = userDescRole.Default.(int8)
	// user.RoleValidator is a validator for the "role" field. It is called by the builders before save.
	user.RoleValidator = userDescRole.Validators[0].(func(int8) error)
	// userDescCreateAt is the schema descriptor for create_at field.
	userDescCreateAt := userFields[7].Descriptor()
	// user.DefaultCreateAt holds the default value on creation for the create_at field.
	user.DefaultCreateAt = userDescCreateAt.Default.(int64)
	// user.CreateAtValidator is a validator for the "create_at" field. It is called by the builders before save.
	user.CreateAtValidator = userDescCreateAt.Validators[0].(func(int64) error)
	// userDescUpdateAt is the schema descriptor for update_at field.
	userDescUpdateAt := userFields[8].Descriptor()
	// user.DefaultUpdateAt holds the default value on creation for the update_at field.
	user.DefaultUpdateAt = userDescUpdateAt.Default.(int64)
	// user.UpdateAtValidator is a validator for the "update_at" field. It is called by the builders before save.
	user.UpdateAtValidator = userDescUpdateAt.Validators[0].(func(int64) error)
	// userDescID is the schema descriptor for id field.
	userDescID := userFields[0].Descriptor()
	// user.IDValidator is a validator for the "id" field. It is called by the builders before save.
	user.IDValidator = userDescID.Validators[0].(func(uint64) error)
}
