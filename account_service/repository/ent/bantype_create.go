// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"cw_account_service/repository/ent/bantype"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// BanTypeCreate is the builder for creating a BanType entity.
type BanTypeCreate struct {
	config
	mutation *BanTypeMutation
	hooks    []Hook
}

// SetContent sets the "content" field.
func (btc *BanTypeCreate) SetContent(s string) *BanTypeCreate {
	btc.mutation.SetContent(s)
	return btc
}

// SetID sets the "id" field.
func (btc *BanTypeCreate) SetID(u uint64) *BanTypeCreate {
	btc.mutation.SetID(u)
	return btc
}

// Mutation returns the BanTypeMutation object of the builder.
func (btc *BanTypeCreate) Mutation() *BanTypeMutation {
	return btc.mutation
}

// Save creates the BanType in the database.
func (btc *BanTypeCreate) Save(ctx context.Context) (*BanType, error) {
	var (
		err  error
		node *BanType
	)
	if len(btc.hooks) == 0 {
		if err = btc.check(); err != nil {
			return nil, err
		}
		node, err = btc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*BanTypeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = btc.check(); err != nil {
				return nil, err
			}
			btc.mutation = mutation
			if node, err = btc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(btc.hooks) - 1; i >= 0; i-- {
			if btc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = btc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, btc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (btc *BanTypeCreate) SaveX(ctx context.Context) *BanType {
	v, err := btc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (btc *BanTypeCreate) Exec(ctx context.Context) error {
	_, err := btc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (btc *BanTypeCreate) ExecX(ctx context.Context) {
	if err := btc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (btc *BanTypeCreate) check() error {
	if _, ok := btc.mutation.Content(); !ok {
		return &ValidationError{Name: "content", err: errors.New(`ent: missing required field "content"`)}
	}
	if v, ok := btc.mutation.Content(); ok {
		if err := bantype.ContentValidator(v); err != nil {
			return &ValidationError{Name: "content", err: fmt.Errorf(`ent: validator failed for field "content": %w`, err)}
		}
	}
	if v, ok := btc.mutation.ID(); ok {
		if err := bantype.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "id": %w`, err)}
		}
	}
	return nil
}

func (btc *BanTypeCreate) sqlSave(ctx context.Context) (*BanType, error) {
	_node, _spec := btc.createSpec()
	if err := sqlgraph.CreateNode(ctx, btc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint64(id)
	}
	return _node, nil
}

func (btc *BanTypeCreate) createSpec() (*BanType, *sqlgraph.CreateSpec) {
	var (
		_node = &BanType{config: btc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: bantype.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: bantype.FieldID,
			},
		}
	)
	if id, ok := btc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := btc.mutation.Content(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: bantype.FieldContent,
		})
		_node.Content = value
	}
	return _node, _spec
}

// BanTypeCreateBulk is the builder for creating many BanType entities in bulk.
type BanTypeCreateBulk struct {
	config
	builders []*BanTypeCreate
}

// Save creates the BanType entities in the database.
func (btcb *BanTypeCreateBulk) Save(ctx context.Context) ([]*BanType, error) {
	specs := make([]*sqlgraph.CreateSpec, len(btcb.builders))
	nodes := make([]*BanType, len(btcb.builders))
	mutators := make([]Mutator, len(btcb.builders))
	for i := range btcb.builders {
		func(i int, root context.Context) {
			builder := btcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BanTypeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, btcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, btcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, btcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (btcb *BanTypeCreateBulk) SaveX(ctx context.Context) []*BanType {
	v, err := btcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (btcb *BanTypeCreateBulk) Exec(ctx context.Context) error {
	_, err := btcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (btcb *BanTypeCreateBulk) ExecX(ctx context.Context) {
	if err := btcb.Exec(ctx); err != nil {
		panic(err)
	}
}
