// Code generated by entc, DO NOT EDIT.

package post

const (
	// Label holds the string label denoting the post type in the database.
	Label = "post"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldTopic holds the string denoting the topic field in the database.
	FieldTopic = "topic"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldReplyNum holds the string denoting the reply_num field in the database.
	FieldReplyNum = "reply_num"
	// FieldCreateAt holds the string denoting the create_at field in the database.
	FieldCreateAt = "create_at"
	// FieldUpdateAt holds the string denoting the update_at field in the database.
	FieldUpdateAt = "update_at"
	// EdgeComments holds the string denoting the comments edge name in mutations.
	EdgeComments = "comments"
	// Table holds the table name of the post in the database.
	Table = "post"
	// CommentsTable is the table that holds the comments relation/edge.
	CommentsTable = "comment"
	// CommentsInverseTable is the table name for the Comment entity.
	// It exists in this package in order to avoid circular dependency with the "comment" package.
	CommentsInverseTable = "comment"
	// CommentsColumn is the table column denoting the comments relation/edge.
	CommentsColumn = "post_id"
)

// Columns holds all SQL columns for post fields.
var Columns = []string{
	FieldID,
	FieldUserID,
	FieldTopic,
	FieldStatus,
	FieldReplyNum,
	FieldCreateAt,
	FieldUpdateAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// UserIDValidator is a validator for the "user_id" field. It is called by the builders before save.
	UserIDValidator func(int64) error
	// TopicValidator is a validator for the "topic" field. It is called by the builders before save.
	TopicValidator func(string) error
	// DefaultStatus holds the default value on creation for the "status" field.
	DefaultStatus int8
	// StatusValidator is a validator for the "status" field. It is called by the builders before save.
	StatusValidator func(int8) error
	// DefaultReplyNum holds the default value on creation for the "reply_num" field.
	DefaultReplyNum int64
	// ReplyNumValidator is a validator for the "reply_num" field. It is called by the builders before save.
	ReplyNumValidator func(int64) error
	// DefaultCreateAt holds the default value on creation for the "create_at" field.
	DefaultCreateAt int64
	// CreateAtValidator is a validator for the "create_at" field. It is called by the builders before save.
	CreateAtValidator func(int64) error
	// DefaultUpdateAt holds the default value on creation for the "update_at" field.
	DefaultUpdateAt int64
	// UpdateAtValidator is a validator for the "update_at" field. It is called by the builders before save.
	UpdateAtValidator func(int64) error
	// IDValidator is a validator for the "id" field. It is called by the builders before save.
	IDValidator func(int64) error
)
