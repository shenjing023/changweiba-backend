// Code generated by ent, DO NOT EDIT.

package ent

import (
	"cw_post_service/repository/ent/comment"
	"cw_post_service/repository/ent/reply"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Reply is the model entity for the Reply schema.
type Reply struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// The user that posted the message.
	UserID uint64 `json:"user_id,omitempty"`
	// The comment that this reply is for.
	CommentID uint64 `json:"comment_id,omitempty"`
	// 回复哪个回复的id
	ParentID uint64 `json:"parent_id,omitempty"`
	// The content of the message.
	Content string `json:"content,omitempty"`
	// 状态,是否被封，0：正常，大于0被封
	Status int8 `json:"status,omitempty"`
	// 第几楼
	Floor uint64 `json:"floor,omitempty"`
	// 创建时间
	CreateAt int64 `json:"create_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ReplyQuery when eager-loading is set.
	Edges        ReplyEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ReplyEdges holds the relations/edges for other nodes in the graph.
type ReplyEdges struct {
	// Owner holds the value of the owner edge.
	Owner *Comment `json:"owner,omitempty"`
	// Parent holds the value of the parent edge.
	Parent *Reply `json:"parent,omitempty"`
	// Children holds the value of the children edge.
	Children []*Reply `json:"children,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// OwnerOrErr returns the Owner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ReplyEdges) OwnerOrErr() (*Comment, error) {
	if e.loadedTypes[0] {
		if e.Owner == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: comment.Label}
		}
		return e.Owner, nil
	}
	return nil, &NotLoadedError{edge: "owner"}
}

// ParentOrErr returns the Parent value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ReplyEdges) ParentOrErr() (*Reply, error) {
	if e.loadedTypes[1] {
		if e.Parent == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: reply.Label}
		}
		return e.Parent, nil
	}
	return nil, &NotLoadedError{edge: "parent"}
}

// ChildrenOrErr returns the Children value or an error if the edge
// was not loaded in eager-loading.
func (e ReplyEdges) ChildrenOrErr() ([]*Reply, error) {
	if e.loadedTypes[2] {
		return e.Children, nil
	}
	return nil, &NotLoadedError{edge: "children"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Reply) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case reply.FieldID, reply.FieldUserID, reply.FieldCommentID, reply.FieldParentID, reply.FieldStatus, reply.FieldFloor, reply.FieldCreateAt:
			values[i] = new(sql.NullInt64)
		case reply.FieldContent:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Reply fields.
func (r *Reply) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case reply.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			r.ID = uint64(value.Int64)
		case reply.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				r.UserID = uint64(value.Int64)
			}
		case reply.FieldCommentID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field comment_id", values[i])
			} else if value.Valid {
				r.CommentID = uint64(value.Int64)
			}
		case reply.FieldParentID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field parent_id", values[i])
			} else if value.Valid {
				r.ParentID = uint64(value.Int64)
			}
		case reply.FieldContent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field content", values[i])
			} else if value.Valid {
				r.Content = value.String
			}
		case reply.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				r.Status = int8(value.Int64)
			}
		case reply.FieldFloor:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field floor", values[i])
			} else if value.Valid {
				r.Floor = uint64(value.Int64)
			}
		case reply.FieldCreateAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field create_at", values[i])
			} else if value.Valid {
				r.CreateAt = value.Int64
			}
		default:
			r.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Reply.
// This includes values selected through modifiers, order, etc.
func (r *Reply) Value(name string) (ent.Value, error) {
	return r.selectValues.Get(name)
}

// QueryOwner queries the "owner" edge of the Reply entity.
func (r *Reply) QueryOwner() *CommentQuery {
	return NewReplyClient(r.config).QueryOwner(r)
}

// QueryParent queries the "parent" edge of the Reply entity.
func (r *Reply) QueryParent() *ReplyQuery {
	return NewReplyClient(r.config).QueryParent(r)
}

// QueryChildren queries the "children" edge of the Reply entity.
func (r *Reply) QueryChildren() *ReplyQuery {
	return NewReplyClient(r.config).QueryChildren(r)
}

// Update returns a builder for updating this Reply.
// Note that you need to call Reply.Unwrap() before calling this method if this Reply
// was returned from a transaction, and the transaction was committed or rolled back.
func (r *Reply) Update() *ReplyUpdateOne {
	return NewReplyClient(r.config).UpdateOne(r)
}

// Unwrap unwraps the Reply entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (r *Reply) Unwrap() *Reply {
	_tx, ok := r.config.driver.(*txDriver)
	if !ok {
		panic("ent: Reply is not a transactional entity")
	}
	r.config.driver = _tx.drv
	return r
}

// String implements the fmt.Stringer.
func (r *Reply) String() string {
	var builder strings.Builder
	builder.WriteString("Reply(")
	builder.WriteString(fmt.Sprintf("id=%v, ", r.ID))
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", r.UserID))
	builder.WriteString(", ")
	builder.WriteString("comment_id=")
	builder.WriteString(fmt.Sprintf("%v", r.CommentID))
	builder.WriteString(", ")
	builder.WriteString("parent_id=")
	builder.WriteString(fmt.Sprintf("%v", r.ParentID))
	builder.WriteString(", ")
	builder.WriteString("content=")
	builder.WriteString(r.Content)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", r.Status))
	builder.WriteString(", ")
	builder.WriteString("floor=")
	builder.WriteString(fmt.Sprintf("%v", r.Floor))
	builder.WriteString(", ")
	builder.WriteString("create_at=")
	builder.WriteString(fmt.Sprintf("%v", r.CreateAt))
	builder.WriteByte(')')
	return builder.String()
}

// Replies is a parsable slice of Reply.
type Replies []*Reply
