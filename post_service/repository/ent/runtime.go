// Code generated by entc, DO NOT EDIT.

package ent

import (
	"cw_post_service/repository/ent/comment"
	"cw_post_service/repository/ent/post"
	"cw_post_service/repository/ent/schema"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	commentFields := schema.Comment{}.Fields()
	_ = commentFields
	// commentDescUserID is the schema descriptor for user_id field.
	commentDescUserID := commentFields[1].Descriptor()
	// comment.UserIDValidator is a validator for the "user_id" field. It is called by the builders before save.
	comment.UserIDValidator = commentDescUserID.Validators[0].(func(int64) error)
	// commentDescPostID is the schema descriptor for post_id field.
	commentDescPostID := commentFields[2].Descriptor()
	// comment.PostIDValidator is a validator for the "post_id" field. It is called by the builders before save.
	comment.PostIDValidator = commentDescPostID.Validators[0].(func(int64) error)
	// commentDescContent is the schema descriptor for content field.
	commentDescContent := commentFields[3].Descriptor()
	// comment.ContentValidator is a validator for the "content" field. It is called by the builders before save.
	comment.ContentValidator = commentDescContent.Validators[0].(func(string) error)
	// commentDescStatus is the schema descriptor for status field.
	commentDescStatus := commentFields[4].Descriptor()
	// comment.DefaultStatus holds the default value on creation for the status field.
	comment.DefaultStatus = commentDescStatus.Default.(int8)
	// comment.StatusValidator is a validator for the "status" field. It is called by the builders before save.
	comment.StatusValidator = commentDescStatus.Validators[0].(func(int8) error)
	// commentDescFloor is the schema descriptor for floor field.
	commentDescFloor := commentFields[5].Descriptor()
	// comment.DefaultFloor holds the default value on creation for the floor field.
	comment.DefaultFloor = commentDescFloor.Default.(int64)
	// comment.FloorValidator is a validator for the "floor" field. It is called by the builders before save.
	comment.FloorValidator = commentDescFloor.Validators[0].(func(int64) error)
	// commentDescCreateAt is the schema descriptor for create_at field.
	commentDescCreateAt := commentFields[6].Descriptor()
	// comment.DefaultCreateAt holds the default value on creation for the create_at field.
	comment.DefaultCreateAt = commentDescCreateAt.Default.(int64)
	// comment.CreateAtValidator is a validator for the "create_at" field. It is called by the builders before save.
	comment.CreateAtValidator = commentDescCreateAt.Validators[0].(func(int64) error)
	// commentDescID is the schema descriptor for id field.
	commentDescID := commentFields[0].Descriptor()
	// comment.IDValidator is a validator for the "id" field. It is called by the builders before save.
	comment.IDValidator = commentDescID.Validators[0].(func(int64) error)
	postFields := schema.Post{}.Fields()
	_ = postFields
	// postDescUserID is the schema descriptor for user_id field.
	postDescUserID := postFields[1].Descriptor()
	// post.UserIDValidator is a validator for the "user_id" field. It is called by the builders before save.
	post.UserIDValidator = postDescUserID.Validators[0].(func(int64) error)
	// postDescTopic is the schema descriptor for topic field.
	postDescTopic := postFields[2].Descriptor()
	// post.TopicValidator is a validator for the "topic" field. It is called by the builders before save.
	post.TopicValidator = postDescTopic.Validators[0].(func(string) error)
	// postDescStatus is the schema descriptor for status field.
	postDescStatus := postFields[3].Descriptor()
	// post.DefaultStatus holds the default value on creation for the status field.
	post.DefaultStatus = postDescStatus.Default.(int8)
	// post.StatusValidator is a validator for the "status" field. It is called by the builders before save.
	post.StatusValidator = postDescStatus.Validators[0].(func(int8) error)
	// postDescReplyNum is the schema descriptor for reply_num field.
	postDescReplyNum := postFields[4].Descriptor()
	// post.DefaultReplyNum holds the default value on creation for the reply_num field.
	post.DefaultReplyNum = postDescReplyNum.Default.(int64)
	// post.ReplyNumValidator is a validator for the "reply_num" field. It is called by the builders before save.
	post.ReplyNumValidator = postDescReplyNum.Validators[0].(func(int64) error)
	// postDescCreateAt is the schema descriptor for create_at field.
	postDescCreateAt := postFields[5].Descriptor()
	// post.DefaultCreateAt holds the default value on creation for the create_at field.
	post.DefaultCreateAt = postDescCreateAt.Default.(int64)
	// post.CreateAtValidator is a validator for the "create_at" field. It is called by the builders before save.
	post.CreateAtValidator = postDescCreateAt.Validators[0].(func(int64) error)
	// postDescUpdateAt is the schema descriptor for update_at field.
	postDescUpdateAt := postFields[6].Descriptor()
	// post.DefaultUpdateAt holds the default value on creation for the update_at field.
	post.DefaultUpdateAt = postDescUpdateAt.Default.(int64)
	// post.UpdateAtValidator is a validator for the "update_at" field. It is called by the builders before save.
	post.UpdateAtValidator = postDescUpdateAt.Validators[0].(func(int64) error)
	// postDescID is the schema descriptor for id field.
	postDescID := postFields[0].Descriptor()
	// post.IDValidator is a validator for the "id" field. It is called by the builders before save.
	post.IDValidator = postDescID.Validators[0].(func(int64) error)
}
