// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"cw_post_service/repository/ent/comment"
	"cw_post_service/repository/ent/predicate"
	"cw_post_service/repository/ent/reply"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ReplyUpdate is the builder for updating Reply entities.
type ReplyUpdate struct {
	config
	hooks    []Hook
	mutation *ReplyMutation
}

// Where appends a list predicates to the ReplyUpdate builder.
func (ru *ReplyUpdate) Where(ps ...predicate.Reply) *ReplyUpdate {
	ru.mutation.Where(ps...)
	return ru
}

// SetUserID sets the "user_id" field.
func (ru *ReplyUpdate) SetUserID(u uint64) *ReplyUpdate {
	ru.mutation.ResetUserID()
	ru.mutation.SetUserID(u)
	return ru
}

// AddUserID adds u to the "user_id" field.
func (ru *ReplyUpdate) AddUserID(u uint64) *ReplyUpdate {
	ru.mutation.AddUserID(u)
	return ru
}

// SetCommentID sets the "comment_id" field.
func (ru *ReplyUpdate) SetCommentID(u uint64) *ReplyUpdate {
	ru.mutation.SetCommentID(u)
	return ru
}

// SetNillableCommentID sets the "comment_id" field if the given value is not nil.
func (ru *ReplyUpdate) SetNillableCommentID(u *uint64) *ReplyUpdate {
	if u != nil {
		ru.SetCommentID(*u)
	}
	return ru
}

// ClearCommentID clears the value of the "comment_id" field.
func (ru *ReplyUpdate) ClearCommentID() *ReplyUpdate {
	ru.mutation.ClearCommentID()
	return ru
}

// SetParentID sets the "parent_id" field.
func (ru *ReplyUpdate) SetParentID(u uint64) *ReplyUpdate {
	ru.mutation.SetParentID(u)
	return ru
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (ru *ReplyUpdate) SetNillableParentID(u *uint64) *ReplyUpdate {
	if u != nil {
		ru.SetParentID(*u)
	}
	return ru
}

// ClearParentID clears the value of the "parent_id" field.
func (ru *ReplyUpdate) ClearParentID() *ReplyUpdate {
	ru.mutation.ClearParentID()
	return ru
}

// SetContent sets the "content" field.
func (ru *ReplyUpdate) SetContent(s string) *ReplyUpdate {
	ru.mutation.SetContent(s)
	return ru
}

// SetStatus sets the "status" field.
func (ru *ReplyUpdate) SetStatus(i int8) *ReplyUpdate {
	ru.mutation.ResetStatus()
	ru.mutation.SetStatus(i)
	return ru
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ru *ReplyUpdate) SetNillableStatus(i *int8) *ReplyUpdate {
	if i != nil {
		ru.SetStatus(*i)
	}
	return ru
}

// AddStatus adds i to the "status" field.
func (ru *ReplyUpdate) AddStatus(i int8) *ReplyUpdate {
	ru.mutation.AddStatus(i)
	return ru
}

// SetFloor sets the "floor" field.
func (ru *ReplyUpdate) SetFloor(u uint64) *ReplyUpdate {
	ru.mutation.ResetFloor()
	ru.mutation.SetFloor(u)
	return ru
}

// AddFloor adds u to the "floor" field.
func (ru *ReplyUpdate) AddFloor(u uint64) *ReplyUpdate {
	ru.mutation.AddFloor(u)
	return ru
}

// SetOwnerID sets the "owner" edge to the Comment entity by ID.
func (ru *ReplyUpdate) SetOwnerID(id uint64) *ReplyUpdate {
	ru.mutation.SetOwnerID(id)
	return ru
}

// SetNillableOwnerID sets the "owner" edge to the Comment entity by ID if the given value is not nil.
func (ru *ReplyUpdate) SetNillableOwnerID(id *uint64) *ReplyUpdate {
	if id != nil {
		ru = ru.SetOwnerID(*id)
	}
	return ru
}

// SetOwner sets the "owner" edge to the Comment entity.
func (ru *ReplyUpdate) SetOwner(c *Comment) *ReplyUpdate {
	return ru.SetOwnerID(c.ID)
}

// SetParent sets the "parent" edge to the Reply entity.
func (ru *ReplyUpdate) SetParent(r *Reply) *ReplyUpdate {
	return ru.SetParentID(r.ID)
}

// AddChildIDs adds the "children" edge to the Reply entity by IDs.
func (ru *ReplyUpdate) AddChildIDs(ids ...uint64) *ReplyUpdate {
	ru.mutation.AddChildIDs(ids...)
	return ru
}

// AddChildren adds the "children" edges to the Reply entity.
func (ru *ReplyUpdate) AddChildren(r ...*Reply) *ReplyUpdate {
	ids := make([]uint64, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ru.AddChildIDs(ids...)
}

// Mutation returns the ReplyMutation object of the builder.
func (ru *ReplyUpdate) Mutation() *ReplyMutation {
	return ru.mutation
}

// ClearOwner clears the "owner" edge to the Comment entity.
func (ru *ReplyUpdate) ClearOwner() *ReplyUpdate {
	ru.mutation.ClearOwner()
	return ru
}

// ClearParent clears the "parent" edge to the Reply entity.
func (ru *ReplyUpdate) ClearParent() *ReplyUpdate {
	ru.mutation.ClearParent()
	return ru
}

// ClearChildren clears all "children" edges to the Reply entity.
func (ru *ReplyUpdate) ClearChildren() *ReplyUpdate {
	ru.mutation.ClearChildren()
	return ru
}

// RemoveChildIDs removes the "children" edge to Reply entities by IDs.
func (ru *ReplyUpdate) RemoveChildIDs(ids ...uint64) *ReplyUpdate {
	ru.mutation.RemoveChildIDs(ids...)
	return ru
}

// RemoveChildren removes "children" edges to Reply entities.
func (ru *ReplyUpdate) RemoveChildren(r ...*Reply) *ReplyUpdate {
	ids := make([]uint64, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ru.RemoveChildIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ru *ReplyUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(ru.hooks) == 0 {
		if err = ru.check(); err != nil {
			return 0, err
		}
		affected, err = ru.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ReplyMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ru.check(); err != nil {
				return 0, err
			}
			ru.mutation = mutation
			affected, err = ru.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ru.hooks) - 1; i >= 0; i-- {
			if ru.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ru.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ru.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ru *ReplyUpdate) SaveX(ctx context.Context) int {
	affected, err := ru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ru *ReplyUpdate) Exec(ctx context.Context) error {
	_, err := ru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ru *ReplyUpdate) ExecX(ctx context.Context) {
	if err := ru.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ru *ReplyUpdate) check() error {
	if v, ok := ru.mutation.UserID(); ok {
		if err := reply.UserIDValidator(v); err != nil {
			return &ValidationError{Name: "user_id", err: fmt.Errorf("ent: validator failed for field \"user_id\": %w", err)}
		}
	}
	if v, ok := ru.mutation.CommentID(); ok {
		if err := reply.CommentIDValidator(v); err != nil {
			return &ValidationError{Name: "comment_id", err: fmt.Errorf("ent: validator failed for field \"comment_id\": %w", err)}
		}
	}
	if v, ok := ru.mutation.ParentID(); ok {
		if err := reply.ParentIDValidator(v); err != nil {
			return &ValidationError{Name: "parent_id", err: fmt.Errorf("ent: validator failed for field \"parent_id\": %w", err)}
		}
	}
	if v, ok := ru.mutation.Content(); ok {
		if err := reply.ContentValidator(v); err != nil {
			return &ValidationError{Name: "content", err: fmt.Errorf("ent: validator failed for field \"content\": %w", err)}
		}
	}
	if v, ok := ru.mutation.Status(); ok {
		if err := reply.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf("ent: validator failed for field \"status\": %w", err)}
		}
	}
	if v, ok := ru.mutation.Floor(); ok {
		if err := reply.FloorValidator(v); err != nil {
			return &ValidationError{Name: "floor", err: fmt.Errorf("ent: validator failed for field \"floor\": %w", err)}
		}
	}
	return nil
}

func (ru *ReplyUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   reply.Table,
			Columns: reply.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: reply.FieldID,
			},
		},
	}
	if ps := ru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ru.mutation.UserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: reply.FieldUserID,
		})
	}
	if value, ok := ru.mutation.AddedUserID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: reply.FieldUserID,
		})
	}
	if value, ok := ru.mutation.Content(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: reply.FieldContent,
		})
	}
	if value, ok := ru.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: reply.FieldStatus,
		})
	}
	if value, ok := ru.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: reply.FieldStatus,
		})
	}
	if value, ok := ru.mutation.Floor(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: reply.FieldFloor,
		})
	}
	if value, ok := ru.mutation.AddedFloor(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: reply.FieldFloor,
		})
	}
	if ru.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   reply.OwnerTable,
			Columns: []string{reply.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: comment.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   reply.OwnerTable,
			Columns: []string{reply.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: comment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   reply.ParentTable,
			Columns: []string{reply.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: reply.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   reply.ParentTable,
			Columns: []string{reply.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: reply.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   reply.ChildrenTable,
			Columns: []string{reply.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: reply.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RemovedChildrenIDs(); len(nodes) > 0 && !ru.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   reply.ChildrenTable,
			Columns: []string{reply.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: reply.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   reply.ChildrenTable,
			Columns: []string{reply.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: reply.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{reply.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// ReplyUpdateOne is the builder for updating a single Reply entity.
type ReplyUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ReplyMutation
}

// SetUserID sets the "user_id" field.
func (ruo *ReplyUpdateOne) SetUserID(u uint64) *ReplyUpdateOne {
	ruo.mutation.ResetUserID()
	ruo.mutation.SetUserID(u)
	return ruo
}

// AddUserID adds u to the "user_id" field.
func (ruo *ReplyUpdateOne) AddUserID(u uint64) *ReplyUpdateOne {
	ruo.mutation.AddUserID(u)
	return ruo
}

// SetCommentID sets the "comment_id" field.
func (ruo *ReplyUpdateOne) SetCommentID(u uint64) *ReplyUpdateOne {
	ruo.mutation.SetCommentID(u)
	return ruo
}

// SetNillableCommentID sets the "comment_id" field if the given value is not nil.
func (ruo *ReplyUpdateOne) SetNillableCommentID(u *uint64) *ReplyUpdateOne {
	if u != nil {
		ruo.SetCommentID(*u)
	}
	return ruo
}

// ClearCommentID clears the value of the "comment_id" field.
func (ruo *ReplyUpdateOne) ClearCommentID() *ReplyUpdateOne {
	ruo.mutation.ClearCommentID()
	return ruo
}

// SetParentID sets the "parent_id" field.
func (ruo *ReplyUpdateOne) SetParentID(u uint64) *ReplyUpdateOne {
	ruo.mutation.SetParentID(u)
	return ruo
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (ruo *ReplyUpdateOne) SetNillableParentID(u *uint64) *ReplyUpdateOne {
	if u != nil {
		ruo.SetParentID(*u)
	}
	return ruo
}

// ClearParentID clears the value of the "parent_id" field.
func (ruo *ReplyUpdateOne) ClearParentID() *ReplyUpdateOne {
	ruo.mutation.ClearParentID()
	return ruo
}

// SetContent sets the "content" field.
func (ruo *ReplyUpdateOne) SetContent(s string) *ReplyUpdateOne {
	ruo.mutation.SetContent(s)
	return ruo
}

// SetStatus sets the "status" field.
func (ruo *ReplyUpdateOne) SetStatus(i int8) *ReplyUpdateOne {
	ruo.mutation.ResetStatus()
	ruo.mutation.SetStatus(i)
	return ruo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ruo *ReplyUpdateOne) SetNillableStatus(i *int8) *ReplyUpdateOne {
	if i != nil {
		ruo.SetStatus(*i)
	}
	return ruo
}

// AddStatus adds i to the "status" field.
func (ruo *ReplyUpdateOne) AddStatus(i int8) *ReplyUpdateOne {
	ruo.mutation.AddStatus(i)
	return ruo
}

// SetFloor sets the "floor" field.
func (ruo *ReplyUpdateOne) SetFloor(u uint64) *ReplyUpdateOne {
	ruo.mutation.ResetFloor()
	ruo.mutation.SetFloor(u)
	return ruo
}

// AddFloor adds u to the "floor" field.
func (ruo *ReplyUpdateOne) AddFloor(u uint64) *ReplyUpdateOne {
	ruo.mutation.AddFloor(u)
	return ruo
}

// SetOwnerID sets the "owner" edge to the Comment entity by ID.
func (ruo *ReplyUpdateOne) SetOwnerID(id uint64) *ReplyUpdateOne {
	ruo.mutation.SetOwnerID(id)
	return ruo
}

// SetNillableOwnerID sets the "owner" edge to the Comment entity by ID if the given value is not nil.
func (ruo *ReplyUpdateOne) SetNillableOwnerID(id *uint64) *ReplyUpdateOne {
	if id != nil {
		ruo = ruo.SetOwnerID(*id)
	}
	return ruo
}

// SetOwner sets the "owner" edge to the Comment entity.
func (ruo *ReplyUpdateOne) SetOwner(c *Comment) *ReplyUpdateOne {
	return ruo.SetOwnerID(c.ID)
}

// SetParent sets the "parent" edge to the Reply entity.
func (ruo *ReplyUpdateOne) SetParent(r *Reply) *ReplyUpdateOne {
	return ruo.SetParentID(r.ID)
}

// AddChildIDs adds the "children" edge to the Reply entity by IDs.
func (ruo *ReplyUpdateOne) AddChildIDs(ids ...uint64) *ReplyUpdateOne {
	ruo.mutation.AddChildIDs(ids...)
	return ruo
}

// AddChildren adds the "children" edges to the Reply entity.
func (ruo *ReplyUpdateOne) AddChildren(r ...*Reply) *ReplyUpdateOne {
	ids := make([]uint64, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ruo.AddChildIDs(ids...)
}

// Mutation returns the ReplyMutation object of the builder.
func (ruo *ReplyUpdateOne) Mutation() *ReplyMutation {
	return ruo.mutation
}

// ClearOwner clears the "owner" edge to the Comment entity.
func (ruo *ReplyUpdateOne) ClearOwner() *ReplyUpdateOne {
	ruo.mutation.ClearOwner()
	return ruo
}

// ClearParent clears the "parent" edge to the Reply entity.
func (ruo *ReplyUpdateOne) ClearParent() *ReplyUpdateOne {
	ruo.mutation.ClearParent()
	return ruo
}

// ClearChildren clears all "children" edges to the Reply entity.
func (ruo *ReplyUpdateOne) ClearChildren() *ReplyUpdateOne {
	ruo.mutation.ClearChildren()
	return ruo
}

// RemoveChildIDs removes the "children" edge to Reply entities by IDs.
func (ruo *ReplyUpdateOne) RemoveChildIDs(ids ...uint64) *ReplyUpdateOne {
	ruo.mutation.RemoveChildIDs(ids...)
	return ruo
}

// RemoveChildren removes "children" edges to Reply entities.
func (ruo *ReplyUpdateOne) RemoveChildren(r ...*Reply) *ReplyUpdateOne {
	ids := make([]uint64, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ruo.RemoveChildIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ruo *ReplyUpdateOne) Select(field string, fields ...string) *ReplyUpdateOne {
	ruo.fields = append([]string{field}, fields...)
	return ruo
}

// Save executes the query and returns the updated Reply entity.
func (ruo *ReplyUpdateOne) Save(ctx context.Context) (*Reply, error) {
	var (
		err  error
		node *Reply
	)
	if len(ruo.hooks) == 0 {
		if err = ruo.check(); err != nil {
			return nil, err
		}
		node, err = ruo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ReplyMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ruo.check(); err != nil {
				return nil, err
			}
			ruo.mutation = mutation
			node, err = ruo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ruo.hooks) - 1; i >= 0; i-- {
			if ruo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ruo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ruo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ruo *ReplyUpdateOne) SaveX(ctx context.Context) *Reply {
	node, err := ruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ruo *ReplyUpdateOne) Exec(ctx context.Context) error {
	_, err := ruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ruo *ReplyUpdateOne) ExecX(ctx context.Context) {
	if err := ruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ruo *ReplyUpdateOne) check() error {
	if v, ok := ruo.mutation.UserID(); ok {
		if err := reply.UserIDValidator(v); err != nil {
			return &ValidationError{Name: "user_id", err: fmt.Errorf("ent: validator failed for field \"user_id\": %w", err)}
		}
	}
	if v, ok := ruo.mutation.CommentID(); ok {
		if err := reply.CommentIDValidator(v); err != nil {
			return &ValidationError{Name: "comment_id", err: fmt.Errorf("ent: validator failed for field \"comment_id\": %w", err)}
		}
	}
	if v, ok := ruo.mutation.ParentID(); ok {
		if err := reply.ParentIDValidator(v); err != nil {
			return &ValidationError{Name: "parent_id", err: fmt.Errorf("ent: validator failed for field \"parent_id\": %w", err)}
		}
	}
	if v, ok := ruo.mutation.Content(); ok {
		if err := reply.ContentValidator(v); err != nil {
			return &ValidationError{Name: "content", err: fmt.Errorf("ent: validator failed for field \"content\": %w", err)}
		}
	}
	if v, ok := ruo.mutation.Status(); ok {
		if err := reply.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf("ent: validator failed for field \"status\": %w", err)}
		}
	}
	if v, ok := ruo.mutation.Floor(); ok {
		if err := reply.FloorValidator(v); err != nil {
			return &ValidationError{Name: "floor", err: fmt.Errorf("ent: validator failed for field \"floor\": %w", err)}
		}
	}
	return nil
}

func (ruo *ReplyUpdateOne) sqlSave(ctx context.Context) (_node *Reply, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   reply.Table,
			Columns: reply.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: reply.FieldID,
			},
		},
	}
	id, ok := ruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Reply.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := ruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, reply.FieldID)
		for _, f := range fields {
			if !reply.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != reply.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ruo.mutation.UserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: reply.FieldUserID,
		})
	}
	if value, ok := ruo.mutation.AddedUserID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: reply.FieldUserID,
		})
	}
	if value, ok := ruo.mutation.Content(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: reply.FieldContent,
		})
	}
	if value, ok := ruo.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: reply.FieldStatus,
		})
	}
	if value, ok := ruo.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: reply.FieldStatus,
		})
	}
	if value, ok := ruo.mutation.Floor(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: reply.FieldFloor,
		})
	}
	if value, ok := ruo.mutation.AddedFloor(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: reply.FieldFloor,
		})
	}
	if ruo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   reply.OwnerTable,
			Columns: []string{reply.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: comment.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   reply.OwnerTable,
			Columns: []string{reply.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: comment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   reply.ParentTable,
			Columns: []string{reply.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: reply.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   reply.ParentTable,
			Columns: []string{reply.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: reply.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   reply.ChildrenTable,
			Columns: []string{reply.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: reply.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RemovedChildrenIDs(); len(nodes) > 0 && !ruo.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   reply.ChildrenTable,
			Columns: []string{reply.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: reply.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   reply.ChildrenTable,
			Columns: []string{reply.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: reply.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Reply{config: ruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{reply.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
