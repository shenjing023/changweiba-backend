// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: account.proto

package srv_account

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Account service

type AccountService interface {
	GetUser(ctx context.Context, in *User, opts ...client.CallOption) (*User, error)
	RegisterUser(ctx context.Context, in *NewUserRequest, opts ...client.CallOption) (*NewUserResponse, error)
	EditUser(ctx context.Context, in *User, opts ...client.CallOption) (*User, error)
	Login(ctx context.Context, in *LoginRequest, opts ...client.CallOption) (*LoginResponse, error)
	GetUsersByIds(ctx context.Context, in *UsersRequest, opts ...client.CallOption) (*UsersResponse, error)
	GetUsersByUserIds(ctx context.Context, in *UsersByUserIdsRequest, opts ...client.CallOption) (*UsersByUserIdsResponse, error)
}

type accountService struct {
	c    client.Client
	name string
}

func NewAccountService(name string, c client.Client) AccountService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "srv.account"
	}
	return &accountService{
		c:    c,
		name: name,
	}
}

func (c *accountService) GetUser(ctx context.Context, in *User, opts ...client.CallOption) (*User, error) {
	req := c.c.NewRequest(c.name, "Account.GetUser", in)
	out := new(User)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountService) RegisterUser(ctx context.Context, in *NewUserRequest, opts ...client.CallOption) (*NewUserResponse, error) {
	req := c.c.NewRequest(c.name, "Account.RegisterUser", in)
	out := new(NewUserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountService) EditUser(ctx context.Context, in *User, opts ...client.CallOption) (*User, error) {
	req := c.c.NewRequest(c.name, "Account.EditUser", in)
	out := new(User)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountService) Login(ctx context.Context, in *LoginRequest, opts ...client.CallOption) (*LoginResponse, error) {
	req := c.c.NewRequest(c.name, "Account.Login", in)
	out := new(LoginResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountService) GetUsersByIds(ctx context.Context, in *UsersRequest, opts ...client.CallOption) (*UsersResponse, error) {
	req := c.c.NewRequest(c.name, "Account.GetUsersByIds", in)
	out := new(UsersResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountService) GetUsersByUserIds(ctx context.Context, in *UsersByUserIdsRequest, opts ...client.CallOption) (*UsersByUserIdsResponse, error) {
	req := c.c.NewRequest(c.name, "Account.GetUsersByUserIds", in)
	out := new(UsersByUserIdsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Account service

type AccountHandler interface {
	GetUser(context.Context, *User, *User) error
	RegisterUser(context.Context, *NewUserRequest, *NewUserResponse) error
	EditUser(context.Context, *User, *User) error
	Login(context.Context, *LoginRequest, *LoginResponse) error
	GetUsersByIds(context.Context, *UsersRequest, *UsersResponse) error
	GetUsersByUserIds(context.Context, *UsersByUserIdsRequest, *UsersByUserIdsResponse) error
}

func RegisterAccountHandler(s server.Server, hdlr AccountHandler, opts ...server.HandlerOption) error {
	type account interface {
		GetUser(ctx context.Context, in *User, out *User) error
		RegisterUser(ctx context.Context, in *NewUserRequest, out *NewUserResponse) error
		EditUser(ctx context.Context, in *User, out *User) error
		Login(ctx context.Context, in *LoginRequest, out *LoginResponse) error
		GetUsersByIds(ctx context.Context, in *UsersRequest, out *UsersResponse) error
		GetUsersByUserIds(ctx context.Context, in *UsersByUserIdsRequest, out *UsersByUserIdsResponse) error
	}
	type Account struct {
		account
	}
	h := &accountHandler{hdlr}
	return s.Handle(s.NewHandler(&Account{h}, opts...))
}

type accountHandler struct {
	AccountHandler
}

func (h *accountHandler) GetUser(ctx context.Context, in *User, out *User) error {
	return h.AccountHandler.GetUser(ctx, in, out)
}

func (h *accountHandler) RegisterUser(ctx context.Context, in *NewUserRequest, out *NewUserResponse) error {
	return h.AccountHandler.RegisterUser(ctx, in, out)
}

func (h *accountHandler) EditUser(ctx context.Context, in *User, out *User) error {
	return h.AccountHandler.EditUser(ctx, in, out)
}

func (h *accountHandler) Login(ctx context.Context, in *LoginRequest, out *LoginResponse) error {
	return h.AccountHandler.Login(ctx, in, out)
}

func (h *accountHandler) GetUsersByIds(ctx context.Context, in *UsersRequest, out *UsersResponse) error {
	return h.AccountHandler.GetUsersByIds(ctx, in, out)
}

func (h *accountHandler) GetUsersByUserIds(ctx context.Context, in *UsersByUserIdsRequest, out *UsersByUserIdsResponse) error {
	return h.AccountHandler.GetUsersByUserIds(ctx, in, out)
}
