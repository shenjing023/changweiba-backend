// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: post.proto

package postpb

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for PostService service

type PostService interface {
	NewPost(ctx context.Context, in *NewPostRequest, opts ...client.CallOption) (*NewPostResponse, error)
	NewComment(ctx context.Context, in *NewCommentRequest, opts ...client.CallOption) (*NewCommentResponse, error)
	NewReply(ctx context.Context, in *NewReplyRequest, opts ...client.CallOption) (*NewReplyResponse, error)
	DeletePost(ctx context.Context, in *DeleteRequest, opts ...client.CallOption) (*DeleteResponse, error)
	DeleteComment(ctx context.Context, in *DeleteRequest, opts ...client.CallOption) (*DeleteResponse, error)
	DeleteReply(ctx context.Context, in *DeleteRequest, opts ...client.CallOption) (*DeleteResponse, error)
	GetPost(ctx context.Context, in *PostRequest, opts ...client.CallOption) (*PostResponse, error)
	GetComment(ctx context.Context, in *CommentRequest, opts ...client.CallOption) (*CommentResponse, error)
	GetReply(ctx context.Context, in *ReplyRequest, opts ...client.CallOption) (*ReplyResponse, error)
	GetCommentsByPostId(ctx context.Context, in *CommentsRequest, opts ...client.CallOption) (*CommentsResponse, error)
	GetRepliesByCommentId(ctx context.Context, in *RepliesRequest, opts ...client.CallOption) (*RepliesResponse, error)
	Posts(ctx context.Context, in *PostsRequest, opts ...client.CallOption) (*PostsResponse, error)
	//rpc GetRepliesByCommentIds(RepliesByCommentsRequest) returns(RepliesByCommentsResponse){}
	GetPostsByUserId(ctx context.Context, in *PostsByUserIdRequest, opts ...client.CallOption) (*PostsByUserIdResponse, error)
	GetCommentsByUserId(ctx context.Context, in *CommentsByUserIdRequest, opts ...client.CallOption) (*CommentsByUserIdResponse, error)
	GetRepliesByUserId(ctx context.Context, in *RepliesByUserIdRequest, opts ...client.CallOption) (*RepliesByUserIdResponse, error)
}

type postService struct {
	c    client.Client
	name string
}

func NewPostService(name string, c client.Client) PostService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "postpb"
	}
	return &postService{
		c:    c,
		name: name,
	}
}

func (c *postService) NewPost(ctx context.Context, in *NewPostRequest, opts ...client.CallOption) (*NewPostResponse, error) {
	req := c.c.NewRequest(c.name, "PostService.NewPost", in)
	out := new(NewPostResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postService) NewComment(ctx context.Context, in *NewCommentRequest, opts ...client.CallOption) (*NewCommentResponse, error) {
	req := c.c.NewRequest(c.name, "PostService.NewComment", in)
	out := new(NewCommentResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postService) NewReply(ctx context.Context, in *NewReplyRequest, opts ...client.CallOption) (*NewReplyResponse, error) {
	req := c.c.NewRequest(c.name, "PostService.NewReply", in)
	out := new(NewReplyResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postService) DeletePost(ctx context.Context, in *DeleteRequest, opts ...client.CallOption) (*DeleteResponse, error) {
	req := c.c.NewRequest(c.name, "PostService.DeletePost", in)
	out := new(DeleteResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postService) DeleteComment(ctx context.Context, in *DeleteRequest, opts ...client.CallOption) (*DeleteResponse, error) {
	req := c.c.NewRequest(c.name, "PostService.DeleteComment", in)
	out := new(DeleteResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postService) DeleteReply(ctx context.Context, in *DeleteRequest, opts ...client.CallOption) (*DeleteResponse, error) {
	req := c.c.NewRequest(c.name, "PostService.DeleteReply", in)
	out := new(DeleteResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postService) GetPost(ctx context.Context, in *PostRequest, opts ...client.CallOption) (*PostResponse, error) {
	req := c.c.NewRequest(c.name, "PostService.GetPost", in)
	out := new(PostResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postService) GetComment(ctx context.Context, in *CommentRequest, opts ...client.CallOption) (*CommentResponse, error) {
	req := c.c.NewRequest(c.name, "PostService.GetComment", in)
	out := new(CommentResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postService) GetReply(ctx context.Context, in *ReplyRequest, opts ...client.CallOption) (*ReplyResponse, error) {
	req := c.c.NewRequest(c.name, "PostService.GetReply", in)
	out := new(ReplyResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postService) GetCommentsByPostId(ctx context.Context, in *CommentsRequest, opts ...client.CallOption) (*CommentsResponse, error) {
	req := c.c.NewRequest(c.name, "PostService.GetCommentsByPostId", in)
	out := new(CommentsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postService) GetRepliesByCommentId(ctx context.Context, in *RepliesRequest, opts ...client.CallOption) (*RepliesResponse, error) {
	req := c.c.NewRequest(c.name, "PostService.GetRepliesByCommentId", in)
	out := new(RepliesResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postService) Posts(ctx context.Context, in *PostsRequest, opts ...client.CallOption) (*PostsResponse, error) {
	req := c.c.NewRequest(c.name, "PostService.Posts", in)
	out := new(PostsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postService) GetPostsByUserId(ctx context.Context, in *PostsByUserIdRequest, opts ...client.CallOption) (*PostsByUserIdResponse, error) {
	req := c.c.NewRequest(c.name, "PostService.GetPostsByUserId", in)
	out := new(PostsByUserIdResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postService) GetCommentsByUserId(ctx context.Context, in *CommentsByUserIdRequest, opts ...client.CallOption) (*CommentsByUserIdResponse, error) {
	req := c.c.NewRequest(c.name, "PostService.GetCommentsByUserId", in)
	out := new(CommentsByUserIdResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postService) GetRepliesByUserId(ctx context.Context, in *RepliesByUserIdRequest, opts ...client.CallOption) (*RepliesByUserIdResponse, error) {
	req := c.c.NewRequest(c.name, "PostService.GetRepliesByUserId", in)
	out := new(RepliesByUserIdResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for PostService service

type PostServiceHandler interface {
	NewPost(context.Context, *NewPostRequest, *NewPostResponse) error
	NewComment(context.Context, *NewCommentRequest, *NewCommentResponse) error
	NewReply(context.Context, *NewReplyRequest, *NewReplyResponse) error
	DeletePost(context.Context, *DeleteRequest, *DeleteResponse) error
	DeleteComment(context.Context, *DeleteRequest, *DeleteResponse) error
	DeleteReply(context.Context, *DeleteRequest, *DeleteResponse) error
	GetPost(context.Context, *PostRequest, *PostResponse) error
	GetComment(context.Context, *CommentRequest, *CommentResponse) error
	GetReply(context.Context, *ReplyRequest, *ReplyResponse) error
	GetCommentsByPostId(context.Context, *CommentsRequest, *CommentsResponse) error
	GetRepliesByCommentId(context.Context, *RepliesRequest, *RepliesResponse) error
	Posts(context.Context, *PostsRequest, *PostsResponse) error
	//rpc GetRepliesByCommentIds(RepliesByCommentsRequest) returns(RepliesByCommentsResponse){}
	GetPostsByUserId(context.Context, *PostsByUserIdRequest, *PostsByUserIdResponse) error
	GetCommentsByUserId(context.Context, *CommentsByUserIdRequest, *CommentsByUserIdResponse) error
	GetRepliesByUserId(context.Context, *RepliesByUserIdRequest, *RepliesByUserIdResponse) error
}

func RegisterPostServiceHandler(s server.Server, hdlr PostServiceHandler, opts ...server.HandlerOption) error {
	type postService interface {
		NewPost(ctx context.Context, in *NewPostRequest, out *NewPostResponse) error
		NewComment(ctx context.Context, in *NewCommentRequest, out *NewCommentResponse) error
		NewReply(ctx context.Context, in *NewReplyRequest, out *NewReplyResponse) error
		DeletePost(ctx context.Context, in *DeleteRequest, out *DeleteResponse) error
		DeleteComment(ctx context.Context, in *DeleteRequest, out *DeleteResponse) error
		DeleteReply(ctx context.Context, in *DeleteRequest, out *DeleteResponse) error
		GetPost(ctx context.Context, in *PostRequest, out *PostResponse) error
		GetComment(ctx context.Context, in *CommentRequest, out *CommentResponse) error
		GetReply(ctx context.Context, in *ReplyRequest, out *ReplyResponse) error
		GetCommentsByPostId(ctx context.Context, in *CommentsRequest, out *CommentsResponse) error
		GetRepliesByCommentId(ctx context.Context, in *RepliesRequest, out *RepliesResponse) error
		Posts(ctx context.Context, in *PostsRequest, out *PostsResponse) error
		GetPostsByUserId(ctx context.Context, in *PostsByUserIdRequest, out *PostsByUserIdResponse) error
		GetCommentsByUserId(ctx context.Context, in *CommentsByUserIdRequest, out *CommentsByUserIdResponse) error
		GetRepliesByUserId(ctx context.Context, in *RepliesByUserIdRequest, out *RepliesByUserIdResponse) error
	}
	type PostService struct {
		postService
	}
	h := &postServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&PostService{h}, opts...))
}

type postServiceHandler struct {
	PostServiceHandler
}

func (h *postServiceHandler) NewPost(ctx context.Context, in *NewPostRequest, out *NewPostResponse) error {
	return h.PostServiceHandler.NewPost(ctx, in, out)
}

func (h *postServiceHandler) NewComment(ctx context.Context, in *NewCommentRequest, out *NewCommentResponse) error {
	return h.PostServiceHandler.NewComment(ctx, in, out)
}

func (h *postServiceHandler) NewReply(ctx context.Context, in *NewReplyRequest, out *NewReplyResponse) error {
	return h.PostServiceHandler.NewReply(ctx, in, out)
}

func (h *postServiceHandler) DeletePost(ctx context.Context, in *DeleteRequest, out *DeleteResponse) error {
	return h.PostServiceHandler.DeletePost(ctx, in, out)
}

func (h *postServiceHandler) DeleteComment(ctx context.Context, in *DeleteRequest, out *DeleteResponse) error {
	return h.PostServiceHandler.DeleteComment(ctx, in, out)
}

func (h *postServiceHandler) DeleteReply(ctx context.Context, in *DeleteRequest, out *DeleteResponse) error {
	return h.PostServiceHandler.DeleteReply(ctx, in, out)
}

func (h *postServiceHandler) GetPost(ctx context.Context, in *PostRequest, out *PostResponse) error {
	return h.PostServiceHandler.GetPost(ctx, in, out)
}

func (h *postServiceHandler) GetComment(ctx context.Context, in *CommentRequest, out *CommentResponse) error {
	return h.PostServiceHandler.GetComment(ctx, in, out)
}

func (h *postServiceHandler) GetReply(ctx context.Context, in *ReplyRequest, out *ReplyResponse) error {
	return h.PostServiceHandler.GetReply(ctx, in, out)
}

func (h *postServiceHandler) GetCommentsByPostId(ctx context.Context, in *CommentsRequest, out *CommentsResponse) error {
	return h.PostServiceHandler.GetCommentsByPostId(ctx, in, out)
}

func (h *postServiceHandler) GetRepliesByCommentId(ctx context.Context, in *RepliesRequest, out *RepliesResponse) error {
	return h.PostServiceHandler.GetRepliesByCommentId(ctx, in, out)
}

func (h *postServiceHandler) Posts(ctx context.Context, in *PostsRequest, out *PostsResponse) error {
	return h.PostServiceHandler.Posts(ctx, in, out)
}

func (h *postServiceHandler) GetPostsByUserId(ctx context.Context, in *PostsByUserIdRequest, out *PostsByUserIdResponse) error {
	return h.PostServiceHandler.GetPostsByUserId(ctx, in, out)
}

func (h *postServiceHandler) GetCommentsByUserId(ctx context.Context, in *CommentsByUserIdRequest, out *CommentsByUserIdResponse) error {
	return h.PostServiceHandler.GetCommentsByUserId(ctx, in, out)
}

func (h *postServiceHandler) GetRepliesByUserId(ctx context.Context, in *RepliesByUserIdRequest, out *RepliesByUserIdResponse) error {
	return h.PostServiceHandler.GetRepliesByUserId(ctx, in, out)
}
